/*
* This file is part of the TQMesh library.  
* This code was written by Florian Setzwein in 2022, 
* and is covered under the MIT License
* Refer to the accompanying documentation for details
* on usage and license.
*/

#include <iostream>
#include <cassert>

#include <TQMeshConfig.h>

#include "run_examples.h"

#include "VecND.h"
#include "Log.h"

#include "MeshGenerator.h"

using namespace CppUtils;
using namespace TQMesh;

/*********************************************************************
* This example covers the mesh generation where the domain boundaries 
* are specified by predefined boundary shapes
*********************************************************************/
void boundary_shapes()
{
  /*------------------------------------------------------------------
  | Define the size function and the domain structure
  ------------------------------------------------------------------*/
  UserSizeFunction f = [](const Vec2d& p) { return 0.4; };

  Domain domain   { f };

  /*------------------------------------------------------------------
  | The exterior boundary will be generated by using a rectangular
  | shape. It is defined by its center point xy = (1,1), as well as 
  | its width = 8 and height = 8. 
  | A boundary marker with value = 1 will be applied to all boundary
  | edges.
  | For this rectangular boundary, four vertices will be added to
  | the domain.
  ------------------------------------------------------------------*/
  Boundary& b_ext = domain.add_exterior_boundary();
  b_ext.set_shape_rectangle(1, {1.0,1.0}, 8.0, 8.0);

  /*------------------------------------------------------------------
  | Next we will place a circular interior boundary insides the 
  | domain. Its center point is set to xy = (0,1) and its radius is 
  | set to 1.25.
  | The circular boundary will be created from 30 edge segments, all
  | of which will get the boundary marker with value = 2.
  | Accordingly, 30 new vertices will be added to the domain.
  ------------------------------------------------------------------*/
  Boundary& b_shape_1 = domain.add_interior_boundary();
  b_shape_1.set_shape_circle(2, {0.0,1.0}, 1.25, 30);

  /*------------------------------------------------------------------
  | Finally we will add two more interior boundaries: A suqare 
  | and a triangle. These will get the markers 3 and respectively, 
  | and both will feature the edge length of 1.75.
  |
  | For all shapes, you can provide two optional arguments that 
  | control the local mesh size and the respective range of that 
  | local mesh size. Here we will refine the square edges locally to 
  | a mesh scale of 0.05 within a range of 0.25.
  ------------------------------------------------------------------*/
  Boundary& b_shape_2 = domain.add_interior_boundary();
  b_shape_2.set_shape_triangle(4, {3.0,-0.5}, 1.75);

  Boundary& b_shape_3 = domain.add_interior_boundary();
  b_shape_3.set_shape_square(3, {3.0,2.5}, 1.75, 0.05, 0.25);

  /*------------------------------------------------------------------
  | Initialize the mesh
  ------------------------------------------------------------------*/
  MeshGenerator generator {};
  Mesh& mesh = generator.new_mesh( domain );

  /*------------------------------------------------------------------
  | Here we will create some quad layers. 
  ------------------------------------------------------------------*/
  generator.quad_layer_generation(mesh)
    .n_layers(3)
    .first_height(0.05)
    .growth_rate(1.3)
    .starting_position({5.0,1.0})
    .ending_position({5.0,1.0})
    .generate_elements();

  generator.quad_layer_generation(mesh)
    .n_layers(3)
    .first_height(0.05)
    .growth_rate(1.3)
    .starting_position({0.0,2.25})
    .ending_position({0.0,2.25})
    .generate_elements();

  generator.quad_layer_generation(mesh)
    .n_layers(3)
    .first_height(0.05)
    .growth_rate(1.3)
    .starting_position({3.75,2.5})
    .ending_position({3.75,2.5})
    .generate_elements();

  /*------------------------------------------------------------------
  | Now generate the mesh elements
  ------------------------------------------------------------------*/
  generator.triangulation(mesh).generate_elements();

  /*------------------------------------------------------------------
  | Smooth the mesh for four iterations
  ------------------------------------------------------------------*/
  generator.mixed_smoothing(mesh).smooth(2); 

  /*------------------------------------------------------------------
  | Finally, the mesh is exportet to a file in TXT format.
  ------------------------------------------------------------------*/
  std::string source_dir { TQMESH_SOURCE_DIR };
  std::string file_name 
  { source_dir + "/auxiliary/example_data/boundary_shapes" };

  LOG(INFO) << "Writing mesh output to: " << file_name << ".vtu";
  generator.write_mesh(mesh, file_name, MeshExportType::VTU);

  LOG(INFO) << "Writing mesh output to: " << file_name << ".txt";
  generator.write_mesh(mesh, file_name, MeshExportType::TXT);

} // boundary_shapes()
