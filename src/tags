!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	utils/MathUtility.h	/^static inline T ABS(T a)$/;"	f	namespace:CppUtils
ASSERT	utils/Helpers.h	/^static inline void ASSERT(bool cond, const std::string& msg)$/;"	f	namespace:CppUtils
BLUE	utils/Log.h	/^  BLUE     = 34,$/;"	e	enum:CppUtils::LogColor
BdryType	algorithm/Boundary.h	/^enum class BdryType$/;"	c	namespace:TQMesh
Boundary	algorithm/Boundary.h	/^  Boundary(Vertices& domain_vertices, BdryType btype)$/;"	f	class:TQMesh::Boundary
Boundary	algorithm/Boundary.h	/^class Boundary : public EdgeList$/;"	c	namespace:TQMesh
BoundaryTests	tests/tests_Boundary.cpp	/^namespace BoundaryTests $/;"	n	file:
CCW	utils/Geometry.h	/^  CCW,    \/\/ Counter-Clockwise$/;"	m	class:CppUtils::Orientation
CHECK	utils/Testing.h	103;"	d
CL	utils/Geometry.h	/^  CL,     \/\/ Colinear$/;"	m	class:CppUtils::Orientation
CLAMP	utils/MathUtility.h	/^static inline T CLAMP(T x, T lower, T upper)$/;"	f	namespace:CppUtils
COUT	algorithm/MeshWriter.h	/^  COUT, $/;"	m	class:TQMesh::MeshExportType
CPPUTILS_MAX	utils/MathUtility.h	/^constexpr double CPPUTILS_MAX     = std::numeric_limits<double>::max();$/;"	m	namespace:CppUtils
CPPUTILS_MIN	utils/MathUtility.h	/^constexpr double CPPUTILS_MIN     = std::numeric_limits<double>::min();$/;"	m	namespace:CppUtils
CPPUTILS_PI	utils/MathUtility.h	/^constexpr double CPPUTILS_PI      = 3.14159265358979323846;$/;"	m	namespace:CppUtils
CPPUTILS_PI_HALF	utils/MathUtility.h	/^constexpr double CPPUTILS_PI_HALF = 0.5 * 3.14159265358979323846;$/;"	m	namespace:CppUtils
CPPUTILS_SMALL	utils/MathUtility.h	/^constexpr double CPPUTILS_SMALL   = std::numeric_limits<double>::epsilon();$/;"	m	namespace:CppUtils
CSVBoundaryReader	algorithm/Boundary.h	/^  CSVBoundaryReader(const std::string& filename) $/;"	f	class:TQMesh::CSVBoundaryReader
CSVBoundaryReader	algorithm/Boundary.h	/^class CSVBoundaryReader$/;"	c	namespace:TQMesh
CW	utils/Geometry.h	/^  CW,     \/\/ Clockwise$/;"	m	class:CppUtils::Orientation
CYAN	utils/Log.h	/^  CYAN     = 36,$/;"	e	enum:CppUtils::LogColor
CheckerTests	tests/tests_MeshChecker.cpp	/^namespace CheckerTests $/;"	n	file:
CircQuery	utils/QuadTree.h	/^  typedef bool (*CircQuery)(T* item, $/;"	t	class:CppUtils::QuadTree
CleanupTests	tests/tests_MeshCleanup.cpp	/^namespace CleanupTests $/;"	n	file:
ConditionalDeleter	utils/Log.h	/^struct ConditionalDeleter$/;"	s	namespace:CppUtils
Container	utils/Container.h	/^  Container(Container<T>&& c) $/;"	f	class:CppUtils::Container
Container	utils/Container.h	/^  Container(const Container<T>& c) $/;"	f	class:CppUtils::Container
Container	utils/Container.h	/^  Container(double        qtree_scale = ContainerQuadTreeScale,$/;"	f	class:CppUtils::Container
Container	utils/Container.h	/^class Container$/;"	c	namespace:CppUtils
ContainerEntry	utils/Container.h	/^  ContainerEntry(const Vec2d& xy) : xy_ {xy} {}$/;"	f	class:CppUtils::ContainerEntry
ContainerEntry	utils/Container.h	/^  ContainerEntry(double x, double y) : xy_ {x, y} {}$/;"	f	class:CppUtils::ContainerEntry
ContainerEntry	utils/Container.h	/^class ContainerEntry$/;"	c	namespace:CppUtils
ContainerQuadTreeDepth	utils/Container.h	/^constexpr size_t ContainerQuadTreeDepth = 25;$/;"	m	namespace:CppUtils
ContainerQuadTreeItems	utils/Container.h	/^constexpr size_t ContainerQuadTreeItems = 100;$/;"	m	namespace:CppUtils
ContainerQuadTreeScale	utils/Container.h	/^constexpr double ContainerQuadTreeScale = 10000.0;$/;"	m	namespace:CppUtils
CppUtils	utils/Container.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/Geometry.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/Helpers.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/Log.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/MathUtility.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/Matrix.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/ParaReader.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/ProgressBar.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/QuadTree.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/StringOps.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/Testing.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/Timer.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/VecND.h	/^namespace CppUtils {$/;"	n
CppUtils	utils/VtkIO.h	/^namespace CppUtils {$/;"	n
DEBUG	utils/Log.h	/^{ ERROR, WARNING, INFO, DEBUG };$/;"	e	enum:CppUtils::LogLevel
DEBUG_LOG	utils/Log.h	316;"	d
DEBUG_LOG	utils/Log.h	319;"	d
DEFAULT	utils/Log.h	/^  DEFAULT  = 39,$/;"	e	enum:CppUtils::LogColor
DEFAULT_ELEMENT_COLOR	algorithm/utils.h	/^constexpr int    DEFAULT_ELEMENT_COLOR =  0;$/;"	m	namespace:TQMesh
DEFAULT_MESH_ID	algorithm/utils.h	/^constexpr int    DEFAULT_MESH_ID       =  0;$/;"	m	namespace:TQMesh
Domain	algorithm/Domain.h	/^  Domain( UserSizeFunction f = [](const Vec2d& p){return 1.0;},$/;"	f	class:TQMesh::Domain
Domain	algorithm/Domain.h	/^class Domain$/;"	c	namespace:TQMesh
EQ	utils/MathUtility.h	/^static inline bool EQ(T a, T b, $/;"	f	namespace:CppUtils
EQ0	utils/MathUtility.h	/^static inline bool EQ0(T a,$/;"	f	namespace:CppUtils
ERROR	utils/Log.h	/^{ ERROR, WARNING, INFO, DEBUG };$/;"	e	enum:CppUtils::LogLevel
EXTERIOR	algorithm/Boundary.h	/^  EXTERIOR,$/;"	m	class:TQMesh::BdryType
Edge	algorithm/Edge.h	/^  Edge(Vertex& v1, Vertex& v2, EdgeList& edgelist, int m) $/;"	f	class:TQMesh::Edge
Edge	algorithm/Edge.h	/^class Edge : public ContainerEntry<Edge>$/;"	c	namespace:TQMesh
EdgeList	algorithm/EdgeList.h	/^  EdgeList( Orientation orient ) : orient_ { orient }$/;"	f	class:TQMesh::EdgeList
EdgeList	algorithm/EdgeList.h	/^  EdgeList(EdgeList&& el) $/;"	f	class:TQMesh::EdgeList
EdgeList	algorithm/EdgeList.h	/^  EdgeList(const EdgeList& el) : orient_ { el.orient_ }$/;"	f	class:TQMesh::EdgeList
EdgeList	algorithm/EdgeList.h	/^class EdgeList$/;"	c	namespace:TQMesh
EdgeListTests	tests/tests_EdgeList.cpp	/^namespace EdgeListTests $/;"	n	file:
EdgeProperty	algorithm/Edge.h	/^enum class EdgeProperty : uint8_t {$/;"	c	namespace:TQMesh
EntityChecks	algorithm/EntityChecks.h	/^class EntityChecks$/;"	c	namespace:TQMesh
Error	algorithm/Error.h	/^  Error(const std::string& msg) : message_ {msg} {}$/;"	f	class:TQMesh::Error
Error	algorithm/Error.h	/^class Error : public std::exception$/;"	c	namespace:TQMesh
F	extern_libs/exprtk.h	/^      typedef ifunction<T>                                F;$/;"	t	class:exprtk::parser
Facet	algorithm/Facet.h	/^class Facet$/;"	c	namespace:TQMesh
Front	algorithm/Front.h	/^  Front() : EdgeList( Orientation::NONE ) {}$/;"	f	class:TQMesh::Front
Front	algorithm/Front.h	/^class Front : public EdgeList$/;"	c	namespace:TQMesh
FrontInitData	algorithm/Front.h	/^  FrontInitData(FrontInitData&& f)$/;"	f	class:TQMesh::FrontInitData
FrontInitData	algorithm/Front.h	/^  FrontInitData(const Domain& domain) $/;"	f	class:TQMesh::FrontInitData
FrontInitData	algorithm/Front.h	/^  FrontInitData(const Domain& domain, const MeshVector& meshes) $/;"	f	class:TQMesh::FrontInitData
FrontInitData	algorithm/Front.h	/^class FrontInitData$/;"	c	namespace:TQMesh
FrontTests	tests/tests_Front.cpp	/^namespace FrontTests $/;"	n	file:
FrontUpdate	algorithm/FrontUpdate.h	/^  FrontUpdate(Mesh& mesh, const Domain& domain, Front& front)$/;"	f	class:TQMesh::FrontUpdate
FrontUpdate	algorithm/FrontUpdate.h	/^class FrontUpdate$/;"	c	namespace:TQMesh
GF	extern_libs/exprtk.h	/^      typedef igeneric_function<T>                        GF;$/;"	t	class:exprtk::parser
GREEN	utils/Log.h	/^  GREEN    = 32,$/;"	e	enum:CppUtils::LogColor
INCLUDE_EXPRTK_HPP	extern_libs/exprtk.h	34;"	d
INFO	utils/Log.h	/^{ ERROR, WARNING, INFO, DEBUG };$/;"	e	enum:CppUtils::LogLevel
INTERIOR_EDGE_COLOR	algorithm/utils.h	/^constexpr int    INTERIOR_EDGE_COLOR   = -1;$/;"	m	namespace:TQMesh
Invalid	utils/ParaReader.h	/^    Invalid(const string& msg) : message_ {msg} {}$/;"	f	class:CppUtils::ParaBlock::Invalid
Invalid	utils/ParaReader.h	/^  class Invalid : public std::exception$/;"	c	class:CppUtils::ParaBlock
LOG	utils/Log.h	/^  LOG() {}$/;"	f	class:CppUtils::LOG
LOG	utils/Log.h	/^  LOG(LogLevel level)$/;"	f	class:CppUtils::LOG
LOG	utils/Log.h	/^  LOG(LogLevel level, LogColor c)$/;"	f	class:CppUtils::LOG
LOG	utils/Log.h	/^class LOG$/;"	c	namespace:CppUtils
LOG_PROPERTIES	utils/Log.h	/^static inline LogProperties LOG_PROPERTIES;$/;"	m	namespace:CppUtils
Laplace	algorithm/MeshGenerator.h	/^  Laplace,$/;"	m	class:TQMesh::SmoothingAlgorithm
LaplaceSmoothing	algorithm/SmoothingStrategy.h	/^  LaplaceSmoothing(Mesh& mesh, const Domain& domain) $/;"	f	class:TQMesh::LaplaceSmoothing
LaplaceSmoothing	algorithm/SmoothingStrategy.h	/^class LaplaceSmoothing : public SmoothingStrategy$/;"	c	namespace:TQMesh
LogColor	utils/Log.h	/^enum LogColor {$/;"	g	namespace:CppUtils
LogLevel	utils/Log.h	/^enum LogLevel $/;"	g	namespace:CppUtils
LogProperties	utils/Log.h	/^  LogProperties() $/;"	f	class:CppUtils::LogProperties
LogProperties	utils/Log.h	/^class LogProperties$/;"	c	namespace:CppUtils
MAX	utils/MathUtility.h	/^static inline T MAX(T a, T b) $/;"	f	namespace:CppUtils
MIN	utils/MathUtility.h	/^static inline T MIN(T a, T b) $/;"	f	namespace:CppUtils
MOD	utils/MathUtility.h	/^static inline T MOD(T n, T M)$/;"	f	namespace:CppUtils
Matrix	utils/Matrix.h	/^  Matrix() $/;"	f	class:CppUtils::Matrix
Matrix	utils/Matrix.h	/^  Matrix(Matrix&& m)$/;"	f	class:CppUtils::Matrix
Matrix	utils/Matrix.h	/^  Matrix(T* data, int r, int c)$/;"	f	class:CppUtils::Matrix
Matrix	utils/Matrix.h	/^  Matrix(T** data, int r, int c)$/;"	f	class:CppUtils::Matrix
Matrix	utils/Matrix.h	/^  Matrix(const Matrix& m)$/;"	f	class:CppUtils::Matrix
Matrix	utils/Matrix.h	/^  Matrix(int r, int c) $/;"	f	class:CppUtils::Matrix
Matrix	utils/Matrix.h	/^class Matrix$/;"	c	namespace:CppUtils
Mesh	algorithm/Mesh.h	/^  Mesh(Mesh&& mesh)$/;"	f	class:TQMesh::Mesh
Mesh	algorithm/Mesh.h	/^  Mesh(int       mesh_id=DEFAULT_MESH_ID,$/;"	f	class:TQMesh::Mesh
Mesh	algorithm/Mesh.h	/^class Mesh$/;"	c	namespace:TQMesh
MeshBuilder	algorithm/MeshBuilder.h	/^class MeshBuilder$/;"	c	namespace:TQMesh
MeshChecker	algorithm/MeshChecker.h	/^  MeshChecker(Mesh& mesh, const Domain& domain)$/;"	f	class:TQMesh::MeshChecker
MeshChecker	algorithm/MeshChecker.h	/^class MeshChecker$/;"	c	namespace:TQMesh
MeshCleanup	algorithm/MeshCleanup.h	/^class MeshCleanup$/;"	c	namespace:TQMesh
MeshConstruction	app/TQMeshApp.h	/^  MeshConstruction() {}$/;"	f	class:TQMesh::MeshConstruction
MeshConstruction	app/TQMeshApp.h	/^class MeshConstruction$/;"	c	namespace:TQMesh
MeshExportType	algorithm/MeshWriter.h	/^enum class MeshExportType { $/;"	c	namespace:TQMesh
MeshGenerator	algorithm/MeshGenerator.h	/^  MeshGenerator() {}$/;"	f	class:TQMesh::MeshGenerator
MeshGenerator	algorithm/MeshGenerator.h	/^class MeshGenerator$/;"	c	namespace:TQMesh
MeshGeneratorTests	tests/tests_MeshGenerator.cpp	/^namespace MeshGeneratorTests $/;"	n	file:
MeshMerger	algorithm/MeshMerger.h	/^  MeshMerger(Mesh& receiver, Mesh& donor)$/;"	f	class:TQMesh::MeshMerger
MeshMerger	algorithm/MeshMerger.h	/^class MeshMerger$/;"	c	namespace:TQMesh
MeshSmootherTests	tests/tests_SmoothingStrategy.cpp	/^namespace MeshSmootherTests $/;"	n	file:
MeshTests	tests/tests_Mesh.cpp	/^namespace MeshTests $/;"	n	file:
MeshWriter	algorithm/MeshWriter.h	/^  MeshWriter(Mesh& mesh, const Domain& domain)$/;"	f	class:TQMesh::MeshWriter
MeshWriter	algorithm/MeshWriter.h	/^class MeshWriter$/;"	c	namespace:TQMesh
MeshingAlgorithm	algorithm/MeshGenerator.h	/^enum class MeshingAlgorithm { $/;"	c	namespace:TQMesh
MeshingStrategy	algorithm/MeshingStrategy.h	/^  MeshingStrategy(Mesh& mesh, const Domain& domain)$/;"	f	class:TQMesh::MeshingStrategy
MeshingStrategy	algorithm/MeshingStrategy.h	/^class MeshingStrategy $/;"	c	namespace:TQMesh
Mixed	algorithm/MeshGenerator.h	/^  Mixed,$/;"	m	class:TQMesh::SmoothingAlgorithm
MixedSmoothing	algorithm/SmoothingStrategy.h	/^  MixedSmoothing(Mesh& mesh, const Domain& domain) $/;"	f	class:TQMesh::MixedSmoothing
MixedSmoothing	algorithm/SmoothingStrategy.h	/^class MixedSmoothing : public SmoothingStrategy$/;"	c	namespace:TQMesh
ModificationAlgorithm	algorithm/MeshGenerator.h	/^enum class ModificationAlgorithm {$/;"	c	namespace:TQMesh
ModificationStrategy	algorithm/ModificationStrategy.h	/^  ModificationStrategy(Mesh& mesh, const Domain& domain)$/;"	f	class:TQMesh::ModificationStrategy
ModificationStrategy	algorithm/ModificationStrategy.h	/^class ModificationStrategy$/;"	c	namespace:TQMesh
NOMINMAX	extern_libs/exprtk.h	38735;"	d
NearestQuery	utils/QuadTree.h	/^  typedef bool (*NearestQuery)(T* item, $/;"	t	class:CppUtils::QuadTree
None	algorithm/MeshGenerator.h	/^  None,$/;"	m	class:TQMesh::MeshingAlgorithm
None	algorithm/MeshGenerator.h	/^  None,$/;"	m	class:TQMesh::ModificationAlgorithm
None	algorithm/MeshGenerator.h	/^  None,$/;"	m	class:TQMesh::RefinementAlgorithm
None	algorithm/MeshGenerator.h	/^  None,$/;"	m	class:TQMesh::SmoothingAlgorithm
NullFacet	algorithm/Facet.h	/^class NullFacet : public Facet$/;"	c	namespace:TQMesh
OStreamType	utils/Log.h	/^enum OStreamType$/;"	g	namespace:CppUtils
Orientation	utils/Geometry.h	/^enum class Orientation$/;"	c	namespace:CppUtils
PURPLE	utils/Log.h	/^  PURPLE   = 35,$/;"	e	enum:CppUtils::LogColor
ParaBlock	utils/ParaReader.h	/^  ParaBlock(const string& file_path)$/;"	f	class:CppUtils::ParaBlock
ParaBlock	utils/ParaReader.h	/^  ParaBlock(const string& start, const string& end,$/;"	f	class:CppUtils::ParaBlock
ParaBlock	utils/ParaReader.h	/^class ParaBlock : public ParameterBase$/;"	c	namespace:CppUtils
ParaReaderTests	tests/tests_ParaReader.cpp	/^namespace ParaReaderTests $/;"	n	file:
ParaType	utils/ParaReader.h	/^enum class ParaType $/;"	c	namespace:CppUtils
Parameter	utils/ParaReader.h	/^  Parameter(ParaType type, $/;"	f	class:CppUtils::Parameter
Parameter	utils/ParaReader.h	/^  Parameter(ParaType type, const string& key, size_t n,$/;"	f	class:CppUtils::Parameter
Parameter	utils/ParaReader.h	/^class Parameter : public ParameterBase$/;"	c	namespace:CppUtils
ParameterBase	utils/ParaReader.h	/^  ParameterBase(ParaType type)$/;"	f	class:CppUtils::ParameterBase
ParameterBase	utils/ParaReader.h	/^  ParameterBase(ParaType type, const string& key,$/;"	f	class:CppUtils::ParameterBase
ParameterBase	utils/ParaReader.h	/^  ParameterBase(ParaType type,$/;"	f	class:CppUtils::ParameterBase
ParameterBase	utils/ParaReader.h	/^class ParameterBase$/;"	c	namespace:CppUtils
ProgressBar	utils/ProgressBar.h	/^  ProgressBar(int w = 70)$/;"	f	class:CppUtils::ProgressBar
ProgressBar	utils/ProgressBar.h	/^class ProgressBar$/;"	c	namespace:CppUtils
QMorph	algorithm/MeshGenerator.h	/^  QMorph,$/;"	m	class:TQMesh::ModificationAlgorithm
Quad	algorithm/MeshGenerator.h	/^  Quad,$/;"	m	class:TQMesh::RefinementAlgorithm
Quad	algorithm/Quad.h	/^  Quad(Vertex& v1, Vertex& v2, Vertex& v3, Vertex& v4)$/;"	f	class:TQMesh::Quad
Quad	algorithm/Quad.h	/^class Quad : public Facet, public ContainerEntry<Quad>$/;"	c	namespace:TQMesh
QuadGeometry	algorithm/FacetGeometry.h	/^class QuadGeometry $/;"	c	namespace:TQMesh
QuadLayer	algorithm/MeshGenerator.h	/^  QuadLayer,$/;"	m	class:TQMesh::MeshingAlgorithm
QuadLayerVertices	algorithm/QuadLayering.h	/^  QuadLayerVertices(Edge& e_start, Edge& e_end, $/;"	f	class:TQMesh::QuadLayerVertices
QuadLayerVertices	algorithm/QuadLayering.h	/^class QuadLayerVertices$/;"	c	namespace:TQMesh
QuadLayering	algorithm/QuadLayering.h	/^  QuadLayering(Mesh& mesh, const Domain& domain)$/;"	f	class:TQMesh::QuadLayering
QuadLayering	algorithm/QuadLayering.h	/^class QuadLayering : public MeshingStrategy$/;"	c	namespace:TQMesh
QuadRefinement	algorithm/RefinementStrategy.h	/^  QuadRefinement(Mesh& mesh, const Domain& domain)$/;"	f	class:TQMesh::QuadRefinement
QuadRefinement	algorithm/RefinementStrategy.h	/^class QuadRefinement : public RefinementStrategy$/;"	c	namespace:TQMesh
QuadTests	tests/tests_Quad.cpp	/^namespace QuadTests $/;"	n	file:
QuadTree	utils/QuadTree.h	/^  QuadTree(V               scale, $/;"	f	class:CppUtils::QuadTree
QuadTree	utils/QuadTree.h	/^class QuadTree$/;"	c	namespace:CppUtils
QueryContainer	utils/ParaReader.h	/^  QueryContainer() {};$/;"	f	struct:CppUtils::QueryContainer
QueryContainer	utils/ParaReader.h	/^struct QueryContainer$/;"	s	namespace:CppUtils
RED	utils/Log.h	/^  RED      = 31,$/;"	e	enum:CppUtils::LogColor
RectQuery	utils/QuadTree.h	/^  typedef bool (*RectQuery)(T* item, $/;"	t	class:CppUtils::QuadTree
RefType	extern_libs/exprtk.h	/^         typedef       T& RefType;$/;"	t	struct:exprtk::details::functor_t
RefType	extern_libs/exprtk.h	/^         typedef typename details::functor_t<T>::RefType RefType;$/;"	t	struct:exprtk::details::opr_base
RefType	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::RefType RefType;$/;"	t	struct:exprtk::details::add_op
RefType	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::RefType RefType;$/;"	t	struct:exprtk::details::div_op
RefType	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::RefType RefType;$/;"	t	struct:exprtk::details::mod_op
RefType	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::RefType RefType;$/;"	t	struct:exprtk::details::mul_op
RefType	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::RefType RefType;$/;"	t	struct:exprtk::details::pow_op
RefType	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::RefType RefType;$/;"	t	struct:exprtk::details::sub_op
RefinementAlgorithm	algorithm/MeshGenerator.h	/^enum class RefinementAlgorithm {$/;"	c	namespace:TQMesh
RefinementStrategy	algorithm/RefinementStrategy.h	/^  RefinementStrategy(Mesh& mesh, const Domain& domain)$/;"	f	class:TQMesh::RefinementStrategy
RefinementStrategy	algorithm/RefinementStrategy.h	/^class RefinementStrategy$/;"	c	namespace:TQMesh
SizeFunction	algorithm/Domain.h	/^  SizeFunction(UserSizeFunction f) : f_ { f } {}$/;"	f	class:TQMesh::SizeFunction
SizeFunction	algorithm/Domain.h	/^class SizeFunction$/;"	c	namespace:TQMesh
SizeFunctionTests	tests/tests_SizeFunction.cpp	/^namespace SizeFunctionTests $/;"	n	file:
SmoothingAlgorithm	algorithm/MeshGenerator.h	/^enum class SmoothingAlgorithm {$/;"	c	namespace:TQMesh
SmoothingStrategy	algorithm/SmoothingStrategy.h	/^  SmoothingStrategy(Mesh& mesh, const Domain& domain)$/;"	f	class:TQMesh::SmoothingStrategy
SmoothingStrategy	algorithm/SmoothingStrategy.h	/^class SmoothingStrategy$/;"	c	namespace:TQMesh
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
T0	extern_libs/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
T0	extern_libs/exprtk.h	/^         typedef T0_ T0;$/;"	t	class:exprtk::details::exprtk_final
T0oT1	extern_libs/exprtk.h	/^         T0oT1(T0 p0, T1 p1, const bfunc_t p2)$/;"	f	class:exprtk::details::exprtk_final
T0oT1	extern_libs/exprtk.h	/^         T0oT1(T0oT1<T,T0,T1>&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1_define	extern_libs/exprtk.h	/^      struct T0oT1_define$/;"	s	namespace:exprtk::details
T0oT1oT2	extern_libs/exprtk.h	/^         T0oT1oT2(T0 p0, T1 p1, T2 p2, const bfunc_t p3, const bfunc_t p4)$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2	extern_libs/exprtk.h	/^         T0oT1oT2(node_type&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT20T3process	extern_libs/exprtk.h	/^      struct T0oT1oT20T3process$/;"	s	namespace:exprtk::details
T0oT1oT2_base_node	extern_libs/exprtk.h	/^      class T0oT1oT2_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
T0oT1oT2_define	extern_libs/exprtk.h	/^      struct T0oT1oT2_define$/;"	s	namespace:exprtk::details
T0oT1oT2_sf3	extern_libs/exprtk.h	/^         T0oT1oT2_sf3(T0 p0, T1 p1, T2 p2, const tfunc_t p3)$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2_sf3	extern_libs/exprtk.h	/^         T0oT1oT2_sf3(node_type&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2_sf3ext	extern_libs/exprtk.h	/^         T0oT1oT2_sf3ext(T0 p0, T1 p1, T2 p2)$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2_sf3ext	extern_libs/exprtk.h	/^         T0oT1oT2_sf3ext(node_type&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2oT3	extern_libs/exprtk.h	/^         T0oT1oT2oT3(T0 p0, T1 p1, T2 p2, T3 p3, bfunc_t p4, bfunc_t p5, bfunc_t p6)$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2oT3	extern_libs/exprtk.h	/^         T0oT1oT2oT3(node_type&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2oT3_base_node	extern_libs/exprtk.h	/^      class T0oT1oT2oT3_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
T0oT1oT2oT3_define	extern_libs/exprtk.h	/^      struct T0oT1oT2oT3_define$/;"	s	namespace:exprtk::details
T0oT1oT2oT3_sf4	extern_libs/exprtk.h	/^         T0oT1oT2oT3_sf4(T0 p0, T1 p1, T2 p2, T3 p3, const qfunc_t p4)$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2oT3_sf4	extern_libs/exprtk.h	/^         T0oT1oT2oT3_sf4(node_type&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2oT3_sf4ext	extern_libs/exprtk.h	/^         T0oT1oT2oT3_sf4ext(T0 p0, T1 p1, T2 p2, T3 p3)$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2oT3_sf4ext	extern_libs/exprtk.h	/^         T0oT1oT2oT3_sf4ext(node_type&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2process	extern_libs/exprtk.h	/^      struct T0oT1oT2process$/;"	s	namespace:exprtk::details
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
T1	extern_libs/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
T1	extern_libs/exprtk.h	/^         typedef T1_ T1;$/;"	t	class:exprtk::details::exprtk_final
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
T2	extern_libs/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
T2	extern_libs/exprtk.h	/^         typedef T2_ T2;$/;"	t	class:exprtk::details::exprtk_final
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
T3	extern_libs/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
T3	extern_libs/exprtk.h	/^         typedef T3_ T3;$/;"	t	class:exprtk::details::exprtk_final
TERMINATE	utils/Helpers.h	/^static inline void TERMINATE(const std::string& msg)$/;"	f	namespace:CppUtils
TO_CERR	utils/Log.h	/^{ TO_COUT, TO_CERR, TO_CLOG, TO_FILE };$/;"	e	enum:CppUtils::OStreamType
TO_CLOG	utils/Log.h	/^{ TO_COUT, TO_CERR, TO_CLOG, TO_FILE };$/;"	e	enum:CppUtils::OStreamType
TO_COUT	utils/Log.h	/^{ TO_COUT, TO_CERR, TO_CLOG, TO_FILE };$/;"	e	enum:CppUtils::OStreamType
TO_FILE	utils/Log.h	/^{ TO_COUT, TO_CERR, TO_CLOG, TO_FILE };$/;"	e	enum:CppUtils::OStreamType
TQMesh	algorithm/Boundary.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Domain.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Edge.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/EdgeList.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/EntityChecks.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Error.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Facet.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/FacetGeometry.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Front.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/FrontUpdate.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Mesh.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/MeshBuilder.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/MeshChecker.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/MeshCleanup.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/MeshGenerator.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/MeshMerger.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/MeshWriter.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/MeshingStrategy.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/ModificationStrategy.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Quad.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/QuadLayering.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/RefinementStrategy.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/SmoothingStrategy.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Triangle.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Triangulation.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Vertex.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/utils.h	/^namespace TQMesh {$/;"	n
TQMesh	app/TQMeshApp.h	/^namespace TQMesh {$/;"	n
TQMesh	tests/TestBuilder.h	/^namespace TQMesh {$/;"	n
TQMeshApp	app/TQMeshApp.h	/^  TQMeshApp(const std::string& input_file)$/;"	f	class:TQMesh::TQMeshApp
TQMeshApp	app/TQMeshApp.h	/^class TQMeshApp$/;"	c	namespace:TQMesh
TQ_MAX	algorithm/utils.h	/^constexpr double TQ_MAX                = DBL_MAX;$/;"	m	namespace:TQMesh
TQ_MIN	algorithm/utils.h	/^constexpr double TQ_MIN                = DBL_MIN;$/;"	m	namespace:TQMesh
TQ_SMALL	algorithm/utils.h	/^constexpr double TQ_SMALL              = 1.0E-13;$/;"	m	namespace:TQMesh
TXT	algorithm/MeshWriter.h	/^  TXT, $/;"	m	class:TQMesh::MeshExportType
T_	extern_libs/exprtk.h	/^            static inline void execute(T_ (&v)[1], const branch_t (&b)[1])$/;"	m	struct:exprtk::details::exprtk_final::evaluate_branches
T_	extern_libs/exprtk.h	/^            static inline void execute(T_ (&v)[2], const branch_t (&b)[2])$/;"	m	struct:exprtk::details::exprtk_final::evaluate_branches
T_	extern_libs/exprtk.h	/^            static inline void execute(T_ (&v)[3], const branch_t (&b)[3])$/;"	m	struct:exprtk::details::exprtk_final::evaluate_branches
T_	extern_libs/exprtk.h	/^            static inline void execute(T_ (&v)[4], const branch_t (&b)[4])$/;"	m	struct:exprtk::details::exprtk_final::evaluate_branches
T_	extern_libs/exprtk.h	/^            static inline void execute(T_ (&v)[5], const branch_t (&b)[5])$/;"	m	struct:exprtk::details::exprtk_final::evaluate_branches
T_	extern_libs/exprtk.h	/^            static inline void execute(T_ (&v)[BranchCount], const branch_t (&b)[BranchCount])$/;"	m	struct:exprtk::details::exprtk_final::evaluate_branches
TestBuilder	tests/TestBuilder.h	/^  TestBuilder(const std::string& testcase, $/;"	f	class:TQMesh::TestBuilder
TestBuilder	tests/TestBuilder.h	/^class TestBuilder$/;"	c	namespace:TQMesh
TestData	utils/Testing.h	/^  TestData(int line, const std::string& func, const std::string& file)$/;"	f	class:CppUtils::TestData
TestData	utils/Testing.h	/^class TestData$/;"	c	namespace:CppUtils
TestDataSingleton	utils/Testing.h	/^class TestDataSingleton$/;"	c	namespace:CppUtils
Timer	utils/Timer.h	/^class Timer$/;"	c	namespace:CppUtils
Torsion	algorithm/MeshGenerator.h	/^  Torsion,$/;"	m	class:TQMesh::SmoothingAlgorithm
TorsionSmoothing	algorithm/SmoothingStrategy.h	/^  TorsionSmoothing(Mesh& mesh, const Domain& domain) $/;"	f	class:TQMesh::TorsionSmoothing
TorsionSmoothing	algorithm/SmoothingStrategy.h	/^class TorsionSmoothing : public SmoothingStrategy$/;"	c	namespace:TQMesh
Tri2Quad	algorithm/MeshGenerator.h	/^  Tri2Quad,$/;"	m	class:TQMesh::ModificationAlgorithm
Tri2QuadModification	algorithm/ModificationStrategy.h	/^  Tri2QuadModification(Mesh& mesh, const Domain& domain)$/;"	f	class:TQMesh::Tri2QuadModification
Tri2QuadModification	algorithm/ModificationStrategy.h	/^class Tri2QuadModification : public ModificationStrategy$/;"	c	namespace:TQMesh
Triangle	algorithm/Triangle.h	/^  Triangle(Vertex& v1, Vertex& v2, Vertex& v3)$/;"	f	class:TQMesh::Triangle
Triangle	algorithm/Triangle.h	/^class Triangle : public Facet, public ContainerEntry<Triangle>$/;"	c	namespace:TQMesh
TriangleGeometry	algorithm/FacetGeometry.h	/^class TriangleGeometry $/;"	c	namespace:TQMesh
TriangleTests	tests/tests_Triangle.cpp	/^namespace TriangleTests $/;"	n	file:
Triangulation	algorithm/MeshGenerator.h	/^  Triangulation,$/;"	m	class:TQMesh::MeshingAlgorithm
Triangulation	algorithm/Triangulation.h	/^  Triangulation(Mesh& mesh, const Domain& domain)$/;"	f	class:TQMesh::Triangulation
Triangulation	algorithm/Triangulation.h	/^class Triangulation : public MeshingStrategy$/;"	c	namespace:TQMesh
Type	extern_libs/exprtk.h	/^         typedef const T& Type;$/;"	t	struct:exprtk::details::functor_t
Type	extern_libs/exprtk.h	/^         typedef typename details::functor_t<T>::Type    Type;$/;"	t	struct:exprtk::details::opr_base
Type	extern_libs/exprtk.h	/^         typedef typename details::functor_t<T>::Type Type;$/;"	t	struct:exprtk::details::sf_base
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type    Type;$/;"	t	struct:exprtk::details::add_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type    Type;$/;"	t	struct:exprtk::details::div_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type    Type;$/;"	t	struct:exprtk::details::mod_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type    Type;$/;"	t	struct:exprtk::details::mul_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type    Type;$/;"	t	struct:exprtk::details::pow_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type    Type;$/;"	t	struct:exprtk::details::sub_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::and_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::eq_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::equal_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::gt_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::gte_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::ilike_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::in_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::inrange_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::like_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::lt_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::lte_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::nand_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::ne_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::nor_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::or_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_add_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_avg_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_mand_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_max_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_min_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_mor_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_mul_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_multi_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::xnor_op
Type	extern_libs/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::xor_op
VAF	extern_libs/exprtk.h	/^      typedef ivararg_function<T>                         VAF;$/;"	t	class:exprtk::parser
VecND	utils/VecND.h	/^  VecND() {}$/;"	f	class:CppUtils::VecND
VecND	utils/VecND.h	/^  VecND(TT... tt) : entries_ { tt... } {}$/;"	f	class:CppUtils::VecND
VecND	utils/VecND.h	/^  VecND(const VecND<T,N>& v) : entries_ { v.entries_ } {}$/;"	f	class:CppUtils::VecND
VecND	utils/VecND.h	/^  VecND(const VecND<T,N>&& v) : entries_ { std::move(v.entries_) } {}$/;"	f	class:CppUtils::VecND
VecND	utils/VecND.h	/^  VecND(const std::array<T,N>& e) : entries_ {e} {}$/;"	f	class:CppUtils::VecND
VecND	utils/VecND.h	/^  VecND(std::array<T,N>&& e) : entries_ {std::move(e)} {}$/;"	f	class:CppUtils::VecND
VecND	utils/VecND.h	/^class VecND$/;"	c	namespace:CppUtils
Vertex	algorithm/Vertex.h	/^  Vertex(const Vec2d& c, double s=0.0, double r=0.0) $/;"	f	class:TQMesh::Vertex
Vertex	algorithm/Vertex.h	/^  Vertex(double x, double y, double s=0.0, double r=0.0) $/;"	f	class:TQMesh::Vertex
Vertex	algorithm/Vertex.h	/^class Vertex : public ContainerEntry<Vertex>$/;"	c	namespace:TQMesh
VertexProperty	algorithm/Vertex.h	/^enum class VertexProperty : uint8_t {$/;"	c	namespace:TQMesh
VertexTests	tests/tests_Vertex.cpp	/^namespace VertexTests $/;"	n	file:
VtkIOData	utils/VtkIO.h	/^  VtkIOData(const std::vector<T>& data, $/;"	f	class:CppUtils::VtkIOData
VtkIOData	utils/VtkIO.h	/^class VtkIOData : public VtkIODataInterface$/;"	c	namespace:CppUtils
VtkIODataInterface	utils/VtkIO.h	/^class VtkIODataInterface$/;"	c	namespace:CppUtils
VtkIOTypeTraits	utils/VtkIO.h	/^struct  VtkIOTypeTraits<double>$/;"	s	namespace:CppUtils
VtkIOTypeTraits	utils/VtkIO.h	/^struct  VtkIOTypeTraits<float>$/;"	s	namespace:CppUtils
VtkIOTypeTraits	utils/VtkIO.h	/^struct  VtkIOTypeTraits<int32_t>$/;"	s	namespace:CppUtils
VtkIOTypeTraits	utils/VtkIO.h	/^struct  VtkIOTypeTraits<int64_t>$/;"	s	namespace:CppUtils
VtkIOTypeTraits	utils/VtkIO.h	/^struct VtkIOTypeTraits$/;"	s	namespace:CppUtils
VtuWriter	utils/VtkIO.h	/^  VtuWriter(const std::vector<double>& points,$/;"	f	class:CppUtils::VtuWriter
VtuWriter	utils/VtkIO.h	/^class VtuWriter$/;"	c	namespace:CppUtils
WARNING	utils/Log.h	/^{ ERROR, WARNING, INFO, DEBUG };$/;"	e	enum:CppUtils::LogLevel
WHITE	utils/Log.h	/^  WHITE    = 37,$/;"	e	enum:CppUtils::LogColor
WIN32_LEAN_AND_MEAN	extern_libs/exprtk.h	38738;"	d
YELLOW	utils/Log.h	/^  YELLOW   = 33,$/;"	e	enum:CppUtils::LogColor
_180_pi	extern_libs/exprtk.h	/^            static const double _180_pi = 57.29577951308232087679815481410517033240547246656443;$/;"	m	namespace:exprtk::details::numeric::constant
_1_pi	extern_libs/exprtk.h	/^            static const double _1_pi   =  0.31830988618379067153776752674502872406891929148091;$/;"	m	namespace:exprtk::details::numeric::constant
_2_pi	extern_libs/exprtk.h	/^            static const double _2_pi   =  0.63661977236758134307553505349005744813783858296183;$/;"	m	namespace:exprtk::details::numeric::constant
_int64_t	extern_libs/exprtk.h	/^      typedef long long int          _int64_t;$/;"	t	namespace:exprtk::details
_uint64_t	extern_libs/exprtk.h	/^      typedef unsigned long long int _uint64_t;$/;"	t	namespace:exprtk::details
abs_impl	extern_libs/exprtk.h	/^            inline T abs_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
abs_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   abs_impl(const T v, int_type_tag) { return ((v >= T(0)) ? v : -v); }$/;"	f	namespace:exprtk::details::numeric::details
acos_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  acos_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
acos_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  acos_impl(const T v, real_type_tag) { return std::acos (v); }$/;"	f	namespace:exprtk::details::numeric::details
acosh_impl	extern_libs/exprtk.h	/^            template <typename T> inline T acosh_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
acosh_impl	extern_libs/exprtk.h	/^            template <typename T> inline T acosh_impl(const T v, real_type_tag) { return std::log(v + std::sqrt((v * v) - T(1))); }$/;"	f	namespace:exprtk::details::numeric::details
activate_side_effect	extern_libs/exprtk.h	/^         void activate_side_effect(const std::string&)$/;"	f	struct:exprtk::parser::parser_state
active	extern_libs/exprtk.h	/^         bool         active;$/;"	m	struct:exprtk::parser::scope_element
add	extern_libs/exprtk.h	/^         inline bool add(const std::string& symbol_name, RawType& t_, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store
add	extern_libs/exprtk.h	/^         inline bool add(const std::string& symbol_name, T (&v)[v_size], const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store
add	extern_libs/exprtk.h	/^         inline bool add(const std::string& symbol_name, T* v, const std::size_t v_size, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store
add	extern_libs/exprtk.h	/^         inline bool add(const std::string& symbol_name, exprtk::vector_view<T>& v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store
add	extern_libs/exprtk.h	/^         inline bool add(const std::string& symbol_name, std::deque<T,Allocator>& v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store
add	extern_libs/exprtk.h	/^         inline bool add(const std::string& symbol_name, std::vector<T,Allocator>& v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store
add	extern_libs/exprtk.h	/^      inline bool add(const function& f, const bool override = false)$/;"	f	class:exprtk::function_compositor
add	extern_libs/exprtk.h	/^      inline bool add(const std::string& name,$/;"	f	class:exprtk::function_compositor
add	utils/QuadTree.h	/^  bool add(T* item)$/;"	f	class:CppUtils::QuadTree
add_area	algorithm/Mesh.h	/^  void add_area(double a) { mesh_area_ += a; }$/;"	f	class:TQMesh::Mesh
add_assignment	extern_libs/exprtk.h	/^         inline void add_assignment(const std::string& symbol, const symbol_type st)$/;"	f	class:exprtk::parser::dependent_entity_collector
add_auxiliary_symtab	extern_libs/exprtk.h	/^      inline void add_auxiliary_symtab(symbol_table_t& symtab)$/;"	f	class:exprtk::function_compositor
add_boundary	algorithm/Domain.h	/^  Boundary& add_boundary( Args&&... args )$/;"	f	class:TQMesh::Domain
add_boundary_edge	algorithm/Mesh.h	/^  Edge& add_boundary_edge(Vertex& v1, Vertex& v2, int color)$/;"	f	class:TQMesh::Mesh
add_cell_data	utils/VtkIO.h	/^  void add_cell_data(const std::vector<T>& data, $/;"	f	class:CppUtils::VtuWriter
add_constant	extern_libs/exprtk.h	/^      inline bool add_constant(const std::string& constant_name, const T& value)$/;"	f	class:exprtk::symbol_table
add_constants	extern_libs/exprtk.h	/^      inline bool add_constants()$/;"	f	class:exprtk::symbol_table
add_edge	algorithm/Boundary.h	/^  Edge& add_edge(Vertex& v1, Vertex& v2, int color)$/;"	f	class:TQMesh::Boundary
add_edge	algorithm/EdgeList.h	/^  virtual Edge& add_edge(Vertex& v1, Vertex& v2, $/;"	f	class:TQMesh::EdgeList
add_edge	algorithm/Vertex.h	/^  void add_edge(Edge& e) { edges_.push_back(&e); }$/;"	f	class:TQMesh::Vertex
add_element	extern_libs/exprtk.h	/^         inline bool add_element(const scope_element& se)$/;"	f	class:exprtk::parser::scope_element_manager
add_epsilon	extern_libs/exprtk.h	/^      inline bool add_epsilon()$/;"	f	class:exprtk::symbol_table
add_exterior_boundary	algorithm/Domain.h	/^  Boundary& add_exterior_boundary()$/;"	f	class:TQMesh::Domain
add_facet	algorithm/Vertex.h	/^  void add_facet(Facet& t) { facets_.push_back(&t); }$/;"	f	class:TQMesh::Vertex
add_fixed_vertex	algorithm/Domain.h	/^  Vertex& add_fixed_vertex( Args&&... args )$/;"	f	class:TQMesh::Domain
add_function	extern_libs/exprtk.h	/^      inline bool add_function(const std::string& function_name, function_t& function)$/;"	f	class:exprtk::symbol_table
add_function	extern_libs/exprtk.h	/^      inline bool add_function(const std::string& function_name, generic_function_t& function)$/;"	f	class:exprtk::symbol_table
add_function	extern_libs/exprtk.h	/^      inline bool add_function(const std::string& vararg_function_name, vararg_function_t& vararg_function)$/;"	f	class:exprtk::symbol_table
add_impl	extern_libs/exprtk.h	/^         inline bool add_impl(const std::string& symbol_name, RType t, const bool is_const)$/;"	f	struct:exprtk::symbol_table::type_store
add_infinity	extern_libs/exprtk.h	/^      inline bool add_infinity()$/;"	f	class:exprtk::symbol_table
add_interior_boundary	algorithm/Domain.h	/^  Boundary& add_interior_boundary()$/;"	f	class:TQMesh::Domain
add_interior_edge	algorithm/Mesh.h	/^  Edge& add_interior_edge(Vertex& v1, Vertex& v2)$/;"	f	class:TQMesh::Mesh
add_invalid	extern_libs/exprtk.h	/^            void add_invalid(const lexer::token::token_type base, const lexer::token::token_type t)$/;"	f	class:exprtk::lexer::helper::sequence_validator
add_invalid	extern_libs/exprtk.h	/^            void add_invalid(const token_t t0, const token_t t1, const token_t t2)$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
add_invalid_set1	extern_libs/exprtk.h	/^            void add_invalid_set1(const lexer::token::token_type t)$/;"	f	class:exprtk::lexer::helper::sequence_validator
add_item_number	utils/QuadTree.h	/^  inline void add_item_number( int i ) $/;"	f	class:CppUtils::QuadTree
add_mesh_and_domain	algorithm/MeshBuilder.h	/^  void add_mesh_and_domain(Mesh& mesh, Domain& domain)$/;"	f	class:TQMesh::MeshBuilder
add_op	extern_libs/exprtk.h	/^      struct add_op : public opr_base<T>$/;"	s	namespace:exprtk::details
add_package	extern_libs/exprtk.h	/^      inline bool add_package(Package& package)$/;"	f	class:exprtk::symbol_table
add_pi	extern_libs/exprtk.h	/^      inline bool add_pi()$/;"	f	class:exprtk::symbol_table
add_point_data	utils/VtkIO.h	/^  void add_point_data(const std::vector<T>& data,$/;"	f	class:CppUtils::VtuWriter
add_property	algorithm/Edge.h	/^  void add_property(EdgeProperty p) { properties_ |= p; }$/;"	f	class:TQMesh::Edge
add_property	algorithm/Vertex.h	/^  void add_property(VertexProperty p) { properties_ |= p; }$/;"	f	class:TQMesh::Vertex
add_quad	algorithm/Mesh.h	/^  Quad& add_quad(Vertex& v1, Vertex& v2, Vertex& v3, Vertex& v4,$/;"	f	class:TQMesh::Mesh
add_quadlayer_edge	algorithm/QuadLayering.h	/^  void add_quadlayer_edge(Edge& e_cur)$/;"	f	class:TQMesh::QuadLayerVertices
add_remaining_front_edges_to_mesh	algorithm/MeshingStrategy.h	/^  void add_remaining_front_edges_to_mesh()$/;"	f	class:TQMesh::MeshingStrategy
add_remove	tests/tests_EdgeList.cpp	/^void add_remove()$/;"	f	namespace:EdgeListTests
add_replace	extern_libs/exprtk.h	/^            bool add_replace(const std::string& target_symbol,$/;"	f	class:exprtk::lexer::helper::symbol_replacer
add_reserved_function	extern_libs/exprtk.h	/^      inline bool add_reserved_function(const std::string& function_name, function_t& function)$/;"	f	class:exprtk::symbol_table
add_reserved_function	extern_libs/exprtk.h	/^      inline bool add_reserved_function(const std::string& function_name, generic_function_t& function)$/;"	f	class:exprtk::symbol_table
add_reserved_function	extern_libs/exprtk.h	/^      inline bool add_reserved_function(const std::string& vararg_function_name, vararg_function_t& vararg_function)$/;"	f	class:exprtk::symbol_table
add_row	utils/ParaReader.h	/^  void add_row()$/;"	f	class:CppUtils::Parameter
add_stringvar	extern_libs/exprtk.h	/^      inline bool add_stringvar(const std::string& stringvar_name, std::string& s, const bool is_constant = false)$/;"	f	class:exprtk::symbol_table
add_symbol	extern_libs/exprtk.h	/^         inline void add_symbol(const std::string& symbol, const symbol_type st)$/;"	f	class:exprtk::parser::dependent_entity_collector
add_triangle	algorithm/Mesh.h	/^  Triangle& add_triangle(Vertex& v1, Vertex& v2, Vertex& v3, $/;"	f	class:TQMesh::Mesh
add_variable	extern_libs/exprtk.h	/^      inline bool add_variable(const std::string& variable_name, T& t, const bool is_constant = false)$/;"	f	class:exprtk::symbol_table
add_vector	extern_libs/exprtk.h	/^      inline bool add_vector(const std::string& vector_name, T (&v)[N])$/;"	f	class:exprtk::symbol_table
add_vector	extern_libs/exprtk.h	/^      inline bool add_vector(const std::string& vector_name, T* v, const std::size_t& v_size)$/;"	f	class:exprtk::symbol_table
add_vector	extern_libs/exprtk.h	/^      inline bool add_vector(const std::string& vector_name, exprtk::vector_view<T>& v)$/;"	f	class:exprtk::symbol_table
add_vector	extern_libs/exprtk.h	/^      inline bool add_vector(const std::string& vector_name, std::vector<T,Allocator>& v)$/;"	f	class:exprtk::symbol_table
add_vertex	algorithm/Domain.h	/^  Vertex& add_vertex( Args&&... args )$/;"	f	class:TQMesh::Domain
add_vertex	algorithm/Mesh.h	/^  Vertex& add_vertex(const Vec2d& xy)$/;"	f	class:TQMesh::Mesh
adjust_logging_output_stream	tests/tests.cpp	/^void adjust_logging_output_stream(const std::string& file)$/;"	f
adjust_projected_vertex_coordinates	algorithm/QuadLayering.h	/^  void adjust_projected_vertex_coordinates(int i, int j)$/;"	f	class:TQMesh::QuadLayerVertices
adjust_xy	algorithm/Vertex.h	/^  void adjust_xy(const Vec2d& xy)$/;"	f	class:TQMesh::Vertex
advance_front	algorithm/FrontUpdate.h	/^  void advance_front(Edge& base, Vertex& v_new, Triangle& t_new)$/;"	f	class:TQMesh::FrontUpdate
advance_front_triangle	algorithm/Triangulation.h	/^  bool advance_front_triangle(Edge& base_edge, bool wide_search=false)$/;"	f	class:TQMesh::Triangulation
advance_token	extern_libs/exprtk.h	/^         inline void advance_token(const token_advance_mode mode)$/;"	f	class:exprtk::lexer::parser_helper
advancing_front_loop	algorithm/Triangulation.h	/^  bool advancing_front_loop(Edge* base_edge, int n_elements)$/;"	f	class:TQMesh::Triangulation
af	extern_libs/exprtk.h	/^      all_false  <T> af;$/;"	m	struct:exprtk::rtl::vecops::package
airfoil_from_csv	examples/06_airfoil_from_csv.cpp	/^bool airfoil_from_csv()$/;"	f
algorithm_	app/TQMeshApp.h	/^  std::string             algorithm_;$/;"	m	class:TQMesh::MeshConstruction
all_false	extern_libs/exprtk.h	/^      all_false()$/;"	f	class:exprtk::rtl::vecops::all_false
all_false	extern_libs/exprtk.h	/^   class all_false : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
all_nodes_valid	extern_libs/exprtk.h	/^      inline bool all_nodes_valid(const Sequence<expression_node<T>*,Allocator>& b)$/;"	f	namespace:exprtk::details
all_nodes_valid	extern_libs/exprtk.h	/^      inline bool all_nodes_valid(expression_node<T>* (&b)[N])$/;"	f	namespace:exprtk::details
all_nodes_variables	extern_libs/exprtk.h	/^      inline bool all_nodes_variables(Sequence<expression_node<T>*,Allocator>& b)$/;"	f	namespace:exprtk::details
all_nodes_variables	extern_libs/exprtk.h	/^      inline bool all_nodes_variables(expression_node<T>* (&b)[N])$/;"	f	namespace:exprtk::details
all_true	extern_libs/exprtk.h	/^      all_true()$/;"	f	class:exprtk::rtl::vecops::all_true
all_true	extern_libs/exprtk.h	/^   class all_true : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
allocate	extern_libs/exprtk.h	/^         inline expression_node<typename ResultNode::value_type>* allocate(OpType& operation, ExprNode (&branch)[1])$/;"	f	class:exprtk::details::node_allocator
allocate	extern_libs/exprtk.h	/^         inline expression_node<typename ResultNode::value_type>* allocate(OpType& operation, ExprNode (&branch)[2])$/;"	f	class:exprtk::details::node_allocator
allocate	extern_libs/exprtk.h	/^         inline expression_node<typename ResultNode::value_type>* allocate(OpType& operation, ExprNode (&branch)[3])$/;"	f	class:exprtk::details::node_allocator
allocate	extern_libs/exprtk.h	/^         inline expression_node<typename ResultNode::value_type>* allocate(OpType& operation, ExprNode (&branch)[4])$/;"	f	class:exprtk::details::node_allocator
allocate	extern_libs/exprtk.h	/^         inline expression_node<typename ResultNode::value_type>* allocate(OpType& operation, ExprNode (&branch)[5])$/;"	f	class:exprtk::details::node_allocator
allocate	extern_libs/exprtk.h	/^         inline expression_node<typename ResultNode::value_type>* allocate(OpType& operation, ExprNode (&branch)[6])$/;"	f	class:exprtk::details::node_allocator
allocate	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate() const$/;"	f	class:exprtk::details::node_allocator
allocate	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate(T1& t1) const$/;"	f	class:exprtk::details::node_allocator
allocate	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate(const Sequence<Type,Allocator>& seq) const$/;"	f	class:exprtk::details::node_allocator
allocate	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate(const T1& t1, const  T2&  t2,$/;"	f	class:exprtk::details::node_allocator
allocate	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate(const T1& t1, const T2& t2) const$/;"	f	class:exprtk::details::node_allocator
allocate	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate(const T1& t1, const T2& t2,$/;"	f	class:exprtk::details::node_allocator
allocate	extern_libs/exprtk.h	/^         static inline expression_node<T>* allocate(Allocator& allocator, T0 p0, T1 p1, T2 p2)$/;"	f	class:exprtk::details::exprtk_final
allocate	extern_libs/exprtk.h	/^         static inline expression_node<T>* allocate(Allocator& allocator, T0 p0, T1 p1, T2 p2, T3 p3)$/;"	f	class:exprtk::details::exprtk_final
allocate	extern_libs/exprtk.h	/^         static inline expression_node<T>* allocate(Allocator& allocator, T0 p0, T1 p1, T2 p2, T3 p3, qfunc_t p4)$/;"	f	class:exprtk::details::exprtk_final
allocate	extern_libs/exprtk.h	/^         static inline expression_node<T>* allocate(Allocator& allocator, T0 p0, T1 p1, T2 p2, bfunc_t p3, bfunc_t p4)$/;"	f	class:exprtk::details::exprtk_final
allocate	extern_libs/exprtk.h	/^         static inline expression_node<T>* allocate(Allocator& allocator, T0 p0, T1 p1, T2 p2, tfunc_t p3)$/;"	f	class:exprtk::details::exprtk_final
allocate	extern_libs/exprtk.h	/^         static inline expression_node<T>* allocate(Allocator& allocator,$/;"	f	class:exprtk::details::exprtk_final
allocate_c	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_c(const T1& t1) const$/;"	f	class:exprtk::details::node_allocator
allocate_cr	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_cr(const T1& t1, T2& t2) const$/;"	f	class:exprtk::details::node_allocator
allocate_rc	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_rc(T1& t1, const T2& t2) const$/;"	f	class:exprtk::details::node_allocator
allocate_rr	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_rr(T1& t1, T2& t2) const$/;"	f	class:exprtk::details::node_allocator
allocate_rrr	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_rrr(T1& t1, T2& t2, T3& t3) const$/;"	f	class:exprtk::details::node_allocator
allocate_rrrr	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_rrrr(T1& t1, T2& t2, T3& t3, T4& t4) const$/;"	f	class:exprtk::details::node_allocator
allocate_rrrrr	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_rrrrr(T1& t1, T2& t2, T3& t3, T4& t4, T5& t5) const$/;"	f	class:exprtk::details::node_allocator
allocate_tt	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_tt(T1 t1, T2 t2) const$/;"	f	class:exprtk::details::node_allocator
allocate_ttt	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_ttt(T1 t1, T2 t2, T3 t3) const$/;"	f	class:exprtk::details::node_allocator
allocate_tttt	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_tttt(T1 t1, T2 t2, T3 t3, T4 t4) const$/;"	f	class:exprtk::details::node_allocator
allocate_type	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_type(T1 t1, T2 t2, T3 t3) const$/;"	f	class:exprtk::details::node_allocator
allocate_type	extern_libs/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_type(T1 t1, T2 t2,$/;"	f	class:exprtk::details::node_allocator
allow_zero_parameters	extern_libs/exprtk.h	/^      inline bool& allow_zero_parameters()$/;"	f	class:exprtk::function_traits
allow_zero_parameters_	extern_libs/exprtk.h	/^      bool allow_zero_parameters_;$/;"	m	class:exprtk::function_traits
alternative_	extern_libs/exprtk.h	/^         branch_t alternative_;$/;"	m	class:exprtk::details::exprtk_final
alternative_	extern_libs/exprtk.h	/^         expression_ptr alternative_;$/;"	m	class:exprtk::details::exprtk_final
alternative_node_ptr_	extern_libs/exprtk.h	/^         vector_node_ptr   alternative_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
and_impl	extern_libs/exprtk.h	/^            inline T and_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
and_impl	extern_libs/exprtk.h	/^            inline T and_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
and_op	extern_libs/exprtk.h	/^      struct and_op : public opr_base<T>$/;"	s	namespace:exprtk::details
and_opr	extern_libs/exprtk.h	/^         inline T and_opr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
angle	algorithm/Quad.h	/^  double        angle(unsigned int i) const { return angles_[i]; }$/;"	f	class:TQMesh::Quad
angle	algorithm/Triangle.h	/^  double        angle(unsigned int i) const { return angles_[i]; }$/;"	f	class:TQMesh::Triangle
angle	utils/VecND.h	/^  T angle(const VecND<T,N>& v) const $/;"	f	class:CppUtils::VecND
angle	utils/VecND.h	/^inline T angle(const VecND<T,N>& a, const VecND<T,N>& b)$/;"	f	namespace:CppUtils
angle_factor	algorithm/QuadLayering.h	/^  QuadLayering& angle_factor(double a) $/;"	f	class:TQMesh::QuadLayering
angle_factor	algorithm/QuadLayering.h	/^  double angle_factor() const { return angle_factor_; }$/;"	f	class:TQMesh::QuadLayering
angle_factor	algorithm/SmoothingStrategy.h	/^  MixedSmoothing& angle_factor(double a) $/;"	f	class:TQMesh::MixedSmoothing
angle_factor	algorithm/SmoothingStrategy.h	/^  TorsionSmoothing& angle_factor(double a) $/;"	f	class:TQMesh::TorsionSmoothing
angle_factor	algorithm/SmoothingStrategy.h	/^  double angle_factor() const { return angle_factor_; }$/;"	f	class:TQMesh::MixedSmoothing
angle_factor	algorithm/SmoothingStrategy.h	/^  double angle_factor() const { return angle_factor_; }$/;"	f	class:TQMesh::TorsionSmoothing
angle_factor_	algorithm/QuadLayering.h	/^  double angle_factor_ = 1.0;$/;"	m	class:TQMesh::QuadLayering
angle_factor_	algorithm/SmoothingStrategy.h	/^  double             angle_factor_         = 0.5;$/;"	m	class:TQMesh::SmoothingStrategy
any_false	extern_libs/exprtk.h	/^      any_false()$/;"	f	class:exprtk::rtl::vecops::any_false
any_false	extern_libs/exprtk.h	/^   class any_false : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
any_true	extern_libs/exprtk.h	/^      any_true()$/;"	f	class:exprtk::rtl::vecops::any_true
any_true	extern_libs/exprtk.h	/^   class any_true : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
area	algorithm/Domain.h	/^  double area() const$/;"	f	class:TQMesh::Domain
area	algorithm/EdgeList.h	/^  double area() const { return area_; }$/;"	f	class:TQMesh::EdgeList
area	algorithm/Mesh.h	/^  double area()             const { return mesh_area_; }$/;"	f	class:TQMesh::Mesh
arg_list_	extern_libs/exprtk.h	/^         std::vector<branch_t> arg_list_;$/;"	m	class:exprtk::details::exprtk_final
arg_list_	extern_libs/exprtk.h	/^         std::vector<branch_t> arg_list_;$/;"	m	class:exprtk::details::switch_node
arg_list_	extern_libs/exprtk.h	/^         std::vector<const T*> arg_list_;$/;"	m	class:exprtk::details::exprtk_final
arg_list_	extern_libs/exprtk.h	/^         std::vector<expression_ptr> arg_list_;$/;"	m	class:exprtk::details::exprtk_final
arg_list_	extern_libs/exprtk.h	/^         std::vector<expression_ptr> arg_list_;$/;"	m	class:exprtk::details::generic_function_node
arg_list_t	extern_libs/exprtk.h	/^            typedef std::vector<std::pair<expression_node_ptr,bool> > arg_list_t;$/;"	t	struct:exprtk::parser::expression_generator::switch_nodes
argsort	utils/MathUtility.h	/^std::vector<size_t> argsort(const std::vector<T> &v)$/;"	f	namespace:CppUtils
arith_opr_to_string	extern_libs/exprtk.h	/^         std::string arith_opr_to_string(details::operator_type opr) const$/;"	f	class:exprtk::parser::settings_store
arithmetic_disabled	extern_libs/exprtk.h	/^         bool arithmetic_disabled(const details::operator_type arithmetic_operation) const$/;"	f	class:exprtk::parser::settings_store
arithmetic_enabled	extern_libs/exprtk.h	/^         bool arithmetic_enabled(const details::operator_type& arithmetic_operation) const$/;"	f	class:exprtk::parser::settings_store
arithmetic_ops_list	extern_libs/exprtk.h	/^      static const std::string arithmetic_ops_list[] =$/;"	m	namespace:exprtk::details
arithmetic_ops_list_size	extern_libs/exprtk.h	/^      static const std::size_t arithmetic_ops_list_size = sizeof(arithmetic_ops_list) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
array_vector_impl	extern_libs/exprtk.h	/^            array_vector_impl(const Type* vec, const std::size_t& vec_size)$/;"	f	class:exprtk::details::vector_holder::array_vector_impl
array_vector_impl	extern_libs/exprtk.h	/^         class array_vector_impl : public vector_holder_base$/;"	c	class:exprtk::details::vector_holder
as_string	extern_libs/exprtk.h	/^         inline std::string as_string() const$/;"	f	class:exprtk::details::build_string
asin_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  asin_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
asin_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  asin_impl(const T v, real_type_tag) { return std::asin (v); }$/;"	f	namespace:exprtk::details::numeric::details
asinh_impl	extern_libs/exprtk.h	/^            template <typename T> inline T asinh_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
asinh_impl	extern_libs/exprtk.h	/^            template <typename T> inline T asinh_impl(const T v, real_type_tag) { return std::log(v + std::sqrt((v * v) + T(1))); }$/;"	f	namespace:exprtk::details::numeric::details
asn_addassignment	extern_libs/exprtk.h	/^      struct asn_addassignment$/;"	s	namespace:exprtk::details
asn_assignment	extern_libs/exprtk.h	/^      struct asn_assignment$/;"	s	namespace:exprtk::details
assign	extern_libs/exprtk.h	/^         static inline void assign(RefType t1, Type t2) { t1 *= t2; }$/;"	f	struct:exprtk::details::mul_op
assign	extern_libs/exprtk.h	/^         static inline void assign(RefType t1, Type t2) { t1 += t2; }$/;"	f	struct:exprtk::details::add_op
assign	extern_libs/exprtk.h	/^         static inline void assign(RefType t1, Type t2) { t1 -= t2; }$/;"	f	struct:exprtk::details::sub_op
assign	extern_libs/exprtk.h	/^         static inline void assign(RefType t1, Type t2) { t1 = numeric::modulus<T>(t1,t2); }$/;"	f	struct:exprtk::details::mod_op
assign	extern_libs/exprtk.h	/^         static inline void assign(RefType t1, Type t2) { t1 = numeric::pow<T>(t1,t2); }$/;"	f	struct:exprtk::details::pow_op
assign	extern_libs/exprtk.h	/^         static inline void assign(RefType t1, Type t2) { t1 \/= t2; }$/;"	f	struct:exprtk::details::div_op
assign	extern_libs/exprtk.h	/^      inline void assign(const parameter_list_t& pl)$/;"	f	class:exprtk::results_context
assign	extern_libs/exprtk.h	37902;"	d
assign_mesh_indices	algorithm/MeshCleanup.h	/^  static inline void assign_mesh_indices(Mesh& mesh)$/;"	f	class:TQMesh::MeshCleanup
assign_opr_to_string	extern_libs/exprtk.h	/^         std::string assign_opr_to_string(details::operator_type opr) const$/;"	f	class:exprtk::parser::settings_store
assign_size_function_to_vertices	algorithm/MeshCleanup.h	/^  static inline void assign_size_function_to_vertices(Mesh& mesh,$/;"	f	class:TQMesh::MeshCleanup
assignment_disabled	extern_libs/exprtk.h	/^         bool assignment_disabled(const details::operator_type assignment_operation) const$/;"	f	class:exprtk::parser::settings_store
assignment_enabled	extern_libs/exprtk.h	/^         bool assignment_enabled(const details::operator_type& assignment) const$/;"	f	class:exprtk::parser::settings_store
assignment_name_list_	extern_libs/exprtk.h	/^         symbol_list_t assignment_name_list_;$/;"	m	class:exprtk::parser::dependent_entity_collector
assignment_node	extern_libs/exprtk.h	/^         assignment_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_node_t	extern_libs/exprtk.h	/^      typedef details::assignment_node<T>                 assignment_node_t;$/;"	t	class:exprtk::parser
assignment_op_node	extern_libs/exprtk.h	/^         assignment_op_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_ops_list	extern_libs/exprtk.h	/^      static const std::string assignment_ops_list[] =$/;"	m	namespace:exprtk::details
assignment_ops_list_size	extern_libs/exprtk.h	/^      static const std::size_t assignment_ops_list_size = sizeof(assignment_ops_list) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
assignment_rebasevec_celem_node	extern_libs/exprtk.h	/^         assignment_rebasevec_celem_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_rebasevec_celem_node_t	extern_libs/exprtk.h	/^      typedef details::assignment_rebasevec_celem_node<T> assignment_rebasevec_celem_node_t;$/;"	t	class:exprtk::parser
assignment_rebasevec_celem_op_node	extern_libs/exprtk.h	/^         assignment_rebasevec_celem_op_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_rebasevec_elem_node	extern_libs/exprtk.h	/^         assignment_rebasevec_elem_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_rebasevec_elem_node_t	extern_libs/exprtk.h	/^      typedef details::assignment_rebasevec_elem_node<T>  assignment_rebasevec_elem_node_t;$/;"	t	class:exprtk::parser
assignment_rebasevec_elem_op_node	extern_libs/exprtk.h	/^         assignment_rebasevec_elem_op_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_string_node	extern_libs/exprtk.h	/^         assignment_string_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_string_node_t	extern_libs/exprtk.h	/^      typedef details::assignment_string_node<T>          assignment_string_node_t;$/;"	t	class:exprtk::parser
assignment_string_range_node	extern_libs/exprtk.h	/^         assignment_string_range_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_string_range_node_t	extern_libs/exprtk.h	/^      typedef details::assignment_string_range_node<T>    assignment_string_range_node_t;$/;"	t	class:exprtk::parser
assignment_symbols	extern_libs/exprtk.h	/^         inline std::size_t assignment_symbols(Sequence<symbol_t,Allocator>& assignment_list)$/;"	f	class:exprtk::parser::dependent_entity_collector
assignment_vec_elem_node	extern_libs/exprtk.h	/^         assignment_vec_elem_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_vec_elem_node_t	extern_libs/exprtk.h	/^      typedef details::assignment_vec_elem_node<T>        assignment_vec_elem_node_t;$/;"	t	class:exprtk::parser
assignment_vec_elem_op_node	extern_libs/exprtk.h	/^         assignment_vec_elem_op_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_vec_node	extern_libs/exprtk.h	/^         assignment_vec_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_vec_node_t	extern_libs/exprtk.h	/^      typedef details::assignment_vec_node<T>             assignment_vec_node_t;$/;"	t	class:exprtk::parser
assignment_vec_op_node	extern_libs/exprtk.h	/^         assignment_vec_op_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_vecvec_node	extern_libs/exprtk.h	/^         assignment_vecvec_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_vecvec_node_t	extern_libs/exprtk.h	/^      typedef details::assignment_vecvec_node<T>          assignment_vecvec_node_t;$/;"	t	class:exprtk::parser
assignment_vecvec_op_node	extern_libs/exprtk.h	/^         assignment_vecvec_op_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
at	extern_libs/exprtk.h	/^      all_true   <T> at;$/;"	m	struct:exprtk::rtl::vecops::package
atan2	extern_libs/exprtk.h	/^         inline T atan2(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
atan2_impl	extern_libs/exprtk.h	/^            inline T atan2_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
atan2_impl	extern_libs/exprtk.h	/^            inline T atan2_impl(const T, const T, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
atan_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  atan_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
atan_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  atan_impl(const T v, real_type_tag) { return std::atan (v); }$/;"	f	namespace:exprtk::details::numeric::details
atanh_impl	extern_libs/exprtk.h	/^            template <typename T> inline T atanh_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
atanh_impl	extern_libs/exprtk.h	/^            template <typename T> inline T atanh_impl(const T v, real_type_tag) { return (std::log(T(1) + v) - std::log(T(1) - v)) \/ T(2); }$/;"	f	namespace:exprtk::details::numeric::details
auxiliary_symtab_list_	extern_libs/exprtk.h	/^      std::vector<symbol_table_t*> auxiliary_symtab_list_;$/;"	m	class:exprtk::function_compositor
axn	extern_libs/exprtk.h	/^      inline T axn(const T a, const T x)$/;"	f	namespace:exprtk::details
axnb	extern_libs/exprtk.h	/^      inline T axnb(const T a, const T x, const T b)$/;"	f	namespace:exprtk::details
axpby	extern_libs/exprtk.h	/^      axpby()$/;"	f	class:exprtk::rtl::vecops::axpby
axpby	extern_libs/exprtk.h	/^   class axpby : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
axpbyz	extern_libs/exprtk.h	/^      axpbyz()$/;"	f	class:exprtk::rtl::vecops::axpbyz
axpbyz	extern_libs/exprtk.h	/^   class axpbyz : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
axpbz	extern_libs/exprtk.h	/^      axpbz()$/;"	f	class:exprtk::rtl::vecops::axpbz
axpbz	extern_libs/exprtk.h	/^   class axpbz : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
axpy	extern_libs/exprtk.h	/^      axpy()$/;"	f	class:exprtk::rtl::vecops::axpy
axpy	extern_libs/exprtk.h	/^   class axpy : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
axpyz	extern_libs/exprtk.h	/^      axpyz()$/;"	f	class:exprtk::rtl::vecops::axpyz
axpyz	extern_libs/exprtk.h	/^   class axpyz : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
b	extern_libs/exprtk.h	/^                                        expression_node<T>* b,$/;"	m	namespace:exprtk::details
b	extern_libs/exprtk.h	/^         bool& b;$/;"	m	struct:exprtk::parser::scoped_bool_negator
b	extern_libs/exprtk.h	/^         bool& b;$/;"	m	struct:exprtk::parser::scoped_bool_or_restorer
b0	extern_libs/exprtk.h	/^                                expression_node<T>* b0,$/;"	m	namespace:exprtk::details
b1	extern_libs/exprtk.h	/^                                expression_node<T>* b1 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b1_axpby	extern_libs/exprtk.h	/^      axpby      <T> b1_axpby;$/;"	m	struct:exprtk::rtl::vecops::package
b1_axpbyz	extern_libs/exprtk.h	/^      axpbyz     <T> b1_axpbyz;$/;"	m	struct:exprtk::rtl::vecops::package
b1_axpbz	extern_libs/exprtk.h	/^      axpbz      <T> b1_axpbz;$/;"	m	struct:exprtk::rtl::vecops::package
b1_axpy	extern_libs/exprtk.h	/^      axpy       <T> b1_axpy;$/;"	m	struct:exprtk::rtl::vecops::package
b1_axpyz	extern_libs/exprtk.h	/^      axpyz      <T> b1_axpyz;$/;"	m	struct:exprtk::rtl::vecops::package
b2	extern_libs/exprtk.h	/^                                expression_node<T>* b2 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b3	extern_libs/exprtk.h	/^                                expression_node<T>* b3 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b4	extern_libs/exprtk.h	/^                                expression_node<T>* b4 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b5	extern_libs/exprtk.h	/^                                expression_node<T>* b5 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b6	extern_libs/exprtk.h	/^                                expression_node<T>* b6 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b7	extern_libs/exprtk.h	/^                                expression_node<T>* b7 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b8	extern_libs/exprtk.h	/^                                expression_node<T>* b8 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b9	extern_libs/exprtk.h	/^                                expression_node<T>* b9 = reinterpret_cast<expression_node<T>*>(0))$/;"	m	namespace:exprtk::details
back	extern_libs/exprtk.h	/^         inline const type_store& back() const$/;"	f	class:exprtk::type_store::parameter_list
back	extern_libs/exprtk.h	/^         inline type_store& back()$/;"	f	class:exprtk::type_store::parameter_list
back	extern_libs/exprtk.h	/^      inline const char_t& back(const std::string& s)$/;"	f	namespace:exprtk::details
back	utils/Container.h	/^  T& back() $/;"	f	class:CppUtils::Container
back	utils/Container.h	/^  const T& back() const $/;"	f	class:CppUtils::Container
bad_csv_import	tests/tests_Mesh.cpp	/^void bad_csv_import()$/;"	f	namespace:MeshTests
base	algorithm/Front.h	/^  Edge& base() { return *base_; }$/;"	f	class:TQMesh::Front
base	algorithm/Front.h	/^  const Edge& base() const { return *base_; }$/;"	f	class:TQMesh::Front
base	algorithm/Front.h	/^  void base(Edge& b) { base_ = &b; }$/;"	f	class:TQMesh::Front
base	extern_libs/exprtk.h	/^         char_cptr base() const$/;"	f	class:exprtk::details::exprtk_final
base_	algorithm/Front.h	/^  Edge*   base_ = nullptr;$/;"	m	class:TQMesh::Front
base_edges	algorithm/QuadLayering.h	/^  EdgeVector& base_edges() { return base_edges_; }$/;"	f	class:TQMesh::QuadLayerVertices
base_edges	algorithm/QuadLayering.h	/^  const EdgeVector& base_edges() const { return base_edges_; }$/;"	f	class:TQMesh::QuadLayerVertices
base_func	extern_libs/exprtk.h	/^         base_func(const std::size_t& pc = 0)$/;"	f	struct:exprtk::function_compositor::base_func
base_func	extern_libs/exprtk.h	/^      struct base_func : public exprtk::ifunction<T>$/;"	s	class:exprtk::function_compositor
base_function_list	extern_libs/exprtk.h	/^      static const std::string base_function_list[] =$/;"	m	namespace:exprtk::details
base_function_list_size	extern_libs/exprtk.h	/^      static const std::size_t base_function_list_size = sizeof(base_function_list) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
base_itr_	extern_libs/exprtk.h	/^         details::char_cptr base_itr_;$/;"	m	class:exprtk::lexer::generator
base_operation_t	extern_libs/exprtk.h	/^         base_operation_t(const operator_type t, const unsigned int& np)$/;"	f	struct:exprtk::details::base_operation_t
base_operation_t	extern_libs/exprtk.h	/^      struct base_operation_t$/;"	s	namespace:exprtk::details
base_opr_case	extern_libs/exprtk.h	22682;"	d
base_opr_case	extern_libs/exprtk.h	22694;"	d
base_ops_map_	extern_libs/exprtk.h	/^      base_ops_map_t base_ops_map_;$/;"	m	class:exprtk::parser
base_ops_map_t	extern_libs/exprtk.h	/^      typedef std::multimap<std::string,details::base_operation_t,details::ilesscompare> base_ops_map_t;$/;"	t	class:exprtk::parser
base_range_	extern_libs/exprtk.h	/^         mutable range_t     base_range_;$/;"	m	class:exprtk::details::exprtk_final
base_vertex_factor	algorithm/Triangulation.h	/^  Triangulation& base_vertex_factor(double v) $/;"	f	class:TQMesh::Triangulation
base_vertex_factor	algorithm/Triangulation.h	/^  double base_vertex_factor() const { return base_vertex_factor_; }$/;"	f	class:TQMesh::Triangulation
base_vertex_factor_	algorithm/Triangulation.h	/^  double base_vertex_factor_ = 1.5;$/;"	m	class:TQMesh::Triangulation
basic_opr_switch_statements	extern_libs/exprtk.h	30066;"	d
basic_opr_switch_statements	extern_libs/exprtk.h	35973;"	d
batch_eqineq_logic_case	extern_libs/exprtk.h	29823;"	d
batch_eqineq_logic_case	extern_libs/exprtk.h	29883;"	d
batch_size	extern_libs/exprtk.h	/^            unsigned int batch_size;$/;"	m	struct:exprtk::details::loop_unroll::details
bbox_max	utils/Geometry.h	/^static inline Vec2<T> bbox_max(const Vec2<T>& a, const Vec2<T>& b)$/;"	f	namespace:CppUtils
bbox_min	utils/Geometry.h	/^static inline Vec2<T> bbox_min(const Vec2<T>& a, const Vec2<T>& b)$/;"	f	namespace:CppUtils
begin	algorithm/Domain.h	/^  const_iterator begin() const { return boundaries_.begin(); }$/;"	f	class:TQMesh::Domain
begin	algorithm/Domain.h	/^  iterator begin() { return boundaries_.begin(); }$/;"	f	class:TQMesh::Domain
begin	algorithm/EdgeList.h	/^  const_iterator begin() const { return edges_.begin(); }$/;"	f	class:TQMesh::EdgeList
begin	algorithm/EdgeList.h	/^  iterator begin() { return edges_.begin(); }$/;"	f	class:TQMesh::EdgeList
begin	extern_libs/exprtk.h	/^         inline       value_t* begin()       { return data_; }$/;"	f	struct:exprtk::type_store::type_view
begin	extern_libs/exprtk.h	/^         inline const value_t* begin() const { return data_; }$/;"	f	struct:exprtk::type_store::type_view
begin	extern_libs/exprtk.h	/^         inline void begin()$/;"	f	class:exprtk::lexer::generator
begin	utils/Container.h	/^  const_iterator begin() const { return items_.begin(); }$/;"	f	class:CppUtils::Container
begin	utils/Container.h	/^  iterator begin() { return items_.begin(); }$/;"	f	class:CppUtils::Container
begin	utils/VecND.h	/^  const_iterator begin() const { return entries_.begin(); }$/;"	f	class:CppUtils::VecND
begin	utils/VecND.h	/^  iterator begin() { return entries_.begin(); }$/;"	f	class:CppUtils::VecND
bft_	extern_libs/exprtk.h	/^         BaseFuncType& bft_;$/;"	m	struct:exprtk::function_compositor::scoped_bft
bfunc_t	extern_libs/exprtk.h	/^         typedef T (*bfunc_t)(Type t0, Type t1);$/;"	t	struct:exprtk::details::functor_t
bfunc_t	extern_libs/exprtk.h	/^         typedef typename functor_t::bfunc_t    bfunc_t;$/;"	t	class:exprtk::details::exprtk_final
bfunc_t	extern_libs/exprtk.h	/^         typedef typename functor_t::bfunc_t    bfunc_t;$/;"	t	struct:exprtk::details::T0oT1oT20T3process
bfunc_t	extern_libs/exprtk.h	/^         typedef typename functor_t::bfunc_t    bfunc_t;$/;"	t	struct:exprtk::details::T0oT1oT2process
binary_ext_node	extern_libs/exprtk.h	/^         binary_ext_node(expression_ptr branch0, expression_ptr branch1)$/;"	f	class:exprtk::details::exprtk_final
binary_functor_t	extern_libs/exprtk.h	/^         typedef typename functor_t::bfunc_t    binary_functor_t;$/;"	t	struct:exprtk::details::opr_base
binary_functor_t	extern_libs/exprtk.h	/^         typedef typename functor_t::bfunc_t binary_functor_t;$/;"	t	struct:exprtk::details::sf_base
binary_functor_t	extern_libs/exprtk.h	/^      typedef typename functor_t::bfunc_t    binary_functor_t;$/;"	t	class:exprtk::parser
binary_node	extern_libs/exprtk.h	/^         binary_node(const operator_type& opr,$/;"	f	class:exprtk::details::binary_node
binary_node	extern_libs/exprtk.h	/^      class binary_node : public expression_node<T>$/;"	c	namespace:exprtk::details
binary_node_t	extern_libs/exprtk.h	/^      typedef details::binary_node<T>                     binary_node_t;$/;"	t	class:exprtk::parser
binary_op_map_	extern_libs/exprtk.h	/^         binary_op_map_t*         binary_op_map_;$/;"	m	class:exprtk::parser::expression_generator
binary_op_map_	extern_libs/exprtk.h	/^      binary_op_map_t binary_op_map_;$/;"	m	class:exprtk::parser
binary_op_map_t	extern_libs/exprtk.h	/^      typedef std::map<operator_t, binary_functor_t > binary_op_map_t;$/;"	t	class:exprtk::parser
binext_optimisable	extern_libs/exprtk.h	/^         inline bool binext_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
bipow_node	extern_libs/exprtk.h	/^         explicit bipow_node(expression_ptr branch)$/;"	f	class:exprtk::details::exprtk_final
bipowninv_node	extern_libs/exprtk.h	/^         explicit bipowninv_node(expression_ptr branch)$/;"	f	class:exprtk::details::exprtk_final
block_end	utils/ParaReader.h	/^  size_t block_end() const { return block_end_; }$/;"	f	class:CppUtils::ParameterBase
block_end	utils/ParaReader.h	/^  void block_end(size_t i) { block_end_ = i; }$/;"	f	class:CppUtils::ParameterBase
block_end_	utils/ParaReader.h	/^  size_t   block_end_;$/;"	m	class:CppUtils::ParameterBase
block_index	utils/ParaReader.h	/^  int block_index() const { return block_index_; }$/;"	f	class:CppUtils::ParameterBase
block_index	utils/ParaReader.h	/^  void block_index(int l) { block_index_ = l; }$/;"	f	class:CppUtils::ParameterBase
block_start	utils/ParaReader.h	/^  size_t block_start() const { return block_start_; }$/;"	f	class:CppUtils::ParameterBase
block_start	utils/ParaReader.h	/^  void block_start(size_t i) { block_start_ = i; }$/;"	f	class:CppUtils::ParameterBase
block_start_	utils/ParaReader.h	/^  size_t   block_start_;$/;"	m	class:CppUtils::ParameterBase
boc_base_node	extern_libs/exprtk.h	/^      class boc_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
boc_node	extern_libs/exprtk.h	/^         explicit boc_node(const expression_ptr branch, const T const_var)$/;"	f	class:exprtk::details::exprtk_final
boc_optimisable	extern_libs/exprtk.h	/^         inline bool boc_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
body_	extern_libs/exprtk.h	/^         branch_t                      body_;$/;"	m	class:exprtk::details::exprtk_final
bound_length	extern_libs/exprtk.h	/^         struct numeric_info { enum { length = 0, size = 32, bound_length = 0, min_exp = 0, max_exp = 0 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon1
bound_length	extern_libs/exprtk.h	/^         template <> struct numeric_info<int        > { enum { length = 10, size = 16, bound_length = 9 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon2
boundaries_	algorithm/Domain.h	/^  Vector           boundaries_;$/;"	m	class:TQMesh::Domain
boundary_edges	algorithm/Mesh.h	/^  EdgeList& boundary_edges() { return bdry_edges_; }$/;"	f	class:TQMesh::Mesh
boundary_edges	algorithm/Mesh.h	/^  const EdgeList& boundary_edges() const { return bdry_edges_; }$/;"	f	class:TQMesh::Mesh
boundary_shapes	examples/03_boundary_shapes.cpp	/^bool boundary_shapes()$/;"	f
bov_base_node	extern_libs/exprtk.h	/^      class bov_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
bov_node	extern_libs/exprtk.h	/^         explicit bov_node(const expression_ptr branch, const T& var)$/;"	f	class:exprtk::details::exprtk_final
bov_optimisable	extern_libs/exprtk.h	/^         inline bool bov_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
bracket_check_enabled	extern_libs/exprtk.h	/^         bool bracket_check_enabled      () const { return enable_bracket_check_;      }$/;"	f	class:exprtk::parser::settings_store
bracket_checker	extern_libs/exprtk.h	/^            bracket_checker()$/;"	f	class:exprtk::lexer::helper::bracket_checker
bracket_checker	extern_libs/exprtk.h	/^         class bracket_checker : public lexer::token_scanner$/;"	c	namespace:exprtk::lexer::helper
bracket_checker_	extern_libs/exprtk.h	/^      lexer::helper::bracket_checker            bracket_checker_;$/;"	m	class:exprtk::parser
branch	extern_libs/exprtk.h	/^         inline virtual expression_node<T>* branch(const std::size_t& index = 0) const$/;"	f	class:exprtk::details::expression_node
branch_	extern_libs/exprtk.h	/^         branch_t            branch_;$/;"	m	class:exprtk::details::exprtk_final
branch_	extern_libs/exprtk.h	/^         branch_t           branch_;$/;"	m	class:exprtk::details::exprtk_final
branch_	extern_libs/exprtk.h	/^         branch_t    branch_[N];$/;"	m	class:exprtk::details::exprtk_final
branch_	extern_libs/exprtk.h	/^         branch_t branch_;$/;"	m	class:exprtk::details::exprtk_final
branch_	extern_libs/exprtk.h	/^         branch_t branch_;$/;"	m	class:exprtk::details::unary_node
branch_	extern_libs/exprtk.h	/^         branch_t branch_[2];$/;"	m	class:exprtk::details::binary_node
branch_	extern_libs/exprtk.h	/^         branch_t branch_[2];$/;"	m	class:exprtk::details::exprtk_final
branch_	extern_libs/exprtk.h	/^         branch_t branch_[3];$/;"	m	class:exprtk::details::trinary_node
branch_	extern_libs/exprtk.h	/^         branch_t branch_[4];$/;"	m	class:exprtk::details::quaternary_node
branch_	extern_libs/exprtk.h	/^         std::vector<branch_t>         branch_;$/;"	m	class:exprtk::details::generic_function_node
branch_deletable	extern_libs/exprtk.h	/^      inline bool branch_deletable(expression_node<T>* node)$/;"	f	namespace:exprtk::details
branch_t	extern_libs/exprtk.h	/^         typedef std::pair<expression_ptr, bool> branch_t;$/;"	t	class:exprtk::details::exprtk_final
branch_t	extern_libs/exprtk.h	/^         typedef std::pair<expression_ptr,bool>  branch_t;$/;"	t	class:exprtk::details::exprtk_final
branch_t	extern_libs/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::binary_node
branch_t	extern_libs/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::exprtk_final
branch_t	extern_libs/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::for_loop_node
branch_t	extern_libs/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::generic_function_node
branch_t	extern_libs/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::quaternary_node
branch_t	extern_libs/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::repeat_until_loop_node
branch_t	extern_libs/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::switch_node
branch_t	extern_libs/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::trinary_node
branch_t	extern_libs/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::unary_node
branch_t	extern_libs/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::while_loop_node
branch_to_id	extern_libs/exprtk.h	/^         inline std::string branch_to_id(expression_node_ptr branch) const$/;"	f	class:exprtk::parser::expression_generator
break_exception	extern_libs/exprtk.h	/^         explicit break_exception(const T& v)$/;"	f	class:exprtk::details::break_exception
break_exception	extern_libs/exprtk.h	/^      class break_exception$/;"	c	namespace:exprtk::details
break_node	extern_libs/exprtk.h	/^         break_node(expression_ptr ret = expression_ptr(0))$/;"	f	class:exprtk::details::exprtk_final
brkcnt_list_	extern_libs/exprtk.h	/^      std::deque<bool> brkcnt_list_;$/;"	m	class:exprtk::parser
btype_	algorithm/Boundary.h	/^  BdryType  btype_;$/;"	m	class:TQMesh::Boundary
buffer	extern_libs/exprtk.h	/^         uchar_t buffer[64];$/;"	m	class:exprtk::details::vector_holder
build_string	extern_libs/exprtk.h	/^         build_string(const std::size_t& initial_size = 64)$/;"	f	class:exprtk::details::build_string
build_string	extern_libs/exprtk.h	/^      class build_string$/;"	c	namespace:exprtk::details
c	extern_libs/exprtk.h	/^      close  <T> c;$/;"	m	struct:exprtk::rtl::io::file::package
c	extern_libs/exprtk.h	/^      count      <T>  c;$/;"	m	struct:exprtk::rtl::vecops::package
c_	extern_libs/exprtk.h	/^         const T  c_;$/;"	m	class:exprtk::details::exprtk_final
cache	extern_libs/exprtk.h	/^         mutable cached_range_t             cache;$/;"	m	struct:exprtk::details::range_pack
cache_size	extern_libs/exprtk.h	/^         inline std::size_t cache_size() const$/;"	f	struct:exprtk::details::range_pack
cached_range_t	extern_libs/exprtk.h	/^         typedef std::pair<std::size_t,std::size_t> cached_range_t;$/;"	t	struct:exprtk::details::range_pack
calc_angles	algorithm/FacetGeometry.h	/^  calc_angles(const Vertex& v1, const Vertex& v2, $/;"	f	class:TQMesh::QuadGeometry
calc_angles	algorithm/FacetGeometry.h	/^  calc_angles(const Vertex& v1, const Vertex& v2, const Vertex& v3,$/;"	f	class:TQMesh::TriangleGeometry
calc_area	algorithm/FacetGeometry.h	/^  calc_area(const Vertex& v1, const Vertex& v2, $/;"	f	class:TQMesh::QuadGeometry
calc_area	algorithm/FacetGeometry.h	/^  calc_area(const Vertex& v1, const Vertex& v2, const Vertex& v3)$/;"	f	class:TQMesh::TriangleGeometry
calc_centroid	algorithm/FacetGeometry.h	/^  calc_centroid(const Vertex& v1, const Vertex& v2, $/;"	f	class:TQMesh::QuadGeometry
calc_centroid	algorithm/FacetGeometry.h	/^  calc_centroid(const Vertex& v1, const Vertex& v2, const Vertex& v3) $/;"	f	class:TQMesh::TriangleGeometry
calc_circumcenter	algorithm/FacetGeometry.h	/^  calc_circumcenter(const Vertex& v1, const Vertex& v2, $/;"	f	class:TQMesh::QuadGeometry
calc_circumcenter	algorithm/FacetGeometry.h	/^  calc_circumcenter(const Vertex& v1, const Vertex& v2, const Vertex& v3)$/;"	f	class:TQMesh::TriangleGeometry
calc_circumradius	algorithm/FacetGeometry.h	/^  calc_circumradius(const Vertex& v1, const Vec2d& circumcenter)$/;"	f	class:TQMesh::TriangleGeometry
calc_circumradius	algorithm/FacetGeometry.h	/^  calc_circumradius(const Vertex& v1, const Vertex& v2, $/;"	f	class:TQMesh::QuadGeometry
calc_edge_length	algorithm/FacetGeometry.h	/^  calc_edge_length(const Vertex& v1, const Vertex& v2) $/;"	f	class:TQMesh::TriangleGeometry
calc_edge_length	algorithm/FacetGeometry.h	/^  calc_edge_length(const Vertex& v1, const Vertex& v2)$/;"	f	class:TQMesh::QuadGeometry
calc_quality	algorithm/FacetGeometry.h	/^  static inline double calc_quality(const Vec3d& edge_lengths, $/;"	f	class:TQMesh::TriangleGeometry
calc_quality	algorithm/FacetGeometry.h	/^  static inline double calc_quality(const Vec4d& edge_lengths,$/;"	f	class:TQMesh::QuadGeometry
calc_shape_factor	algorithm/FacetGeometry.h	/^  static inline double calc_shape_factor(Vec3d& edge_lengths,$/;"	f	class:TQMesh::TriangleGeometry
calc_shape_factor	algorithm/FacetGeometry.h	/^  static inline double calc_shape_factor(Vec4d& edge_lengths,$/;"	f	class:TQMesh::QuadGeometry
cardinal_pow_optimisable	extern_libs/exprtk.h	/^         inline bool cardinal_pow_optimisable(const details::operator_type& operation, const T& c) const$/;"	f	class:exprtk::parser::expression_generator
cardinal_pow_optimisable	extern_libs/exprtk.h	/^         inline bool cardinal_pow_optimisable(const details::operator_type&, const T&)$/;"	f	class:exprtk::parser::expression_generator
cardinal_pow_optimisation	extern_libs/exprtk.h	/^         inline expression_node_ptr cardinal_pow_optimisation(T&, const T&)$/;"	f	class:exprtk::parser::expression_generator
cardinal_pow_optimisation	extern_libs/exprtk.h	/^         inline expression_node_ptr cardinal_pow_optimisation(const T& v, const T& c)$/;"	f	class:exprtk::parser::expression_generator
cardinal_pow_optimisation_impl	extern_libs/exprtk.h	/^         inline expression_node_ptr cardinal_pow_optimisation_impl(const TType& v, const unsigned int& p)$/;"	f	class:exprtk::parser::expression_generator
case_normalise	extern_libs/exprtk.h	/^      inline void case_normalise(std::string& s)$/;"	f	namespace:exprtk::details
case_normalise	extern_libs/exprtk.h	/^      inline void case_normalise(std::string&)$/;"	f	namespace:exprtk::details
case_stmt	extern_libs/exprtk.h	10571;"	d
case_stmt	extern_libs/exprtk.h	10588;"	d
case_stmt	extern_libs/exprtk.h	10726;"	d
case_stmt	extern_libs/exprtk.h	10743;"	d
case_stmt	extern_libs/exprtk.h	11005;"	d
case_stmt	extern_libs/exprtk.h	11022;"	d
case_stmt	extern_libs/exprtk.h	11160;"	d
case_stmt	extern_libs/exprtk.h	11177;"	d
case_stmt	extern_libs/exprtk.h	11353;"	d
case_stmt	extern_libs/exprtk.h	11370;"	d
case_stmt	extern_libs/exprtk.h	11514;"	d
case_stmt	extern_libs/exprtk.h	11531;"	d
case_stmt	extern_libs/exprtk.h	11673;"	d
case_stmt	extern_libs/exprtk.h	11690;"	d
case_stmt	extern_libs/exprtk.h	11828;"	d
case_stmt	extern_libs/exprtk.h	11845;"	d
case_stmt	extern_libs/exprtk.h	13997;"	d
case_stmt	extern_libs/exprtk.h	14013;"	d
case_stmt	extern_libs/exprtk.h	14049;"	d
case_stmt	extern_libs/exprtk.h	14066;"	d
case_stmt	extern_libs/exprtk.h	14098;"	d
case_stmt	extern_libs/exprtk.h	14114;"	d
case_stmt	extern_libs/exprtk.h	14150;"	d
case_stmt	extern_libs/exprtk.h	14167;"	d
case_stmt	extern_libs/exprtk.h	28639;"	d
case_stmt	extern_libs/exprtk.h	28735;"	d
case_stmt	extern_libs/exprtk.h	28758;"	d
case_stmt	extern_libs/exprtk.h	28771;"	d
case_stmt	extern_libs/exprtk.h	28842;"	d
case_stmt	extern_libs/exprtk.h	28847;"	d
case_stmt	extern_libs/exprtk.h	28857;"	d
case_stmt	extern_libs/exprtk.h	28863;"	d
case_stmt	extern_libs/exprtk.h	28873;"	d
case_stmt	extern_libs/exprtk.h	28878;"	d
case_stmt	extern_libs/exprtk.h	28890;"	d
case_stmt	extern_libs/exprtk.h	28908;"	d
case_stmt	extern_libs/exprtk.h	28929;"	d
case_stmt	extern_libs/exprtk.h	28946;"	d
case_stmt	extern_libs/exprtk.h	28963;"	d
case_stmt	extern_libs/exprtk.h	28980;"	d
case_stmt	extern_libs/exprtk.h	28992;"	d
case_stmt	extern_libs/exprtk.h	29011;"	d
case_stmt	extern_libs/exprtk.h	29033;"	d
case_stmt	extern_libs/exprtk.h	29051;"	d
case_stmt	extern_libs/exprtk.h	29066;"	d
case_stmt	extern_libs/exprtk.h	29084;"	d
case_stmt	extern_libs/exprtk.h	29097;"	d
case_stmt	extern_libs/exprtk.h	29111;"	d
case_stmt	extern_libs/exprtk.h	29139;"	d
case_stmt	extern_libs/exprtk.h	29151;"	d
case_stmt	extern_libs/exprtk.h	29164;"	d
case_stmt	extern_libs/exprtk.h	29173;"	d
case_stmt	extern_libs/exprtk.h	29211;"	d
case_stmt	extern_libs/exprtk.h	29223;"	d
case_stmt	extern_libs/exprtk.h	29681;"	d
case_stmt	extern_libs/exprtk.h	29691;"	d
case_stmt	extern_libs/exprtk.h	29701;"	d
case_stmt	extern_libs/exprtk.h	29711;"	d
case_stmt	extern_libs/exprtk.h	29721;"	d
case_stmt	extern_libs/exprtk.h	29731;"	d
case_stmt	extern_libs/exprtk.h	29741;"	d
case_stmt	extern_libs/exprtk.h	29751;"	d
case_stmt	extern_libs/exprtk.h	29763;"	d
case_stmt	extern_libs/exprtk.h	29773;"	d
case_stmt	extern_libs/exprtk.h	29781;"	d
case_stmt	extern_libs/exprtk.h	29791;"	d
case_stmt	extern_libs/exprtk.h	29842;"	d
case_stmt	extern_libs/exprtk.h	29848;"	d
case_stmt	extern_libs/exprtk.h	29856;"	d
case_stmt	extern_libs/exprtk.h	29862;"	d
case_stmt	extern_libs/exprtk.h	29870;"	d
case_stmt	extern_libs/exprtk.h	29876;"	d
case_stmt	extern_libs/exprtk.h	29903;"	d
case_stmt	extern_libs/exprtk.h	29910;"	d
case_stmt	extern_libs/exprtk.h	29918;"	d
case_stmt	extern_libs/exprtk.h	29925;"	d
case_stmt	extern_libs/exprtk.h	29933;"	d
case_stmt	extern_libs/exprtk.h	29939;"	d
case_stmt	extern_libs/exprtk.h	30094;"	d
case_stmt	extern_libs/exprtk.h	30113;"	d
case_stmt	extern_libs/exprtk.h	30317;"	d
case_stmt	extern_libs/exprtk.h	30324;"	d
case_stmt	extern_libs/exprtk.h	30392;"	d
case_stmt	extern_libs/exprtk.h	30399;"	d
case_stmt	extern_libs/exprtk.h	30478;"	d
case_stmt	extern_libs/exprtk.h	30485;"	d
case_stmt	extern_libs/exprtk.h	30616;"	d
case_stmt	extern_libs/exprtk.h	30623;"	d
case_stmt	extern_libs/exprtk.h	30735;"	d
case_stmt	extern_libs/exprtk.h	30742;"	d
case_stmt	extern_libs/exprtk.h	31144;"	d
case_stmt	extern_libs/exprtk.h	31151;"	d
case_stmt	extern_libs/exprtk.h	31179;"	d
case_stmt	extern_libs/exprtk.h	31186;"	d
case_stmt	extern_libs/exprtk.h	31223;"	d
case_stmt	extern_libs/exprtk.h	31230;"	d
case_stmt	extern_libs/exprtk.h	31245;"	d
case_stmt	extern_libs/exprtk.h	31257;"	d
case_stmt	extern_libs/exprtk.h	35997;"	d
case_stmt	extern_libs/exprtk.h	36003;"	d
case_stmt	extern_libs/exprtk.h	36015;"	d
case_stmt	extern_libs/exprtk.h	36021;"	d
case_stmt	extern_libs/exprtk.h	36033;"	d
case_stmt	extern_libs/exprtk.h	36039;"	d
case_stmt	extern_libs/exprtk.h	36049;"	d
case_stmt	extern_libs/exprtk.h	36054;"	d
case_stmt	extern_libs/exprtk.h	36292;"	d
case_stmt	extern_libs/exprtk.h	36298;"	d
case_stmt	extern_libs/exprtk.h	38485;"	d
case_stmt	extern_libs/exprtk.h	38496;"	d
case_stmt	extern_libs/exprtk.h	9024;"	d
case_stmt	extern_libs/exprtk.h	9041;"	d
case_stmt0	extern_libs/exprtk.h	31288;"	d
case_stmt0	extern_libs/exprtk.h	31323;"	d
case_stmt1	extern_libs/exprtk.h	31292;"	d
case_stmt1	extern_libs/exprtk.h	31324;"	d
cbegin	utils/VecND.h	/^  const_iterator cbegin() const { return entries_.cbegin(); }$/;"	f	class:CppUtils::VecND
ceil_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  ceil_impl(const T v, int_type_tag) { return v;             }$/;"	f	namespace:exprtk::details::numeric::details
ceil_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  ceil_impl(const T v, real_type_tag) { return std::ceil (v); }$/;"	f	namespace:exprtk::details::numeric::details
cell_data_	utils/VtkIO.h	/^  std::vector<std::unique_ptr<VtkIODataInterface>> cell_data_;$/;"	m	class:CppUtils::VtuWriter
cend	utils/VecND.h	/^  const_iterator cend() const { return entries_.cend(); }$/;"	f	class:CppUtils::VecND
center	utils/QuadTree.h	/^  const Vec2<V>& center() const { return center_; }$/;"	f	class:CppUtils::QuadTree
center	utils/QuadTree.h	/^  void center(const Vec2<V>& v)  $/;"	f	class:CppUtils::QuadTree
char_cptr	extern_libs/exprtk.h	/^      typedef char_t const*          char_cptr;$/;"	t	namespace:exprtk::details
char_ptr	extern_libs/exprtk.h	/^      typedef char_t*                char_ptr;$/;"	t	namespace:exprtk::details
char_t	extern_libs/exprtk.h	/^         typedef details::char_t char_t;$/;"	t	class:exprtk::lexer::generator
char_t	extern_libs/exprtk.h	/^      typedef char                   char_t;$/;"	t	namespace:exprtk::details
check	extern_libs/exprtk.h	/^         inline bool check() const$/;"	f	struct:exprtk::details::loop_runtime_checker
check_completeness	algorithm/MeshChecker.h	/^  bool check_completeness(bool mesh_cleanup=true) const$/;"	f	class:TQMesh::MeshChecker
check_coordinate	algorithm/SmoothingStrategy.h	/^  bool check_coordinate(const Vec2d& xy_n, const Vertex& v) const$/;"	f	class:TQMesh::SmoothingStrategy
check_domain_validity	algorithm/EntityChecks.h	/^  static inline bool check_domain_validity(const Domain& domain) $/;"	f	class:TQMesh::EntityChecks
check_front_validity	algorithm/EntityChecks.h	/^  static inline bool check_front_validity(Front& front)$/;"	f	class:TQMesh::EntityChecks
check_intersection	algorithm/FacetGeometry.h	/^  static inline bool check_intersection(const Q& quad, const F& front,$/;"	f	class:TQMesh::QuadGeometry
check_intersection	algorithm/FacetGeometry.h	/^  static inline bool check_intersection(const Q& quad,$/;"	f	class:TQMesh::QuadGeometry
check_intersection	algorithm/FacetGeometry.h	/^  static inline bool check_intersection(const T& tri, const F& front,$/;"	f	class:TQMesh::TriangleGeometry
check_intersection	algorithm/FacetGeometry.h	/^  static inline bool check_intersection(const T& tri,$/;"	f	class:TQMesh::TriangleGeometry
check_mesh_validity	algorithm/EntityChecks.h	/^  static inline bool check_mesh_validity(Mesh& mesh)$/;"	f	class:TQMesh::EntityChecks
check_new_vertex_coordinate	algorithm/SmoothingStrategy.h	/^  bool check_new_vertex_coordinate(const Vec2d& xy_n, const Vertex& v) const$/;"	f	class:TQMesh::SmoothingStrategy
check_orientation	algorithm/EdgeList.h	/^  bool check_orientation()$/;"	f	class:TQMesh::EdgeList
check_validity	algorithm/FacetGeometry.h	/^  static inline bool check_validity(const double area, $/;"	f	class:TQMesh::QuadGeometry
check_validity	algorithm/FacetGeometry.h	/^  static inline bool check_validity(const double area, $/;"	f	class:TQMesh::TriangleGeometry
children	utils/QuadTree.h	/^  const Array& children() const { return children_; }$/;"	f	class:CppUtils::QuadTree
choose_best_triangle	algorithm/FrontUpdate.h	/^  Triangle& choose_best_triangle(TriVector& new_triangles,$/;"	f	class:TQMesh::FrontUpdate
circumcenter	algorithm/Quad.h	/^  const Vec2d&  circumcenter() const { return circumcenter_; }$/;"	f	class:TQMesh::Quad
circumcenter	algorithm/Triangle.h	/^  const  Vec2d& circumcenter() const { return circumcenter_; }$/;"	f	class:TQMesh::Triangle
circumradius	algorithm/Quad.h	/^  double        circumradius() const { return circumradius_; }$/;"	f	class:TQMesh::Quad
circumradius	algorithm/Triangle.h	/^  double        circumradius() const { return circumradius_; }$/;"	f	class:TQMesh::Triangle
cis_match	extern_libs/exprtk.h	/^      struct cis_match$/;"	s	namespace:exprtk::details
cleanup	extern_libs/exprtk.h	/^         inline void cleanup()$/;"	f	class:exprtk::parser::scope_element_manager
cleanup_escapes	extern_libs/exprtk.h	/^      inline bool cleanup_escapes(std::string& s)$/;"	f	namespace:exprtk::details
clear	extern_libs/exprtk.h	/^            void clear()$/;"	f	class:exprtk::lexer::helper::symbol_replacer
clear	extern_libs/exprtk.h	/^         inline void clear()$/;"	f	class:exprtk::lexer::generator
clear	extern_libs/exprtk.h	/^         inline void clear()$/;"	f	struct:exprtk::parser::symtab_store
clear	extern_libs/exprtk.h	/^         inline void clear(const bool delete_node = true)$/;"	f	struct:exprtk::symbol_table::type_store
clear	extern_libs/exprtk.h	/^         void clear()$/;"	f	class:exprtk::parser::dependent_entity_collector
clear	extern_libs/exprtk.h	/^         void clear()$/;"	f	struct:exprtk::details::range_pack
clear	extern_libs/exprtk.h	/^         void clear()$/;"	f	struct:exprtk::lexer::token
clear	extern_libs/exprtk.h	/^         void clear()$/;"	f	struct:exprtk::parser::scope_element
clear	extern_libs/exprtk.h	/^      inline void clear()$/;"	f	class:exprtk::results_context
clear	extern_libs/exprtk.h	/^      inline void clear()$/;"	f	class:exprtk::symbol_table
clear	extern_libs/exprtk.h	/^      void clear()$/;"	f	class:exprtk::function_compositor
clear_double_quad_edges	algorithm/MeshCleanup.h	/^  static inline void clear_double_quad_edges(Mesh& mesh, bool init=true)$/;"	f	class:TQMesh::MeshCleanup
clear_double_quad_edges	tests/tests_MeshCleanup.cpp	/^void clear_double_quad_edges()$/;"	f	namespace:CleanupTests
clear_double_triangle_edges	algorithm/MeshCleanup.h	/^  static inline void clear_double_triangle_edges(Mesh& mesh, bool init=true)$/;"	f	class:TQMesh::MeshCleanup
clear_double_triangle_edges	tests/tests_MeshCleanup.cpp	/^void clear_double_triangle_edges()$/;"	f	namespace:CleanupTests
clear_edges	algorithm/EdgeList.h	/^  void clear_edges()$/;"	f	class:TQMesh::EdgeList
clear_edges	tests/tests_Boundary.cpp	/^void clear_edges()$/;"	f	namespace:BoundaryTests
clear_errors	extern_libs/exprtk.h	/^            void clear_errors()$/;"	f	class:exprtk::lexer::helper::numeric_checker
clear_errors	extern_libs/exprtk.h	/^            void clear_errors()$/;"	f	class:exprtk::lexer::helper::sequence_validator
clear_errors	extern_libs/exprtk.h	/^            void clear_errors()$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
clear_functions	extern_libs/exprtk.h	/^      inline void clear_functions()$/;"	f	class:exprtk::symbol_table
clear_local_constants	extern_libs/exprtk.h	/^      inline void clear_local_constants()$/;"	f	class:exprtk::symbol_table
clear_loop_runtime_check	extern_libs/exprtk.h	/^      inline void clear_loop_runtime_check()$/;"	f	class:exprtk::parser
clear_stack	extern_libs/exprtk.h	/^         inline void clear_stack()$/;"	f	struct:exprtk::function_compositor::base_func
clear_strings	extern_libs/exprtk.h	/^      inline void clear_strings()$/;"	f	class:exprtk::symbol_table
clear_variables	extern_libs/exprtk.h	/^      inline void clear_variables(const bool delete_node = true)$/;"	f	class:exprtk::symbol_table
clear_vectors	extern_libs/exprtk.h	/^      inline void clear_vectors()$/;"	f	class:exprtk::symbol_table
clear_waste	algorithm/EdgeList.h	/^  void clear_waste()$/;"	f	class:TQMesh::EdgeList
clear_waste	algorithm/Mesh.h	/^  void clear_waste()$/;"	f	class:TQMesh::Mesh
clear_waste	utils/Container.h	/^  void clear_waste() { waste_.clear(); }$/;"	f	class:CppUtils::Container
clock_frequency_	extern_libs/exprtk.h	/^         LARGE_INTEGER clock_frequency_;$/;"	m	class:exprtk::timer
close	extern_libs/exprtk.h	/^         bool close()$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
close	extern_libs/exprtk.h	/^         void close(Ptr& p)$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
close	extern_libs/exprtk.h	/^      close()$/;"	f	struct:exprtk::rtl::io::file::close
close	extern_libs/exprtk.h	/^   struct close : public exprtk::ifunction<T>$/;"	s	namespace:exprtk::rtl::io::file
close_quad_layer_gap	algorithm/QuadLayering.h	/^  void close_quad_layer_gap(Vertex& v_a, Vertex& v_b, Vertex& v_c)$/;"	f	class:TQMesh::QuadLayering
cmp	extern_libs/exprtk.h	/^         static inline bool cmp(const char_t c0, const char_t c1)$/;"	f	struct:exprtk::details::cis_match
cmp	extern_libs/exprtk.h	/^         static inline bool cmp(const char_t c0, const char_t c1)$/;"	f	struct:exprtk::details::cs_match
cmp_ulp	utils/VecND.h	/^  static inline std::size_t cmp_ulp = 2;$/;"	m	class:CppUtils::VecND
cntrl_blck_ptr_t	extern_libs/exprtk.h	/^         typedef control_block*         cntrl_blck_ptr_t;$/;"	t	struct:exprtk::expression::control_block
cntrl_struct_list	extern_libs/exprtk.h	/^      static const std::string cntrl_struct_list[] =$/;"	m	namespace:exprtk::details
cntrl_struct_list_size	extern_libs/exprtk.h	/^      static const std::size_t cntrl_struct_list_size = sizeof(cntrl_struct_list) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
cob_base_node	extern_libs/exprtk.h	/^      class cob_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
cob_node	extern_libs/exprtk.h	/^         explicit cob_node(const T const_var, const expression_ptr branch)$/;"	f	class:exprtk::details::exprtk_final
cob_optimisable	extern_libs/exprtk.h	/^         inline bool cob_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
coboc_optimisable	extern_libs/exprtk.h	/^         inline bool coboc_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
cocob_optimisable	extern_libs/exprtk.h	/^         inline bool cocob_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
cocov_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2_define<T, const_t, const_t, cref_t > cocov_t;$/;"	t	class:exprtk::parser
collect	extern_libs/exprtk.h	/^         void collect(Node*& node,$/;"	f	struct:exprtk::details::node_depth_base
collect	extern_libs/exprtk.h	/^         void collect(const Sequence<nb_pair_t, Allocator>& branch,$/;"	f	struct:exprtk::details::node_depth_base
collect	extern_libs/exprtk.h	/^         void collect(const Sequence<node_ptr_t, Allocator>& branch_list,$/;"	f	struct:exprtk::details::node_depth_base
collect	extern_libs/exprtk.h	/^         void collect(const Sequence<node_ptr_t, AllocatorT>& branch_list,$/;"	f	struct:exprtk::details::node_depth_base
collect	extern_libs/exprtk.h	/^         void collect(const nb_pair_t& branch,$/;"	f	struct:exprtk::details::node_depth_base
collect	extern_libs/exprtk.h	/^         void collect(node_ptr_t const& node,$/;"	f	struct:exprtk::details::node_depth_base
collect_assignments	extern_libs/exprtk.h	/^         bool& collect_assignments()$/;"	f	class:exprtk::parser::dependent_entity_collector
collect_assignments_	extern_libs/exprtk.h	/^         bool collect_assignments_;$/;"	m	class:exprtk::parser::dependent_entity_collector
collect_assignments_enabled	extern_libs/exprtk.h	/^         bool collect_assignments_enabled() const { return enable_collect_assings_;    }$/;"	f	class:exprtk::parser::settings_store
collect_dispalcement_directions	algorithm/SmoothingStrategy.h	/^  void collect_dispalcement_directions() $/;"	f	class:TQMesh::SmoothingStrategy
collect_front_edges	algorithm/Front.h	/^  void collect_front_edges(const Domain& domain,$/;"	f	class:TQMesh::FrontInitData
collect_functions	extern_libs/exprtk.h	/^         bool& collect_functions()$/;"	f	class:exprtk::parser::dependent_entity_collector
collect_functions	extern_libs/exprtk.h	/^   inline bool collect_functions(const std::string& expression,$/;"	f	namespace:exprtk
collect_functions_	extern_libs/exprtk.h	/^         bool collect_functions_;$/;"	m	class:exprtk::parser::dependent_entity_collector
collect_functions_enabled	extern_libs/exprtk.h	/^         bool collect_functions_enabled  () const { return enable_collect_funcs_;      }$/;"	f	class:exprtk::parser::settings_store
collect_interface_boundary_vertices	algorithm/MeshMerger.h	/^  bool collect_interface_boundary_vertices()$/;"	f	class:TQMesh::MeshMerger
collect_nodes	extern_libs/exprtk.h	/^         static void collect_nodes(node_ptr_t& root, noderef_list_t& node_delete_list)$/;"	f	class:exprtk::details::node_collection_destructor
collect_nodes	extern_libs/exprtk.h	/^         virtual void collect_nodes(noderef_list_t&) {}$/;"	f	struct:exprtk::details::node_collector_interface
collect_triangle_edges	algorithm/ModificationStrategy.h	/^  void collect_triangle_edges()$/;"	f	class:TQMesh::Tri2QuadModification
collect_type	extern_libs/exprtk.h	/^      enum collect_type$/;"	g	class:exprtk::parser
collect_variables	extern_libs/exprtk.h	/^         bool& collect_variables()$/;"	f	class:exprtk::parser::dependent_entity_collector
collect_variables	extern_libs/exprtk.h	/^   inline bool collect_variables(const std::string& expression,$/;"	f	namespace:exprtk
collect_variables_	extern_libs/exprtk.h	/^         bool collect_variables_;$/;"	m	class:exprtk::parser::dependent_entity_collector
collect_variables_enabled	extern_libs/exprtk.h	/^         bool collect_variables_enabled  () const { return enable_collect_vars_;       }$/;"	f	class:exprtk::parser::settings_store
collection_pass	extern_libs/exprtk.h	/^         static inline bool collection_pass(const std::string& expression_string,$/;"	f	struct:exprtk::details::collector_helper
collector_helper	extern_libs/exprtk.h	/^      struct collector_helper$/;"	s	namespace:exprtk::details
color	algorithm/Edge.h	/^  int color() const { return color_; }$/;"	f	class:TQMesh::Edge
colors	algorithm/Front.h	/^  const std::vector<IntVector>& colors() const { return colors_; }$/;"	f	class:TQMesh::FrontInitData
colors	algorithm/Front.h	/^  std::vector<IntVector>& colors() { return colors_; }$/;"	f	class:TQMesh::FrontInitData
column_no	extern_libs/exprtk.h	/^         std::size_t column_no;$/;"	m	struct:exprtk::parser_error::type
columns	utils/Matrix.h	/^  inline int columns() const { return cols_; }$/;"	f	class:CppUtils::Matrix
columns	utils/Matrix.h	/^  inline int columns() { return cols_; }$/;"	f	class:CppUtils::Matrix
columns	utils/ParaReader.h	/^  size_t columns() const { return ncol_; }$/;"	f	class:CppUtils::Parameter
commutative_check_enabled	extern_libs/exprtk.h	/^         bool commutative_check_enabled  () const { return enable_commutative_check_;  }$/;"	f	class:exprtk::parser::settings_store
commutative_inserter	extern_libs/exprtk.h	/^            commutative_inserter()$/;"	f	class:exprtk::lexer::helper::commutative_inserter
commutative_inserter	extern_libs/exprtk.h	/^         class commutative_inserter : public lexer::token_inserter$/;"	c	namespace:exprtk::lexer::helper
commutative_inserter_	extern_libs/exprtk.h	/^      lexer::helper::commutative_inserter       commutative_inserter_;$/;"	m	class:exprtk::parser
compile	extern_libs/exprtk.h	/^            static inline bool compile(expression_generator<Type>& expr_gen, const std::string& id,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf3ext_expression
compile	extern_libs/exprtk.h	/^            static inline bool compile(expression_generator<Type>& expr_gen, const std::string& id,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf4ext_expression
compile	extern_libs/exprtk.h	/^      inline bool compile(const std::string& expression_string, expression<T>& expr)$/;"	f	class:exprtk::parser
compile	extern_libs/exprtk.h	/^      inline expression_t compile(const std::string& expression_string, symbol_table_t& symtab)$/;"	f	class:exprtk::parser
compile_all_opts	extern_libs/exprtk.h	/^         static const std::size_t compile_all_opts =$/;"	m	class:exprtk::parser::settings_store
compile_expression	extern_libs/exprtk.h	/^      bool compile_expression(const std::string& name,$/;"	f	class:exprtk::function_compositor
compile_left	extern_libs/exprtk.h	/^            static inline bool compile_left(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf4ext_expression
compile_left_impl	extern_libs/exprtk.h	/^            static inline bool compile_left_impl(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf4ext_expression
compile_right	extern_libs/exprtk.h	/^            static inline bool compile_right(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf4ext_expression
compile_right_impl	extern_libs/exprtk.h	/^            static inline bool compile_right_impl(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf4ext_expression
complex_type_tag	extern_libs/exprtk.h	/^            struct complex_type_tag { complex_type_tag() {} };$/;"	f	struct:exprtk::details::numeric::details::complex_type_tag
complex_type_tag	extern_libs/exprtk.h	/^            struct complex_type_tag { complex_type_tag() {} };$/;"	s	namespace:exprtk::details::numeric::details
compositor_t	extern_libs/exprtk.h	/^      typedef function_compositor<T>  compositor_t;$/;"	t	struct:exprtk::type_defs
compute	extern_libs/exprtk.h	/^   inline bool compute(const std::string& expression_string, T& result)$/;"	f	namespace:exprtk
compute	extern_libs/exprtk.h	/^   inline bool compute(const std::string& expression_string,$/;"	f	namespace:exprtk
compute_area	algorithm/EdgeList.h	/^  void compute_area()$/;"	f	class:TQMesh::EdgeList
compute_node_depth	extern_libs/exprtk.h	/^         std::size_t compute_node_depth(const BranchType& n0, const BranchType& n1) const$/;"	f	struct:exprtk::details::node_depth_base
compute_node_depth	extern_libs/exprtk.h	/^         std::size_t compute_node_depth(const BranchType& n0, const BranchType& n1,$/;"	f	struct:exprtk::details::node_depth_base
compute_node_depth	extern_libs/exprtk.h	/^         std::size_t compute_node_depth(const Node* const& node) const$/;"	f	struct:exprtk::details::node_depth_base
compute_node_depth	extern_libs/exprtk.h	/^         std::size_t compute_node_depth(const Sequence<nb_pair_t,Allocator>& branch_list) const$/;"	f	struct:exprtk::details::node_depth_base
compute_node_depth	extern_libs/exprtk.h	/^         std::size_t compute_node_depth(const Sequence<node_ptr_t, Allocator>& branch_list) const$/;"	f	struct:exprtk::details::node_depth_base
compute_node_depth	extern_libs/exprtk.h	/^         std::size_t compute_node_depth(const nb_pair_t& branch) const$/;"	f	struct:exprtk::details::node_depth_base
compute_pow10	extern_libs/exprtk.h	/^      inline T compute_pow10(T d, const int exponent)$/;"	f	namespace:exprtk::details
condition_	extern_libs/exprtk.h	/^         branch_t condition_  ;$/;"	m	class:exprtk::details::for_loop_node
condition_	extern_libs/exprtk.h	/^         branch_t condition_;$/;"	m	class:exprtk::details::exprtk_final
condition_	extern_libs/exprtk.h	/^         branch_t condition_;$/;"	m	class:exprtk::details::repeat_until_loop_node
condition_	extern_libs/exprtk.h	/^         branch_t condition_;$/;"	m	class:exprtk::details::while_loop_node
condition_	extern_libs/exprtk.h	/^         expression_ptr condition_;$/;"	m	class:exprtk::details::exprtk_final
conditional	extern_libs/exprtk.h	/^         inline expression_node_ptr conditional(expression_node_ptr condition,$/;"	f	class:exprtk::parser::expression_generator
conditional_node	extern_libs/exprtk.h	/^         conditional_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
conditional_node_t	extern_libs/exprtk.h	/^      typedef details::conditional_node<T>                conditional_node_t;$/;"	t	class:exprtk::parser
conditional_string	extern_libs/exprtk.h	/^         inline expression_node_ptr conditional_string(expression_node_ptr condition,$/;"	f	class:exprtk::parser::expression_generator
conditional_string	extern_libs/exprtk.h	/^         inline expression_node_ptr conditional_string(expression_node_ptr,$/;"	f	class:exprtk::parser::expression_generator
conditional_string_node	extern_libs/exprtk.h	/^         conditional_string_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
conditional_string_node_t	extern_libs/exprtk.h	/^      typedef details::conditional_string_node<T>         conditional_string_node_t;$/;"	t	class:exprtk::parser
conditional_vector	extern_libs/exprtk.h	/^         inline expression_node_ptr conditional_vector(expression_node_ptr condition,$/;"	f	class:exprtk::parser::expression_generator
conditional_vector_node	extern_libs/exprtk.h	/^         conditional_vector_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
conditional_vector_node_t	extern_libs/exprtk.h	/^      typedef details::conditional_vector_node<T>         conditional_vector_node_t;$/;"	t	class:exprtk::parser
connectivity_	utils/VtkIO.h	/^  std::vector<size_t> connectivity_;$/;"	m	class:CppUtils::VtuWriter
cons_conditional_node	extern_libs/exprtk.h	/^         cons_conditional_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
cons_conditional_node_t	extern_libs/exprtk.h	/^      typedef details::cons_conditional_node<T>           cons_conditional_node_t;$/;"	t	class:exprtk::parser
cons_conditional_str_node	extern_libs/exprtk.h	/^         cons_conditional_str_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
cons_conditional_str_node_t	extern_libs/exprtk.h	/^      typedef details::cons_conditional_str_node<T>       cons_conditional_str_node_t;$/;"	t	class:exprtk::parser
consequent_	extern_libs/exprtk.h	/^         branch_t consequent_;$/;"	m	class:exprtk::details::exprtk_final
consequent_	extern_libs/exprtk.h	/^         expression_ptr consequent_;$/;"	m	class:exprtk::details::exprtk_final
consequent_node_ptr_	extern_libs/exprtk.h	/^         vector_node_ptr   consequent_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
const_e_impl	extern_libs/exprtk.h	/^            template <typename T> inline T    const_e_impl(real_type_tag) { return T(numeric::constant::e);             }$/;"	f	namespace:exprtk::details::numeric::details
const_optimise_mswitch	extern_libs/exprtk.h	/^         inline expression_node_ptr const_optimise_mswitch(Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
const_optimise_sf3	extern_libs/exprtk.h	/^         inline expression_node_ptr const_optimise_sf3(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
const_optimise_sf4	extern_libs/exprtk.h	/^         inline expression_node_ptr const_optimise_sf4(const details::operator_type& operation, expression_node_ptr (&branch)[4])$/;"	f	class:exprtk::parser::expression_generator
const_optimise_switch	extern_libs/exprtk.h	/^         inline expression_node_ptr const_optimise_switch(Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
const_optimise_varargfunc	extern_libs/exprtk.h	/^         inline expression_node_ptr const_optimise_varargfunc(const details::operator_type& operation, Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
const_pi_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   const_pi_impl(real_type_tag) { return T(numeric::constant::pi);            }$/;"	f	namespace:exprtk::details::numeric::details
const_qnan_impl	extern_libs/exprtk.h	/^            template <typename T> inline T const_qnan_impl(real_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
const_range	extern_libs/exprtk.h	/^         bool const_range() const$/;"	f	struct:exprtk::details::range_pack
const_size	extern_libs/exprtk.h	/^         inline std::size_t const_size() const$/;"	f	struct:exprtk::details::range_pack
const_string_range_node	extern_libs/exprtk.h	/^         explicit const_string_range_node(const std::string& v, const range_t& rp)$/;"	f	class:exprtk::details::exprtk_final
const_string_range_node_t	extern_libs/exprtk.h	/^      typedef details::const_string_range_node<T>         const_string_range_node_t;$/;"	t	class:exprtk::parser
const_t	extern_libs/exprtk.h	/^      typedef const T                                     const_t;$/;"	t	class:exprtk::parser
const_value_ptr	extern_libs/exprtk.h	/^         typedef const value_ptr const_value_ptr;$/;"	t	class:exprtk::details::vector_holder
constant	extern_libs/exprtk.h	/^         namespace constant$/;"	n	namespace:exprtk::details::numeric
construct_branch_pair	extern_libs/exprtk.h	/^      inline void construct_branch_pair(std::pair<expression_node<T>*,bool>& branch, expression_node<T>* b)$/;"	f	namespace:exprtk::details
construct_mesh	app/TQMeshApp.h	/^  bool construct_mesh(int mesh_id, ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
construct_subexpr	extern_libs/exprtk.h	/^      std::string construct_subexpr(lexer::token& begin_token, lexer::token& end_token)$/;"	f	class:exprtk::parser
constructor	tests/tests_Vertex.cpp	/^void constructor()$/;"	f	namespace:VertexTests
container_destructor	utils/Container.h	/^  virtual void container_destructor() {}$/;"	f	class:CppUtils::ContainerEntry
content_	utils/ParaReader.h	/^  strVec_ptr      content_;$/;"	m	class:CppUtils::ParaBlock
continue_exception	extern_libs/exprtk.h	/^      class continue_exception$/;"	c	namespace:exprtk::details
control_block	extern_libs/exprtk.h	/^            control_block()$/;"	f	struct:exprtk::details::vec_data_store::control_block
control_block	extern_libs/exprtk.h	/^            control_block(const std::size_t& dsize, data_t dptr, bool dstrct = false)$/;"	f	struct:exprtk::details::vec_data_store::control_block
control_block	extern_libs/exprtk.h	/^            explicit control_block(const std::size_t& dsize)$/;"	f	struct:exprtk::details::vec_data_store::control_block
control_block	extern_libs/exprtk.h	/^         control_block()$/;"	f	struct:exprtk::expression::control_block
control_block	extern_libs/exprtk.h	/^         control_block()$/;"	f	struct:exprtk::symbol_table::control_block
control_block	extern_libs/exprtk.h	/^         explicit control_block(expression_ptr e)$/;"	f	struct:exprtk::expression::control_block
control_block	extern_libs/exprtk.h	/^         explicit control_block(st_data* data)$/;"	f	struct:exprtk::symbol_table::control_block
control_block	extern_libs/exprtk.h	/^         struct control_block$/;"	s	class:exprtk::details::vec_data_store
control_block	extern_libs/exprtk.h	/^      struct control_block$/;"	s	class:exprtk::expression
control_block	extern_libs/exprtk.h	/^      struct control_block$/;"	s	class:exprtk::symbol_table
control_block_	extern_libs/exprtk.h	/^         control_block* control_block_;$/;"	m	class:exprtk::details::vec_data_store
control_block_	extern_libs/exprtk.h	/^      control_block* control_block_;$/;"	m	class:exprtk::expression
control_block_	extern_libs/exprtk.h	/^      control_block* control_block_;$/;"	m	class:exprtk::symbol_table
control_struct_disabled	extern_libs/exprtk.h	/^         bool control_struct_disabled(const std::string& control_struct) const$/;"	f	class:exprtk::parser::settings_store
control_struct_enabled	extern_libs/exprtk.h	/^         bool control_struct_enabled(const std::string& control_struct) const$/;"	f	class:exprtk::parser::settings_store
convert_boundary_interface_edges	algorithm/MeshMerger.h	/^  void convert_boundary_interface_edges()$/;"	f	class:TQMesh::MeshMerger
converter	utils/StringOps.h	/^struct converter$/;"	s	namespace:CppUtils
copy	extern_libs/exprtk.h	/^         void copy(const lvr_vec_t& src_v, var_t& dest_v)$/;"	f	struct:exprtk::function_compositor::base_func
copy	extern_libs/exprtk.h	/^         void copy(const var_t& src_v, lvr_vec_t& dest_v)$/;"	f	struct:exprtk::function_compositor::base_func
copy	extern_libs/exprtk.h	/^         void copy(const var_t& src_v, varref_t& dest_v)$/;"	f	struct:exprtk::function_compositor::base_func
copy	extern_libs/exprtk.h	/^         void copy(const varref_t& src_v, var_t& dest_v)$/;"	f	struct:exprtk::function_compositor::base_func
copy	extern_libs/exprtk.h	/^      copy()$/;"	f	class:exprtk::rtl::vecops::copy
copy	extern_libs/exprtk.h	/^   class copy : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
copy_donor_boundary_edges	algorithm/MeshMerger.h	/^  void copy_donor_boundary_edges()$/;"	f	class:TQMesh::MeshMerger
copy_donor_interior_edges	algorithm/MeshMerger.h	/^  void copy_donor_interior_edges()$/;"	f	class:TQMesh::MeshMerger
copy_donor_quads	algorithm/MeshMerger.h	/^  void copy_donor_quads()$/;"	f	class:TQMesh::MeshMerger
copy_donor_triangles	algorithm/MeshMerger.h	/^  void copy_donor_triangles()$/;"	f	class:TQMesh::MeshMerger
copy_donor_vertices	algorithm/MeshMerger.h	/^  void copy_donor_vertices()$/;"	f	class:TQMesh::MeshMerger
cos_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   cos_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
cos_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   cos_impl(const T v, real_type_tag) { return std::cos  (v); }$/;"	f	namespace:exprtk::details::numeric::details
cosh_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  cosh_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
cosh_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  cosh_impl(const T v, real_type_tag) { return std::cosh (v); }$/;"	f	namespace:exprtk::details::numeric::details
cot_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   cot_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
cot_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   cot_impl(const T v, real_type_tag) { return T(1) \/ std::tan(v); }$/;"	f	namespace:exprtk::details::numeric::details
count	extern_libs/exprtk.h	/^      count()$/;"	f	class:exprtk::rtl::vecops::count
count	extern_libs/exprtk.h	/^      inline std::size_t count() const$/;"	f	class:exprtk::results_context
count	extern_libs/exprtk.h	/^   class count : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
count	utils/Timer.h	/^  void count(const std::string& msg="") $/;"	f	class:CppUtils::Timer
count_edge_overlaps	algorithm/Domain.h	/^  size_t count_edge_overlaps(const Domain& nbr_domain)$/;"	f	class:TQMesh::Domain
cov_base_node	extern_libs/exprtk.h	/^      class cov_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
cov_node	extern_libs/exprtk.h	/^         explicit cov_node(const T& const_var, const T& var)$/;"	f	class:exprtk::details::exprtk_final
cov_optimisable	extern_libs/exprtk.h	/^         inline bool cov_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
cov_t	extern_libs/exprtk.h	/^      typedef details::T0oT1_define<T, const_t, cref_t > cov_t;$/;"	t	class:exprtk::parser
covoc_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2_define<T, const_t, cref_t , const_t> covoc_t;$/;"	t	class:exprtk::parser
covocov_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, const_t, cref_t , const_t, cref_t > covocov_t;$/;"	t	class:exprtk::parser
covov_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2_define<T, const_t, cref_t , cref_t > covov_t;$/;"	t	class:exprtk::parser
covovoc_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, const_t, cref_t , cref_t , const_t> covovoc_t;$/;"	t	class:exprtk::parser
covovov_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, const_t, cref_t , cref_t , cref_t > covovov_t;$/;"	t	class:exprtk::parser
cp	extern_libs/exprtk.h	/^      copy       <T> cp;$/;"	m	struct:exprtk::rtl::vecops::package
create	extern_libs/exprtk.h	/^            static inline control_block* create(const std::size_t& dsize, data_t data_ptr = data_t(0), bool dstrct = false)$/;"	f	struct:exprtk::details::vec_data_store::control_block
create	extern_libs/exprtk.h	/^            static inline st_data* create()$/;"	f	struct:exprtk::symbol_table::control_block::st_data
create	extern_libs/exprtk.h	/^         static inline cntrl_blck_ptr_t create(expression_ptr e)$/;"	f	struct:exprtk::expression::control_block
create	extern_libs/exprtk.h	/^         static inline control_block* create()$/;"	f	struct:exprtk::symbol_table::control_block
create_boundary_shape	algorithm/Boundary.h	/^  void create_boundary_shape(const std::vector<Vec2d>& v_shape,$/;"	f	class:TQMesh::Boundary
create_data	extern_libs/exprtk.h	/^            inline void create_data()$/;"	f	struct:exprtk::details::vec_data_store::control_block
create_empty_mesh	algorithm/MeshBuilder.h	/^  create_empty_mesh(Domain& domain, $/;"	f	class:TQMesh::MeshBuilder
create_empty_mesh_ptr	algorithm/MeshBuilder.h	/^  create_empty_mesh_ptr(Domain& domain, $/;"	f	class:TQMesh::MeshBuilder
create_possible_triangles	algorithm/FrontUpdate.h	/^  TriVector create_possible_triangles(Edge& base_edge,$/;"	f	class:TQMesh::FrontUpdate
create_quad_layer	algorithm/QuadLayering.h	/^  void create_quad_layer(QuadLayerVertices& quad_layer_verts)$/;"	f	class:TQMesh::QuadLayering
create_quad_layer_element	algorithm/QuadLayering.h	/^  create_quad_layer_element(Edge& base,$/;"	f	class:TQMesh::QuadLayering
create_stream	utils/Log.h	/^static inline OStreamPtr create_stream(OStreamType type, const std::string& path="")$/;"	f	namespace:CppUtils
create_stringvar	extern_libs/exprtk.h	/^      inline bool create_stringvar(const std::string& stringvar_name, const std::string& value = std::string(""))$/;"	f	class:exprtk::symbol_table
create_sub_edges	algorithm/Front.h	/^  void create_sub_edges(Edge& e, $/;"	f	class:TQMesh::Front
create_sub_vertex_coords	algorithm/Front.h	/^  std::vector<Vec2d> create_sub_vertex_coords(const Edge& e, $/;"	f	class:TQMesh::Front
create_variable	extern_libs/exprtk.h	/^      inline bool create_variable(const std::string& variable_name, const T& value = T(0))$/;"	f	class:exprtk::symbol_table
cref_t	extern_libs/exprtk.h	/^      typedef const T&                                    cref_t;$/;"	t	class:exprtk::parser
cross	utils/VecND.h	/^  cross(const VecND<T,N>& v) const$/;"	f	class:CppUtils::VecND
cross	utils/VecND.h	/^cross(const VecND<T,N>& a, const VecND<T,N>& b)$/;"	f	namespace:CppUtils
cs_match	extern_libs/exprtk.h	/^      struct cs_match$/;"	s	namespace:exprtk::details
csc_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   csc_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
csc_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   csc_impl(const T v, real_type_tag) { return T(1) \/ std::sin(v); }$/;"	f	namespace:exprtk::details::numeric::details
csv_import	tests/tests_Mesh.cpp	/^void csv_import()$/;"	f	namespace:MeshTests
ctype	extern_libs/exprtk.h	/^         typedef const Type  ctype;$/;"	t	class:exprtk::parser::expression_generator
current_index_	extern_libs/exprtk.h	/^            std::size_t current_index_;$/;"	m	class:exprtk::lexer::helper::numeric_checker
current_token	extern_libs/exprtk.h	/^         inline const token_t& current_token() const$/;"	f	class:exprtk::lexer::parser_helper
current_token_	extern_libs/exprtk.h	/^         token_t     current_token_;$/;"	m	class:exprtk::lexer::parser_helper
d2g_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   d2g_impl(const T v, real_type_tag) { return (v * T(10.0\/9.0)); }$/;"	f	namespace:exprtk::details::numeric::details
d2r_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   d2r_impl(const T v, real_type_tag) { return (v * T(numeric::constant::pi_180));  }$/;"	f	namespace:exprtk::details::numeric::details
data	extern_libs/exprtk.h	/^            data_t      data;$/;"	m	struct:exprtk::details::vec_data_store::control_block
data	extern_libs/exprtk.h	/^            inline value_ptr data() const$/;"	f	class:exprtk::details::vector_holder::vector_holder_base
data	extern_libs/exprtk.h	/^         inline data_t data() const$/;"	f	class:exprtk::details::vec_data_store
data	extern_libs/exprtk.h	/^         inline data_t data()$/;"	f	class:exprtk::details::vec_data_store
data	extern_libs/exprtk.h	/^         inline value_ptr data() const$/;"	f	class:exprtk::details::vector_holder
data	extern_libs/exprtk.h	/^         void*         data;$/;"	m	struct:exprtk::details::range_data_type
data	extern_libs/exprtk.h	/^         void*        data;$/;"	m	struct:exprtk::parser::scope_element
data	extern_libs/exprtk.h	/^         void* data;$/;"	m	union:exprtk::type_store::__anon6
data	extern_libs/exprtk.h	/^      inline data_ptr_t data() const$/;"	f	class:exprtk::vector_view
data	extern_libs/exprtk.h	/^      static inline std::string data()$/;"	f	namespace:exprtk::information
data_	extern_libs/exprtk.h	/^         st_data* data_;$/;"	m	struct:exprtk::symbol_table::control_block
data_	extern_libs/exprtk.h	/^         std::string data_;$/;"	m	class:exprtk::details::build_string
data_	extern_libs/exprtk.h	/^         value_t* data_;$/;"	m	struct:exprtk::type_store::type_view
data_	extern_libs/exprtk.h	/^      data_ptr_t  data_;$/;"	m	class:exprtk::vector_view
data_	utils/Matrix.h	/^  , data_ (r*c, 0) $/;"	f	class:CppUtils::Matrix
data_	utils/Matrix.h	/^  std::vector<T, Allocator> data_;$/;"	m	class:CppUtils::Matrix
data_	utils/VtkIO.h	/^  std::vector<T> data_;$/;"	m	class:CppUtils::VtkIOData
data_pack	extern_libs/exprtk.h	/^            data_pack()$/;"	f	struct:exprtk::expression::control_block::data_pack
data_pack	extern_libs/exprtk.h	/^            data_pack(void* ptr, const data_type dt, const std::size_t sz = 0)$/;"	f	struct:exprtk::expression::control_block::data_pack
data_pack	extern_libs/exprtk.h	/^         struct data_pack$/;"	s	struct:exprtk::expression::control_block
data_ptr_t	extern_libs/exprtk.h	/^      typedef T* data_ptr_t;$/;"	t	class:exprtk::vector_view
data_ref_	extern_libs/exprtk.h	/^      std::vector<data_ptr_t*> data_ref_;$/;"	m	class:exprtk::vector_view
data_t	extern_libs/exprtk.h	/^         typedef T* data_t;$/;"	t	class:exprtk::details::vec_data_store
data_type	extern_libs/exprtk.h	/^         enum data_type$/;"	g	struct:exprtk::expression::control_block
date	extern_libs/exprtk.h	/^      static const char* date    = "20210101";$/;"	m	namespace:exprtk::information
deactivate	extern_libs/exprtk.h	/^         inline void deactivate(const std::size_t& scope_depth)$/;"	f	class:exprtk::parser::scope_element_manager
debug_header_	utils/Log.h	/^  std::string debug_header_  = "[DEBUG] ";$/;"	m	class:CppUtils::LogProperties
dec	extern_libs/exprtk.h	/^      inline dependent_entity_collector& dec()$/;"	f	class:exprtk::parser
dec_	extern_libs/exprtk.h	/^      dependent_entity_collector dec_;$/;"	m	class:exprtk::parser
decay	algorithm/SmoothingStrategy.h	/^  LaplaceSmoothing& decay(double d) { decay_ = d; return *this;} $/;"	f	class:TQMesh::LaplaceSmoothing
decay	algorithm/SmoothingStrategy.h	/^  MixedSmoothing& decay(double d) { decay_ = d; return *this;} $/;"	f	class:TQMesh::MixedSmoothing
decay	algorithm/SmoothingStrategy.h	/^  TorsionSmoothing& decay(double d) { decay_ = d; return *this;} $/;"	f	class:TQMesh::TorsionSmoothing
decay	algorithm/SmoothingStrategy.h	/^  double decay() const { return decay_; }$/;"	f	class:TQMesh::LaplaceSmoothing
decay	algorithm/SmoothingStrategy.h	/^  double decay() const { return decay_; }$/;"	f	class:TQMesh::MixedSmoothing
decay	algorithm/SmoothingStrategy.h	/^  double decay() const { return decay_; }$/;"	f	class:TQMesh::TorsionSmoothing
decay_	algorithm/SmoothingStrategy.h	/^  double             decay_                = 1.00;$/;"	m	class:TQMesh::SmoothingStrategy
def_fp_retval	extern_libs/exprtk.h	38238;"	d
default_precedence	extern_libs/exprtk.h	/^      static const precedence_level default_precedence = e_level00;$/;"	m	class:exprtk::parser
default_usr_	extern_libs/exprtk.h	/^      unknown_symbol_resolver default_usr_;$/;"	m	class:exprtk::parser
define_sfop3	extern_libs/exprtk.h	10067;"	d
define_sfop3	extern_libs/exprtk.h	9871;"	d
define_sfop4	extern_libs/exprtk.h	10068;"	d
define_sfop4	extern_libs/exprtk.h	9935;"	d
delete_nodes	extern_libs/exprtk.h	/^         static void delete_nodes(node_ptr_t& root)$/;"	f	class:exprtk::details::node_collection_destructor
delete_ptr	extern_libs/exprtk.h	/^         bool delete_ptr;$/;"	m	struct:exprtk::parser::scoped_delete
delete_ptr	extern_libs/exprtk.h	/^         bool delete_ptr;$/;"	m	struct:exprtk::parser::scoped_deq_delete
delete_ptr	extern_libs/exprtk.h	/^         bool delete_ptr;$/;"	m	struct:exprtk::parser::scoped_expression_delete
delete_ptr	extern_libs/exprtk.h	/^         bool delete_ptr;$/;"	m	struct:exprtk::parser::scoped_vec_delete
deleter	extern_libs/exprtk.h	/^         struct deleter$/;"	s	struct:exprtk::symbol_table::type_store
delta	utils/Timer.h	/^  double delta(int i) const$/;"	f	class:CppUtils::Timer
dependent_entity_collector	extern_libs/exprtk.h	/^         dependent_entity_collector(const std::size_t options = e_ct_none)$/;"	f	class:exprtk::parser::dependent_entity_collector
dependent_entity_collector	extern_libs/exprtk.h	/^      class dependent_entity_collector$/;"	c	class:exprtk::parser
depth	extern_libs/exprtk.h	/^         mutable std::size_t depth;$/;"	m	struct:exprtk::details::node_depth_base
depth	extern_libs/exprtk.h	/^         std::size_t  depth;$/;"	m	struct:exprtk::parser::scope_element
depth_set	extern_libs/exprtk.h	/^         mutable bool depth_set;$/;"	m	struct:exprtk::details::node_depth_base
deq_	extern_libs/exprtk.h	/^         std::deque<ptr_t>& deq_;$/;"	m	struct:exprtk::parser::scoped_deq_delete
derivative	extern_libs/exprtk.h	/^   inline T derivative(const expression<T>& e,$/;"	f	namespace:exprtk
des_itr_t	extern_libs/exprtk.h	/^         typedef disabled_entity_set_t::iterator des_itr_t;$/;"	t	class:exprtk::parser::settings_store
destroy	extern_libs/exprtk.h	/^            static inline void destroy(control_block*& cntrl_blck)$/;"	f	struct:exprtk::details::vec_data_store::control_block
destroy	extern_libs/exprtk.h	/^            static inline void destroy(st_data*& sd)$/;"	f	struct:exprtk::symbol_table::control_block::st_data
destroy	extern_libs/exprtk.h	/^         static inline void destroy(cntrl_blck_ptr_t& cntrl_blck)$/;"	f	struct:exprtk::expression::control_block
destroy	extern_libs/exprtk.h	/^         static inline void destroy(control_block*& cntrl_blck, SymTab* sym_tab)$/;"	f	struct:exprtk::symbol_table::control_block
destroy_node	extern_libs/exprtk.h	/^      inline void destroy_node(expression_node<T>*& node)$/;"	f	namespace:exprtk::details
destruct	extern_libs/exprtk.h	/^            bool        destruct;$/;"	m	struct:exprtk::details::vec_data_store::control_block
details	extern_libs/exprtk.h	/^            explicit details(const std::size_t& vsize,$/;"	f	struct:exprtk::details::loop_unroll::details
details	extern_libs/exprtk.h	/^         namespace details$/;"	n	namespace:exprtk::details::numeric
details	extern_libs/exprtk.h	/^         struct details$/;"	s	namespace:exprtk::details::loop_unroll
details	extern_libs/exprtk.h	/^   namespace details$/;"	n	namespace:exprtk
details	extern_libs/exprtk.h	/^   namespace details$/;"	n	namespace:exprtk::rtl::vecops
details	extern_libs/exprtk.h	/^   namespace rtl { namespace io { namespace details$/;"	n	namespace:exprtk::rtl::io
details	extern_libs/exprtk.h	/^   namespace rtl { namespace io { namespace file { namespace details$/;"	n	namespace:exprtk::rtl::io::file
diagnostic	extern_libs/exprtk.h	/^         std::string diagnostic;$/;"	m	struct:exprtk::parser_error::type
dim	utils/VtkIO.h	/^  size_t dim() const { return dim_; }$/;"	f	class:CppUtils::VtkIOData
dim_	utils/VtkIO.h	/^  size_t         dim_;$/;"	m	class:CppUtils::VtkIOData
disable_all_arithmetic_ops	extern_libs/exprtk.h	/^         settings_store& disable_all_arithmetic_ops()$/;"	f	class:exprtk::parser::settings_store
disable_all_assignment_ops	extern_libs/exprtk.h	/^         settings_store& disable_all_assignment_ops()$/;"	f	class:exprtk::parser::settings_store
disable_all_base_functions	extern_libs/exprtk.h	/^         settings_store& disable_all_base_functions()$/;"	f	class:exprtk::parser::settings_store
disable_all_control_structures	extern_libs/exprtk.h	/^         settings_store& disable_all_control_structures()$/;"	f	class:exprtk::parser::settings_store
disable_all_inequality_ops	extern_libs/exprtk.h	/^         settings_store& disable_all_inequality_ops()$/;"	f	class:exprtk::parser::settings_store
disable_all_logic_ops	extern_libs/exprtk.h	/^         settings_store& disable_all_logic_ops()$/;"	f	class:exprtk::parser::settings_store
disable_arithmetic_operation	extern_libs/exprtk.h	/^         settings_store& disable_arithmetic_operation(settings_arithmetic_opr arithmetic)$/;"	f	class:exprtk::parser::settings_store
disable_assignment_operation	extern_libs/exprtk.h	/^         settings_store& disable_assignment_operation(settings_assignment_opr assignment)$/;"	f	class:exprtk::parser::settings_store
disable_base_function	extern_libs/exprtk.h	/^         settings_store& disable_base_function(settings_base_funcs bf)$/;"	f	class:exprtk::parser::settings_store
disable_control_structure	extern_libs/exprtk.h	/^         settings_store& disable_control_structure(settings_control_structs ctrl_struct)$/;"	f	class:exprtk::parser::settings_store
disable_has_side_effects	extern_libs/exprtk.h	/^   void disable_has_side_effects(FunctionType& func)$/;"	f	namespace:exprtk
disable_inequality_operation	extern_libs/exprtk.h	/^         settings_store& disable_inequality_operation(settings_inequality_opr inequality)$/;"	f	class:exprtk::parser::settings_store
disable_local_vardef	extern_libs/exprtk.h	/^         settings_store& disable_local_vardef()$/;"	f	class:exprtk::parser::settings_store
disable_logic_operation	extern_libs/exprtk.h	/^         settings_store& disable_logic_operation(settings_logic_opr logic)$/;"	f	class:exprtk::parser::settings_store
disable_rsrvd_sym_usr_	extern_libs/exprtk.h	/^         bool disable_rsrvd_sym_usr_;$/;"	m	class:exprtk::parser::settings_store
disable_type_checking	extern_libs/exprtk.h	/^      inline void disable_type_checking(Parser& p)$/;"	f	namespace:exprtk::details
disable_unknown_symbol_resolver	extern_libs/exprtk.h	/^      inline void disable_unknown_symbol_resolver()$/;"	f	class:exprtk::parser
disable_vardef_	extern_libs/exprtk.h	/^         bool disable_vardef_;$/;"	m	class:exprtk::parser::settings_store
disable_zero_parameters	extern_libs/exprtk.h	/^   void disable_zero_parameters(FunctionType& func)$/;"	f	namespace:exprtk
disable_zero_return_	extern_libs/exprtk.h	/^         bool disable_zero_return_;$/;"	m	class:exprtk::parser::settings_store
disabled_arithmetic_set_	extern_libs/exprtk.h	/^         disabled_entity_set_t disabled_arithmetic_set_;$/;"	m	class:exprtk::parser::settings_store
disabled_assignment_set_	extern_libs/exprtk.h	/^         disabled_entity_set_t disabled_assignment_set_;$/;"	m	class:exprtk::parser::settings_store
disabled_ctrl_set_	extern_libs/exprtk.h	/^         disabled_entity_set_t disabled_ctrl_set_ ;$/;"	m	class:exprtk::parser::settings_store
disabled_entity_set_t	extern_libs/exprtk.h	/^         typedef std::set<std::string,details::ilesscompare> disabled_entity_set_t;$/;"	t	class:exprtk::parser::settings_store
disabled_func_set_	extern_libs/exprtk.h	/^         disabled_entity_set_t disabled_func_set_ ;$/;"	m	class:exprtk::parser::settings_store
disabled_func_set_t	extern_libs/exprtk.h	/^      typedef std::set<std::string,details::ilesscompare> disabled_func_set_t;$/;"	t	class:exprtk::parser
disabled_inequality_set_	extern_libs/exprtk.h	/^         disabled_entity_set_t disabled_inequality_set_;$/;"	m	class:exprtk::parser::settings_store
disabled_logic_set_	extern_libs/exprtk.h	/^         disabled_entity_set_t disabled_logic_set_;$/;"	m	class:exprtk::parser::settings_store
distance_point_edge_sqr	utils/Geometry.h	/^inline double distance_point_edge_sqr(const VecND<CoordType,Dim>& p,$/;"	f	namespace:CppUtils
distribute_items	utils/QuadTree.h	/^  void distribute_items()$/;"	f	class:CppUtils::QuadTree
div_op	extern_libs/exprtk.h	/^      struct div_op : public opr_base<T>$/;"	s	namespace:exprtk::details
domain	tests/TestBuilder.h	/^  Domain& domain() { return domain_; }$/;"	f	class:TQMesh::TestBuilder
domain	tests/TestBuilder.h	/^  const Domain& domain() const { return domain_; }$/;"	f	class:TQMesh::TestBuilder
domain_	algorithm/FrontUpdate.h	/^  const Domain&   domain_;$/;"	m	class:TQMesh::FrontUpdate
domain_	algorithm/MeshChecker.h	/^  const Domain* domain_;$/;"	m	class:TQMesh::MeshChecker
domain_	algorithm/MeshWriter.h	/^  const Domain* domain_;$/;"	m	class:TQMesh::MeshWriter
domain_	algorithm/MeshingStrategy.h	/^  const Domain& domain_;$/;"	m	class:TQMesh::MeshingStrategy
domain_	algorithm/ModificationStrategy.h	/^  const Domain* domain_;$/;"	m	class:TQMesh::ModificationStrategy
domain_	algorithm/RefinementStrategy.h	/^  const Domain* domain_;$/;"	m	class:TQMesh::RefinementStrategy
domain_	algorithm/SmoothingStrategy.h	/^  const Domain*      domain_;$/;"	m	class:TQMesh::SmoothingStrategy
domain_	app/TQMeshApp.h	/^  std::unique_ptr<Domain> domain_;$/;"	m	class:TQMesh::MeshConstruction
domain_	tests/TestBuilder.h	/^  Domain domain_;$/;"	m	class:TQMesh::TestBuilder
domain_extent_	app/TQMeshApp.h	/^  double                  domain_extent_;$/;"	m	class:TQMesh::MeshConstruction
domain_vertices_	algorithm/Boundary.h	/^  Vertices* domain_vertices_;$/;"	m	class:TQMesh::Boundary
domains	algorithm/MeshBuilder.h	/^  DomainVector& domains() { return domains_; }$/;"	f	class:TQMesh::MeshBuilder
domains	algorithm/MeshBuilder.h	/^  const DomainVector& domains() const { return domains_; }$/;"	f	class:TQMesh::MeshBuilder
donor_	algorithm/MeshMerger.h	/^  Mesh*         donor_;$/;"	m	class:TQMesh::MeshMerger
dot	extern_libs/exprtk.h	/^      dot()$/;"	f	class:exprtk::rtl::vecops::dot
dot	extern_libs/exprtk.h	/^   class dot : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
dot	utils/VecND.h	/^  T dot(const VecND<T,N>& v) const $/;"	f	class:CppUtils::VecND
dot	utils/VecND.h	/^inline T dot(const VecND<T,N>& a, const VecND<T,N>& b)$/;"	f	namespace:CppUtils
dotk	extern_libs/exprtk.h	/^      dotk()$/;"	f	class:exprtk::rtl::vecops::dotk
dotk	extern_libs/exprtk.h	/^   class dotk : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
dt	extern_libs/exprtk.h	/^      dot        <T> dt;$/;"	m	struct:exprtk::rtl::vecops::package
dtk	extern_libs/exprtk.h	/^      dotk       <T> dtk;$/;"	m	struct:exprtk::rtl::vecops::package
dump	extern_libs/exprtk.h	/^         inline void dump() const$/;"	f	class:exprtk::details::vec_data_store
dump	extern_libs/exprtk.h	/^         inline void dump(const lexer::generator& generator)$/;"	f	namespace:exprtk::lexer::helper
dump_error	extern_libs/exprtk.h	/^      inline void dump_error(const type& error)$/;"	f	namespace:exprtk::parser_error
dump_ptr	extern_libs/exprtk.h	/^      inline void dump_ptr(const std::string& s, const void* ptr, const std::size_t size = 0)$/;"	f	namespace:exprtk::details
e	extern_libs/exprtk.h	/^            static const double e       =  2.71828182845904523536028747135266249775724709369996;$/;"	m	namespace:exprtk::details::numeric::constant
e	extern_libs/exprtk.h	/^      eof    <T> e;$/;"	m	struct:exprtk::rtl::io::file::package
e_abs	extern_libs/exprtk.h	/^            e_ipow          , e_ipowinv       , e_abs         , e_acos         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_abs	extern_libs/exprtk.h	/^         e_shr     , e_shl     , e_abs     , e_acos    ,$/;"	e	enum:exprtk::details::operator_type
e_acos	extern_libs/exprtk.h	/^            e_ipow          , e_ipowinv       , e_abs         , e_acos         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_acos	extern_libs/exprtk.h	/^         e_shr     , e_shl     , e_abs     , e_acos    ,$/;"	e	enum:exprtk::details::operator_type
e_acosh	extern_libs/exprtk.h	/^            e_acosh         , e_asin          , e_asinh       , e_atan         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_acosh	extern_libs/exprtk.h	/^         e_acosh   , e_asin    , e_asinh   , e_atan    ,$/;"	e	enum:exprtk::details::operator_type
e_add	extern_libs/exprtk.h	/^            e_lcrlbracket = '{', e_comma       = ',', e_add         = '+',$/;"	e	enum:exprtk::lexer::token::token_type
e_add	extern_libs/exprtk.h	/^            e_strcondition  , e_strccondition , e_add         , e_sub          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_add	extern_libs/exprtk.h	/^         e_default , e_null    , e_add     , e_sub     ,$/;"	e	enum:exprtk::details::operator_type
e_addass	extern_libs/exprtk.h	/^            e_string      =   9, e_assign      =  10, e_addass      =  11,$/;"	e	enum:exprtk::lexer::token::token_type
e_addass	extern_libs/exprtk.h	/^         e_trunc   , e_assign  , e_addass  , e_subass  ,$/;"	e	enum:exprtk::details::operator_type
e_advance	extern_libs/exprtk.h	/^            e_advance = 1$/;"	e	enum:exprtk::lexer::parser_helper::token_advance_mode
e_all_loops	extern_libs/exprtk.h	/^         e_all_loops         = 7$/;"	e	enum:exprtk::loop_runtime_check::loop_types
e_and	extern_libs/exprtk.h	/^            e_eq            , e_ne            , e_and         , e_nand         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_and	extern_libs/exprtk.h	/^         e_gte     , e_gt      , e_and     , e_nand    ,$/;"	e	enum:exprtk::details::operator_type
e_arith_add	extern_libs/exprtk.h	/^            e_arith_add, e_arith_sub, e_arith_mul,$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_arith_div	extern_libs/exprtk.h	/^            e_arith_div, e_arith_mod, e_arith_pow$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_arith_mod	extern_libs/exprtk.h	/^            e_arith_div, e_arith_mod, e_arith_pow$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_arith_mul	extern_libs/exprtk.h	/^            e_arith_add, e_arith_sub, e_arith_mul,$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_arith_pow	extern_libs/exprtk.h	/^            e_arith_div, e_arith_mod, e_arith_pow$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_arith_sub	extern_libs/exprtk.h	/^            e_arith_add, e_arith_sub, e_arith_mul,$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_arith_unknown	extern_libs/exprtk.h	/^            e_arith_unknown = 0,$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_asin	extern_libs/exprtk.h	/^            e_acosh         , e_asin          , e_asinh       , e_atan         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_asin	extern_libs/exprtk.h	/^         e_acosh   , e_asin    , e_asinh   , e_atan    ,$/;"	e	enum:exprtk::details::operator_type
e_asinh	extern_libs/exprtk.h	/^            e_acosh         , e_asin          , e_asinh       , e_atan         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_asinh	extern_libs/exprtk.h	/^         e_acosh   , e_asin    , e_asinh   , e_atan    ,$/;"	e	enum:exprtk::details::operator_type
e_assign	extern_libs/exprtk.h	/^            e_string      =   9, e_assign      =  10, e_addass      =  11,$/;"	e	enum:exprtk::lexer::token::token_type
e_assign	extern_libs/exprtk.h	/^         e_trunc   , e_assign  , e_addass  , e_subass  ,$/;"	e	enum:exprtk::details::operator_type
e_assign_addass	extern_libs/exprtk.h	/^            e_assign_assign, e_assign_addass, e_assign_subass,$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_assign_assign	extern_libs/exprtk.h	/^            e_assign_assign, e_assign_addass, e_assign_subass,$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_assign_divass	extern_libs/exprtk.h	/^            e_assign_mulass, e_assign_divass, e_assign_modass$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_assign_modass	extern_libs/exprtk.h	/^            e_assign_mulass, e_assign_divass, e_assign_modass$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_assign_mulass	extern_libs/exprtk.h	/^            e_assign_mulass, e_assign_divass, e_assign_modass$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_assign_subass	extern_libs/exprtk.h	/^            e_assign_assign, e_assign_addass, e_assign_subass,$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_assign_unknown	extern_libs/exprtk.h	/^            e_assign_unknown = 0,$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_atan	extern_libs/exprtk.h	/^            e_acosh         , e_asin          , e_asinh       , e_atan         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_atan	extern_libs/exprtk.h	/^         e_acosh   , e_asin    , e_asinh   , e_atan    ,$/;"	e	enum:exprtk::details::operator_type
e_atan2	extern_libs/exprtk.h	/^         e_atan2   , e_min     , e_max     , e_avg     ,$/;"	e	enum:exprtk::details::operator_type
e_atanh	extern_libs/exprtk.h	/^            e_atanh         , e_ceil          , e_cos         , e_cosh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_atanh	extern_libs/exprtk.h	/^         e_atanh   , e_ceil    , e_cos     , e_cosh    ,$/;"	e	enum:exprtk::details::operator_type
e_avg	extern_libs/exprtk.h	/^         e_atan2   , e_min     , e_max     , e_avg     ,$/;"	e	enum:exprtk::details::operator_type
e_bf_abs	extern_libs/exprtk.h	/^            e_bf_abs       , e_bf_acos     , e_bf_acosh    , e_bf_asin    ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_acos	extern_libs/exprtk.h	/^            e_bf_abs       , e_bf_acos     , e_bf_acosh    , e_bf_asin    ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_acosh	extern_libs/exprtk.h	/^            e_bf_abs       , e_bf_acos     , e_bf_acosh    , e_bf_asin    ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_asin	extern_libs/exprtk.h	/^            e_bf_abs       , e_bf_acos     , e_bf_acosh    , e_bf_asin    ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_asinh	extern_libs/exprtk.h	/^            e_bf_asinh     , e_bf_atan     , e_bf_atan2    , e_bf_atanh   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_atan	extern_libs/exprtk.h	/^            e_bf_asinh     , e_bf_atan     , e_bf_atan2    , e_bf_atanh   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_atan2	extern_libs/exprtk.h	/^            e_bf_asinh     , e_bf_atan     , e_bf_atan2    , e_bf_atanh   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_atanh	extern_libs/exprtk.h	/^            e_bf_asinh     , e_bf_atan     , e_bf_atan2    , e_bf_atanh   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_avg	extern_libs/exprtk.h	/^            e_bf_avg       , e_bf_ceil     , e_bf_clamp    , e_bf_cos     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_ceil	extern_libs/exprtk.h	/^            e_bf_avg       , e_bf_ceil     , e_bf_clamp    , e_bf_cos     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_clamp	extern_libs/exprtk.h	/^            e_bf_avg       , e_bf_ceil     , e_bf_clamp    , e_bf_cos     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_cos	extern_libs/exprtk.h	/^            e_bf_avg       , e_bf_ceil     , e_bf_clamp    , e_bf_cos     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_cosh	extern_libs/exprtk.h	/^            e_bf_cosh      , e_bf_cot      , e_bf_csc      , e_bf_equal   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_cot	extern_libs/exprtk.h	/^            e_bf_cosh      , e_bf_cot      , e_bf_csc      , e_bf_equal   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_csc	extern_libs/exprtk.h	/^            e_bf_cosh      , e_bf_cot      , e_bf_csc      , e_bf_equal   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_deg2grad	extern_libs/exprtk.h	/^            e_bf_not_equal , e_bf_inrange  , e_bf_deg2grad , e_bf_deg2rad ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_deg2rad	extern_libs/exprtk.h	/^            e_bf_not_equal , e_bf_inrange  , e_bf_deg2grad , e_bf_deg2rad ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_equal	extern_libs/exprtk.h	/^            e_bf_cosh      , e_bf_cot      , e_bf_csc      , e_bf_equal   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_erf	extern_libs/exprtk.h	/^            e_bf_erf       , e_bf_erfc     , e_bf_exp      , e_bf_expm1   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_erfc	extern_libs/exprtk.h	/^            e_bf_erf       , e_bf_erfc     , e_bf_exp      , e_bf_expm1   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_exp	extern_libs/exprtk.h	/^            e_bf_erf       , e_bf_erfc     , e_bf_exp      , e_bf_expm1   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_expm1	extern_libs/exprtk.h	/^            e_bf_erf       , e_bf_erfc     , e_bf_exp      , e_bf_expm1   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_floor	extern_libs/exprtk.h	/^            e_bf_floor     , e_bf_frac     , e_bf_hypot    , e_bf_iclamp  ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_frac	extern_libs/exprtk.h	/^            e_bf_floor     , e_bf_frac     , e_bf_hypot    , e_bf_iclamp  ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_grad2deg	extern_libs/exprtk.h	/^            e_bf_rad2deg   , e_bf_grad2deg$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_hypot	extern_libs/exprtk.h	/^            e_bf_floor     , e_bf_frac     , e_bf_hypot    , e_bf_iclamp  ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_iclamp	extern_libs/exprtk.h	/^            e_bf_floor     , e_bf_frac     , e_bf_hypot    , e_bf_iclamp  ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_inrange	extern_libs/exprtk.h	/^            e_bf_not_equal , e_bf_inrange  , e_bf_deg2grad , e_bf_deg2rad ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_like	extern_libs/exprtk.h	/^            e_bf_like      , e_bf_log      , e_bf_log10    , e_bf_log1p   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_log	extern_libs/exprtk.h	/^            e_bf_like      , e_bf_log      , e_bf_log10    , e_bf_log1p   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_log10	extern_libs/exprtk.h	/^            e_bf_like      , e_bf_log      , e_bf_log10    , e_bf_log1p   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_log1p	extern_libs/exprtk.h	/^            e_bf_like      , e_bf_log      , e_bf_log10    , e_bf_log1p   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_log2	extern_libs/exprtk.h	/^            e_bf_log2      , e_bf_logn     , e_bf_mand     , e_bf_max     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_logn	extern_libs/exprtk.h	/^            e_bf_log2      , e_bf_logn     , e_bf_mand     , e_bf_max     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_mand	extern_libs/exprtk.h	/^            e_bf_log2      , e_bf_logn     , e_bf_mand     , e_bf_max     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_max	extern_libs/exprtk.h	/^            e_bf_log2      , e_bf_logn     , e_bf_mand     , e_bf_max     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_min	extern_libs/exprtk.h	/^            e_bf_min       , e_bf_mod      , e_bf_mor      , e_bf_mul     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_mod	extern_libs/exprtk.h	/^            e_bf_min       , e_bf_mod      , e_bf_mor      , e_bf_mul     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_mor	extern_libs/exprtk.h	/^            e_bf_min       , e_bf_mod      , e_bf_mor      , e_bf_mul     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_mul	extern_libs/exprtk.h	/^            e_bf_min       , e_bf_mod      , e_bf_mor      , e_bf_mul     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_ncdf	extern_libs/exprtk.h	/^            e_bf_ncdf      , e_bf_pow      , e_bf_root     , e_bf_round   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_not_equal	extern_libs/exprtk.h	/^            e_bf_not_equal , e_bf_inrange  , e_bf_deg2grad , e_bf_deg2rad ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_pow	extern_libs/exprtk.h	/^            e_bf_ncdf      , e_bf_pow      , e_bf_root     , e_bf_round   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_rad2deg	extern_libs/exprtk.h	/^            e_bf_rad2deg   , e_bf_grad2deg$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_root	extern_libs/exprtk.h	/^            e_bf_ncdf      , e_bf_pow      , e_bf_root     , e_bf_round   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_round	extern_libs/exprtk.h	/^            e_bf_ncdf      , e_bf_pow      , e_bf_root     , e_bf_round   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_roundn	extern_libs/exprtk.h	/^            e_bf_roundn    , e_bf_sec      , e_bf_sgn      , e_bf_sin     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sec	extern_libs/exprtk.h	/^            e_bf_roundn    , e_bf_sec      , e_bf_sgn      , e_bf_sin     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sgn	extern_libs/exprtk.h	/^            e_bf_roundn    , e_bf_sec      , e_bf_sgn      , e_bf_sin     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sin	extern_libs/exprtk.h	/^            e_bf_roundn    , e_bf_sec      , e_bf_sgn      , e_bf_sin     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sinc	extern_libs/exprtk.h	/^            e_bf_sinc      , e_bf_sinh     , e_bf_sqrt     , e_bf_sum     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sinh	extern_libs/exprtk.h	/^            e_bf_sinc      , e_bf_sinh     , e_bf_sqrt     , e_bf_sum     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sqrt	extern_libs/exprtk.h	/^            e_bf_sinc      , e_bf_sinh     , e_bf_sqrt     , e_bf_sum     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sum	extern_libs/exprtk.h	/^            e_bf_sinc      , e_bf_sinh     , e_bf_sqrt     , e_bf_sum     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_swap	extern_libs/exprtk.h	/^            e_bf_swap      , e_bf_tan      , e_bf_tanh     , e_bf_trunc   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_tan	extern_libs/exprtk.h	/^            e_bf_swap      , e_bf_tan      , e_bf_tanh     , e_bf_trunc   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_tanh	extern_libs/exprtk.h	/^            e_bf_swap      , e_bf_tan      , e_bf_tanh     , e_bf_trunc   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_trunc	extern_libs/exprtk.h	/^            e_bf_swap      , e_bf_tan      , e_bf_tanh     , e_bf_trunc   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_unknown	extern_libs/exprtk.h	/^            e_bf_unknown = 0,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_binary	extern_libs/exprtk.h	/^            e_binary        , e_binary_ext    , e_trinary     , e_quaternary   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_binary_ext	extern_libs/exprtk.h	/^            e_binary        , e_binary_ext    , e_trinary     , e_quaternary   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_boc	extern_libs/exprtk.h	/^            e_cob           , e_boc           , e_vovov       , e_vovoc        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_bov	extern_libs/exprtk.h	/^            e_cov           , e_voc           , e_vob         , e_bov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_bracket_check	extern_libs/exprtk.h	/^            e_bracket_check        =    8,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_break	extern_libs/exprtk.h	/^            e_valvecarith   , e_vecunaryop    , e_vecondition , e_break        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ceil	extern_libs/exprtk.h	/^            e_atanh         , e_ceil          , e_cos         , e_cosh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ceil	extern_libs/exprtk.h	/^         e_atanh   , e_ceil    , e_cos     , e_cosh    ,$/;"	e	enum:exprtk::details::operator_type
e_clamp	extern_libs/exprtk.h	/^         e_tanh    , e_cot     , e_clamp   , e_iclamp  ,$/;"	e	enum:exprtk::details::operator_type
e_cob	extern_libs/exprtk.h	/^            e_cob           , e_boc           , e_vovov       , e_vovoc        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_collect_assings	extern_libs/exprtk.h	/^            e_collect_assings      = 1024,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_collect_funcs	extern_libs/exprtk.h	/^            e_collect_funcs        =  512,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_collect_vars	extern_libs/exprtk.h	/^            e_collect_vars         =  256,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_colon	extern_libs/exprtk.h	/^            e_mod         = '%', e_pow         = '^', e_colon       = ':',$/;"	e	enum:exprtk::lexer::token::token_type
e_comma	extern_libs/exprtk.h	/^            e_lcrlbracket = '{', e_comma       = ',', e_add         = '+',$/;"	e	enum:exprtk::lexer::token::token_type
e_commutative_check	extern_libs/exprtk.h	/^            e_commutative_check    =   32,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_conditional	extern_libs/exprtk.h	/^            e_vararg        , e_conditional   , e_while       , e_repeat       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_constant	extern_libs/exprtk.h	/^            e_none          , e_null          , e_constant    , e_unary        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_continue	extern_libs/exprtk.h	/^            e_continue      , e_swap$/;"	e	enum:exprtk::details::expression_node::node_type
e_cos	extern_libs/exprtk.h	/^            e_atanh         , e_ceil          , e_cos         , e_cosh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_cos	extern_libs/exprtk.h	/^         e_atanh   , e_ceil    , e_cos     , e_cosh    ,$/;"	e	enum:exprtk::details::operator_type
e_cosh	extern_libs/exprtk.h	/^            e_atanh         , e_ceil          , e_cos         , e_cosh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_cosh	extern_libs/exprtk.h	/^         e_atanh   , e_ceil    , e_cos     , e_cosh    ,$/;"	e	enum:exprtk::details::operator_type
e_cot	extern_libs/exprtk.h	/^            e_cot           , e_sec           , e_csc         , e_r2d          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_cot	extern_libs/exprtk.h	/^         e_tanh    , e_cot     , e_clamp   , e_iclamp  ,$/;"	e	enum:exprtk::details::operator_type
e_cov	extern_libs/exprtk.h	/^            e_cov           , e_voc           , e_vob         , e_bov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_covoc	extern_libs/exprtk.h	/^            e_vocov         , e_covov         , e_covoc       , e_vovovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_covocov	extern_libs/exprtk.h	/^            e_covocov       , e_vocovoc       , e_covovoc     , e_vococov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_covov	extern_libs/exprtk.h	/^            e_vocov         , e_covov         , e_covoc       , e_vovovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_covovoc	extern_libs/exprtk.h	/^            e_covocov       , e_vocovoc       , e_covovoc     , e_vococov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_covovov	extern_libs/exprtk.h	/^            e_vovovoc       , e_vovocov       , e_vocovov     , e_covovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_csc	extern_libs/exprtk.h	/^            e_cot           , e_sec           , e_csc         , e_r2d          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_csc	extern_libs/exprtk.h	/^         e_sinh    , e_sec     , e_csc     , e_tan     ,$/;"	e	enum:exprtk::details::operator_type
e_cstringvarrng	extern_libs/exprtk.h	/^            e_stringvarrng  , e_cstringvarrng , e_strgenrange , e_strconcat    ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ct_assignments	extern_libs/exprtk.h	/^         e_ct_assignments = 4$/;"	e	enum:exprtk::parser::collect_type
e_ct_functions	extern_libs/exprtk.h	/^         e_ct_functions   = 2,$/;"	e	enum:exprtk::parser::collect_type
e_ct_none	extern_libs/exprtk.h	/^         e_ct_none        = 0,$/;"	e	enum:exprtk::parser::collect_type
e_ct_variables	extern_libs/exprtk.h	/^         e_ct_variables   = 1,$/;"	e	enum:exprtk::parser::collect_type
e_ctrl_for_loop	extern_libs/exprtk.h	/^            e_ctrl_for_loop,$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_ctrl_ifelse	extern_libs/exprtk.h	/^            e_ctrl_ifelse,$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_ctrl_repeat_loop	extern_libs/exprtk.h	/^            e_ctrl_repeat_loop,$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_ctrl_return	extern_libs/exprtk.h	/^            e_ctrl_return$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_ctrl_switch	extern_libs/exprtk.h	/^            e_ctrl_switch,$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_ctrl_unknown	extern_libs/exprtk.h	/^            e_ctrl_unknown = 0,$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_ctrl_while_loop	extern_libs/exprtk.h	/^            e_ctrl_while_loop,$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_d2g	extern_libs/exprtk.h	/^            e_d2r           , e_d2g           , e_g2d         , e_notl         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_d2g	extern_libs/exprtk.h	/^         e_d2g     , e_g2d     , e_hypot   , e_notl    ,$/;"	e	enum:exprtk::details::operator_type
e_d2r	extern_libs/exprtk.h	/^            e_d2r           , e_d2g           , e_g2d         , e_notl         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_d2r	extern_libs/exprtk.h	/^         e_inrange , e_sgn     , e_r2d     , e_d2r     ,$/;"	e	enum:exprtk::details::operator_type
e_data	extern_libs/exprtk.h	/^            e_data     ,$/;"	e	enum:exprtk::expression::control_block::data_type
e_default	extern_libs/exprtk.h	/^         e_default , e_null    , e_add     , e_sub     ,$/;"	e	enum:exprtk::details::operator_type
e_disable_usr_on_rsrvd	extern_libs/exprtk.h	/^            e_disable_usr_on_rsrvd = 2048,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_disable_vardef	extern_libs/exprtk.h	/^            e_disable_vardef       =  128,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_disable_zero_return	extern_libs/exprtk.h	/^            e_disable_zero_return  = 4096$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_div	extern_libs/exprtk.h	/^            e_mul           , e_div           , e_mod         , e_pow          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_div	extern_libs/exprtk.h	/^            e_sub         = '-', e_div         = '\/', e_mul         = '*',$/;"	e	enum:exprtk::lexer::token::token_type
e_div	extern_libs/exprtk.h	/^         e_mul     , e_div     , e_mod     , e_pow     ,$/;"	e	enum:exprtk::details::operator_type
e_divass	extern_libs/exprtk.h	/^            e_subass      =  12, e_mulass      =  13, e_divass      =  14,$/;"	e	enum:exprtk::lexer::token::token_type
e_divass	extern_libs/exprtk.h	/^         e_mulass  , e_divass  , e_modass  , e_in      ,$/;"	e	enum:exprtk::details::operator_type
e_end	algorithm/QuadLayering.h	/^  Edge* e_end() const { return e_end_; }$/;"	f	class:TQMesh::QuadLayerVertices
e_eof	extern_libs/exprtk.h	/^            e_eof         =   6, e_number      =   7, e_symbol      =   8,$/;"	e	enum:exprtk::lexer::token::token_type
e_eq	extern_libs/exprtk.h	/^            e_eq            , e_ne            , e_and         , e_nand         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_eq	extern_libs/exprtk.h	/^            e_eq          = '=', e_rbracket    = ')', e_lbracket    = '(',$/;"	e	enum:exprtk::lexer::token::token_type
e_eq	extern_libs/exprtk.h	/^         e_eq      , e_equal   , e_ne      , e_nequal  ,$/;"	e	enum:exprtk::details::operator_type
e_equal	extern_libs/exprtk.h	/^         e_eq      , e_equal   , e_ne      , e_nequal  ,$/;"	e	enum:exprtk::details::operator_type
e_erf	extern_libs/exprtk.h	/^            e_sgn           , e_erf           , e_erfc        , e_ncdf         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_erf	extern_libs/exprtk.h	/^         e_erf     , e_erfc    , e_ncdf    , e_frac    ,$/;"	e	enum:exprtk::details::operator_type
e_erfc	extern_libs/exprtk.h	/^            e_sgn           , e_erf           , e_erfc        , e_ncdf         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_erfc	extern_libs/exprtk.h	/^         e_erf     , e_erfc    , e_ncdf    , e_frac    ,$/;"	e	enum:exprtk::details::operator_type
e_err_number	extern_libs/exprtk.h	/^            e_err_number  =   3, e_err_string  =   4, e_err_sfunc   =   5,$/;"	e	enum:exprtk::lexer::token::token_type
e_err_sfunc	extern_libs/exprtk.h	/^            e_err_number  =   3, e_err_string  =   4, e_err_sfunc   =   5,$/;"	e	enum:exprtk::lexer::token::token_type
e_err_string	extern_libs/exprtk.h	/^            e_err_number  =   3, e_err_string  =   4, e_err_sfunc   =   5,$/;"	e	enum:exprtk::lexer::token::token_type
e_err_symbol	extern_libs/exprtk.h	/^            e_none        =   0, e_error       =   1, e_err_symbol  =   2,$/;"	e	enum:exprtk::lexer::token::token_type
e_error	extern_libs/exprtk.h	/^            e_none        =   0, e_error       =   1, e_err_symbol  =   2,$/;"	e	enum:exprtk::lexer::token::token_type
e_error	extern_libs/exprtk.h	/^         e_error = 0,$/;"	e	enum:exprtk::rtl::io::file::details::file_mode
e_exp	extern_libs/exprtk.h	/^            e_exp           , e_expm1         , e_floor       , e_log          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_exp	extern_libs/exprtk.h	/^         e_exp     , e_expm1   , e_floor   , e_log     ,$/;"	e	enum:exprtk::details::operator_type
e_expm1	extern_libs/exprtk.h	/^            e_exp           , e_expm1         , e_floor       , e_log          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_expm1	extern_libs/exprtk.h	/^         e_exp     , e_expm1   , e_floor   , e_log     ,$/;"	e	enum:exprtk::details::operator_type
e_expr	extern_libs/exprtk.h	/^            e_expr     ,$/;"	e	enum:exprtk::expression::control_block::data_type
e_floor	extern_libs/exprtk.h	/^            e_exp           , e_expm1         , e_floor       , e_log          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_floor	extern_libs/exprtk.h	/^         e_exp     , e_expm1   , e_floor   , e_log     ,$/;"	e	enum:exprtk::details::operator_type
e_for	extern_libs/exprtk.h	/^            e_for           , e_switch        , e_mswitch     , e_return       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_for_loop	extern_libs/exprtk.h	/^         e_for_loop          = 1,$/;"	e	enum:exprtk::loop_runtime_check::loop_types
e_frac	extern_libs/exprtk.h	/^            e_frac          , e_trunc         , e_uvouv       , e_vov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_frac	extern_libs/exprtk.h	/^         e_erf     , e_erfc    , e_ncdf    , e_frac    ,$/;"	e	enum:exprtk::details::operator_type
e_function	extern_libs/exprtk.h	/^            e_function      , e_vafunction    , e_genfunction , e_strfunction  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_g2d	extern_libs/exprtk.h	/^            e_d2r           , e_d2g           , e_g2d         , e_notl         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_g2d	extern_libs/exprtk.h	/^         e_d2g     , e_g2d     , e_hypot   , e_notl    ,$/;"	e	enum:exprtk::details::operator_type
e_genfunction	extern_libs/exprtk.h	/^            e_function      , e_vafunction    , e_genfunction , e_strfunction  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_gt	extern_libs/exprtk.h	/^            e_lt            , e_lte           , e_gt          , e_gte          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_gt	extern_libs/exprtk.h	/^            e_swap        =  21, e_lt          = '<', e_gt          = '>',$/;"	e	enum:exprtk::lexer::token::token_type
e_gt	extern_libs/exprtk.h	/^         e_gte     , e_gt      , e_and     , e_nand    ,$/;"	e	enum:exprtk::details::operator_type
e_gte	extern_libs/exprtk.h	/^            e_lt            , e_lte           , e_gt          , e_gte          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_gte	extern_libs/exprtk.h	/^            e_lte         =  18, e_ne          =  19, e_gte         =  20,$/;"	e	enum:exprtk::lexer::token::token_type
e_gte	extern_libs/exprtk.h	/^         e_gte     , e_gt      , e_and     , e_nand    ,$/;"	e	enum:exprtk::details::operator_type
e_helper	extern_libs/exprtk.h	/^         e_helper  = 7,$/;"	e	enum:exprtk::parser_error::error_mode
e_hold	extern_libs/exprtk.h	/^            e_hold    = 0,$/;"	e	enum:exprtk::lexer::parser_helper::token_advance_mode
e_hypot	extern_libs/exprtk.h	/^         e_d2g     , e_g2d     , e_hypot   , e_notl    ,$/;"	e	enum:exprtk::details::operator_type
e_iclamp	extern_libs/exprtk.h	/^         e_tanh    , e_cot     , e_clamp   , e_iclamp  ,$/;"	e	enum:exprtk::details::operator_type
e_ilike	extern_libs/exprtk.h	/^            e_in            , e_like          , e_ilike       , e_inranges     ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ilike	extern_libs/exprtk.h	/^         e_like    , e_ilike   , e_multi   , e_smulti  ,$/;"	e	enum:exprtk::details::operator_type
e_in	extern_libs/exprtk.h	/^            e_in            , e_like          , e_ilike       , e_inranges     ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_in	extern_libs/exprtk.h	/^         e_mulass  , e_divass  , e_modass  , e_in      ,$/;"	e	enum:exprtk::details::operator_type
e_ineq_eq	extern_libs/exprtk.h	/^            e_ineq_lt   , e_ineq_lte, e_ineq_eq    ,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_equal	extern_libs/exprtk.h	/^            e_ineq_equal, e_ineq_ne , e_ineq_nequal,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_gt	extern_libs/exprtk.h	/^            e_ineq_gte  , e_ineq_gt$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_gte	extern_libs/exprtk.h	/^            e_ineq_gte  , e_ineq_gt$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_lt	extern_libs/exprtk.h	/^            e_ineq_lt   , e_ineq_lte, e_ineq_eq    ,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_lte	extern_libs/exprtk.h	/^            e_ineq_lt   , e_ineq_lte, e_ineq_eq    ,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_ne	extern_libs/exprtk.h	/^            e_ineq_equal, e_ineq_ne , e_ineq_nequal,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_nequal	extern_libs/exprtk.h	/^            e_ineq_equal, e_ineq_ne , e_ineq_nequal,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_unknown	extern_libs/exprtk.h	/^            e_ineq_unknown = 0,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_inrange	extern_libs/exprtk.h	/^         e_inrange , e_sgn     , e_r2d     , e_d2r     ,$/;"	e	enum:exprtk::details::operator_type
e_inranges	extern_libs/exprtk.h	/^            e_in            , e_like          , e_ilike       , e_inranges     ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_invalid	extern_libs/exprtk.h	/^         e_invalid           = 0,$/;"	e	enum:exprtk::loop_runtime_check::loop_types
e_ipow	extern_libs/exprtk.h	/^            e_ipow          , e_ipowinv       , e_abs         , e_acos         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ipowinv	extern_libs/exprtk.h	/^            e_ipow          , e_ipowinv       , e_abs         , e_acos         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_iteration_count	extern_libs/exprtk.h	/^          e_iteration_count = 1,$/;"	e	enum:exprtk::loop_runtime_check::violation_type
e_joiner	extern_libs/exprtk.h	/^            e_joiner               =    2,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_lbracket	extern_libs/exprtk.h	/^            e_eq          = '=', e_rbracket    = ')', e_lbracket    = '(',$/;"	e	enum:exprtk::lexer::token::token_type
e_lcrlbracket	extern_libs/exprtk.h	/^            e_lcrlbracket = '{', e_comma       = ',', e_add         = '+',$/;"	e	enum:exprtk::lexer::token::token_type
e_level00	extern_libs/exprtk.h	/^         e_level00, e_level01, e_level02, e_level03, e_level04,$/;"	e	enum:exprtk::parser::precedence_level
e_level01	extern_libs/exprtk.h	/^         e_level00, e_level01, e_level02, e_level03, e_level04,$/;"	e	enum:exprtk::parser::precedence_level
e_level02	extern_libs/exprtk.h	/^         e_level00, e_level01, e_level02, e_level03, e_level04,$/;"	e	enum:exprtk::parser::precedence_level
e_level03	extern_libs/exprtk.h	/^         e_level00, e_level01, e_level02, e_level03, e_level04,$/;"	e	enum:exprtk::parser::precedence_level
e_level04	extern_libs/exprtk.h	/^         e_level00, e_level01, e_level02, e_level03, e_level04,$/;"	e	enum:exprtk::parser::precedence_level
e_level05	extern_libs/exprtk.h	/^         e_level05, e_level06, e_level07, e_level08, e_level09,$/;"	e	enum:exprtk::parser::precedence_level
e_level06	extern_libs/exprtk.h	/^         e_level05, e_level06, e_level07, e_level08, e_level09,$/;"	e	enum:exprtk::parser::precedence_level
e_level07	extern_libs/exprtk.h	/^         e_level05, e_level06, e_level07, e_level08, e_level09,$/;"	e	enum:exprtk::parser::precedence_level
e_level08	extern_libs/exprtk.h	/^         e_level05, e_level06, e_level07, e_level08, e_level09,$/;"	e	enum:exprtk::parser::precedence_level
e_level09	extern_libs/exprtk.h	/^         e_level05, e_level06, e_level07, e_level08, e_level09,$/;"	e	enum:exprtk::parser::precedence_level
e_level10	extern_libs/exprtk.h	/^         e_level10, e_level11, e_level12, e_level13, e_level14$/;"	e	enum:exprtk::parser::precedence_level
e_level11	extern_libs/exprtk.h	/^         e_level10, e_level11, e_level12, e_level13, e_level14$/;"	e	enum:exprtk::parser::precedence_level
e_level12	extern_libs/exprtk.h	/^         e_level10, e_level11, e_level12, e_level13, e_level14$/;"	e	enum:exprtk::parser::precedence_level
e_level13	extern_libs/exprtk.h	/^         e_level10, e_level11, e_level12, e_level13, e_level14$/;"	e	enum:exprtk::parser::precedence_level
e_level14	extern_libs/exprtk.h	/^         e_level10, e_level11, e_level12, e_level13, e_level14$/;"	e	enum:exprtk::parser::precedence_level
e_lexer	extern_libs/exprtk.h	/^         e_lexer   = 6,$/;"	e	enum:exprtk::parser_error::error_mode
e_like	extern_libs/exprtk.h	/^            e_in            , e_like          , e_ilike       , e_inranges     ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_like	extern_libs/exprtk.h	/^         e_like    , e_ilike   , e_multi   , e_smulti  ,$/;"	e	enum:exprtk::details::operator_type
e_log	extern_libs/exprtk.h	/^            e_exp           , e_expm1         , e_floor       , e_log          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_log	extern_libs/exprtk.h	/^         e_exp     , e_expm1   , e_floor   , e_log     ,$/;"	e	enum:exprtk::details::operator_type
e_log10	extern_libs/exprtk.h	/^            e_log10         , e_log2          , e_log1p       , e_neg          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_log10	extern_libs/exprtk.h	/^         e_log10   , e_log2    , e_log1p   , e_logn    ,$/;"	e	enum:exprtk::details::operator_type
e_log1p	extern_libs/exprtk.h	/^            e_log10         , e_log2          , e_log1p       , e_neg          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_log1p	extern_libs/exprtk.h	/^         e_log10   , e_log2    , e_log1p   , e_logn    ,$/;"	e	enum:exprtk::details::operator_type
e_log2	extern_libs/exprtk.h	/^            e_log10         , e_log2          , e_log1p       , e_neg          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_log2	extern_libs/exprtk.h	/^         e_log10   , e_log2    , e_log1p   , e_logn    ,$/;"	e	enum:exprtk::details::operator_type
e_logic_and	extern_libs/exprtk.h	/^            e_logic_and, e_logic_nand , e_logic_nor ,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_nand	extern_libs/exprtk.h	/^            e_logic_and, e_logic_nand , e_logic_nor ,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_nor	extern_libs/exprtk.h	/^            e_logic_and, e_logic_nand , e_logic_nor ,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_not	extern_libs/exprtk.h	/^            e_logic_not, e_logic_or   , e_logic_xnor,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_or	extern_libs/exprtk.h	/^            e_logic_not, e_logic_or   , e_logic_xnor,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_scand	extern_libs/exprtk.h	/^            e_logic_xor, e_logic_scand, e_logic_scor$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_scor	extern_libs/exprtk.h	/^            e_logic_xor, e_logic_scand, e_logic_scor$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_unknown	extern_libs/exprtk.h	/^            e_logic_unknown = 0,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_xnor	extern_libs/exprtk.h	/^            e_logic_not, e_logic_or   , e_logic_xnor,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_xor	extern_libs/exprtk.h	/^            e_logic_xor, e_logic_scand, e_logic_scor$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logn	extern_libs/exprtk.h	/^         e_log10   , e_log2    , e_log1p   , e_logn    ,$/;"	e	enum:exprtk::details::operator_type
e_lsqrbracket	extern_libs/exprtk.h	/^            e_rsqrbracket = ']', e_lsqrbracket = '[', e_rcrlbracket = '}',$/;"	e	enum:exprtk::lexer::token::token_type
e_lt	extern_libs/exprtk.h	/^            e_lt            , e_lte           , e_gt          , e_gte          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_lt	extern_libs/exprtk.h	/^            e_swap        =  21, e_lt          = '<', e_gt          = '>',$/;"	e	enum:exprtk::lexer::token::token_type
e_lt	extern_libs/exprtk.h	/^         e_sum     , e_prod    , e_lt      , e_lte     ,$/;"	e	enum:exprtk::details::operator_type
e_lte	extern_libs/exprtk.h	/^            e_lt            , e_lte           , e_gt          , e_gte          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_lte	extern_libs/exprtk.h	/^            e_lte         =  18, e_ne          =  19, e_gte         =  20,$/;"	e	enum:exprtk::lexer::token::token_type
e_lte	extern_libs/exprtk.h	/^         e_sum     , e_prod    , e_lt      , e_lte     ,$/;"	e	enum:exprtk::details::operator_type
e_mand	extern_libs/exprtk.h	/^         e_mand    , e_mor     , e_scand   , e_scor    ,$/;"	e	enum:exprtk::details::operator_type
e_max	extern_libs/exprtk.h	/^         e_atan2   , e_min     , e_max     , e_avg     ,$/;"	e	enum:exprtk::details::operator_type
e_min	extern_libs/exprtk.h	/^         e_atan2   , e_min     , e_max     , e_avg     ,$/;"	e	enum:exprtk::details::operator_type
e_mod	extern_libs/exprtk.h	/^            e_mod         = '%', e_pow         = '^', e_colon       = ':',$/;"	e	enum:exprtk::lexer::token::token_type
e_mod	extern_libs/exprtk.h	/^            e_mul           , e_div           , e_mod         , e_pow          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_mod	extern_libs/exprtk.h	/^         e_mul     , e_div     , e_mod     , e_pow     ,$/;"	e	enum:exprtk::details::operator_type
e_modass	extern_libs/exprtk.h	/^            e_modass      =  15, e_shr         =  16, e_shl         =  17,$/;"	e	enum:exprtk::lexer::token::token_type
e_modass	extern_libs/exprtk.h	/^         e_mulass  , e_divass  , e_modass  , e_in      ,$/;"	e	enum:exprtk::details::operator_type
e_mor	extern_libs/exprtk.h	/^         e_mand    , e_mor     , e_scand   , e_scor    ,$/;"	e	enum:exprtk::details::operator_type
e_mswitch	extern_libs/exprtk.h	/^            e_for           , e_switch        , e_mswitch     , e_return       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_mul	extern_libs/exprtk.h	/^            e_mul           , e_div           , e_mod         , e_pow          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_mul	extern_libs/exprtk.h	/^            e_sub         = '-', e_div         = '\/', e_mul         = '*',$/;"	e	enum:exprtk::lexer::token::token_type
e_mul	extern_libs/exprtk.h	/^         e_mul     , e_div     , e_mod     , e_pow     ,$/;"	e	enum:exprtk::details::operator_type
e_mulass	extern_libs/exprtk.h	/^            e_subass      =  12, e_mulass      =  13, e_divass      =  14,$/;"	e	enum:exprtk::lexer::token::token_type
e_mulass	extern_libs/exprtk.h	/^         e_mulass  , e_divass  , e_modass  , e_in      ,$/;"	e	enum:exprtk::details::operator_type
e_multi	extern_libs/exprtk.h	/^         e_like    , e_ilike   , e_multi   , e_smulti  ,$/;"	e	enum:exprtk::details::operator_type
e_nand	extern_libs/exprtk.h	/^            e_eq            , e_ne            , e_and         , e_nand         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_nand	extern_libs/exprtk.h	/^         e_gte     , e_gt      , e_and     , e_nand    ,$/;"	e	enum:exprtk::details::operator_type
e_ncdf	extern_libs/exprtk.h	/^            e_sgn           , e_erf           , e_erfc        , e_ncdf         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ncdf	extern_libs/exprtk.h	/^         e_erf     , e_erfc    , e_ncdf    , e_frac    ,$/;"	e	enum:exprtk::details::operator_type
e_ne	extern_libs/exprtk.h	/^            e_eq            , e_ne            , e_and         , e_nand         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ne	extern_libs/exprtk.h	/^            e_lte         =  18, e_ne          =  19, e_gte         =  20,$/;"	e	enum:exprtk::lexer::token::token_type
e_ne	extern_libs/exprtk.h	/^         e_eq      , e_equal   , e_ne      , e_nequal  ,$/;"	e	enum:exprtk::details::operator_type
e_neg	extern_libs/exprtk.h	/^            e_log10         , e_log2          , e_log1p       , e_neg          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_neg	extern_libs/exprtk.h	/^         e_neg     , e_pos     , e_round   , e_roundn  ,$/;"	e	enum:exprtk::details::operator_type
e_nequal	extern_libs/exprtk.h	/^         e_eq      , e_equal   , e_ne      , e_nequal  ,$/;"	e	enum:exprtk::details::operator_type
e_none	extern_libs/exprtk.h	/^            e_none          , e_null          , e_constant    , e_unary        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_none	extern_libs/exprtk.h	/^            e_none        =   0, e_error       =   1, e_err_symbol  =   2,$/;"	e	enum:exprtk::lexer::token::token_type
e_none	extern_libs/exprtk.h	/^            e_none    ,$/;"	e	enum:exprtk::parser::scope_element::element_type
e_nor	extern_libs/exprtk.h	/^            e_or            , e_nor           , e_xor         , e_xnor         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_nor	extern_libs/exprtk.h	/^         e_or      , e_nor     , e_xor     , e_xnor    ,$/;"	e	enum:exprtk::details::operator_type
e_notl	extern_libs/exprtk.h	/^            e_d2r           , e_d2g           , e_g2d         , e_notl         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_notl	extern_libs/exprtk.h	/^         e_d2g     , e_g2d     , e_hypot   , e_notl    ,$/;"	e	enum:exprtk::details::operator_type
e_null	extern_libs/exprtk.h	/^            e_none          , e_null          , e_constant    , e_unary        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_null	extern_libs/exprtk.h	/^         e_default , e_null    , e_add     , e_sub     ,$/;"	e	enum:exprtk::details::operator_type
e_nulleq	extern_libs/exprtk.h	/^            e_sf3ext        , e_sf4ext        , e_nulleq      , e_strass       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_number	extern_libs/exprtk.h	/^            e_eof         =   6, e_number      =   7, e_symbol      =   8,$/;"	e	enum:exprtk::lexer::token::token_type
e_numeric	extern_libs/exprtk.h	/^         e_numeric = 4,$/;"	e	enum:exprtk::parser_error::error_mode
e_numeric_check	extern_libs/exprtk.h	/^            e_numeric_check        =    4,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_or	extern_libs/exprtk.h	/^            e_or            , e_nor           , e_xor         , e_xnor         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_or	extern_libs/exprtk.h	/^         e_or      , e_nor     , e_xor     , e_xnor    ,$/;"	e	enum:exprtk::details::operator_type
e_parser	extern_libs/exprtk.h	/^         e_parser  = 8$/;"	e	enum:exprtk::parser_error::error_mode
e_pos	extern_libs/exprtk.h	/^            e_pos           , e_round         , e_sin         , e_sinc         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_pos	extern_libs/exprtk.h	/^         e_neg     , e_pos     , e_round   , e_roundn  ,$/;"	e	enum:exprtk::details::operator_type
e_pow	extern_libs/exprtk.h	/^            e_mod         = '%', e_pow         = '^', e_colon       = ':',$/;"	e	enum:exprtk::lexer::token::token_type
e_pow	extern_libs/exprtk.h	/^            e_mul           , e_div           , e_mod         , e_pow          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_pow	extern_libs/exprtk.h	/^         e_mul     , e_div     , e_mod     , e_pow     ,$/;"	e	enum:exprtk::details::operator_type
e_prod	extern_libs/exprtk.h	/^         e_sum     , e_prod    , e_lt      , e_lte     ,$/;"	e	enum:exprtk::details::operator_type
e_quaternary	extern_libs/exprtk.h	/^            e_binary        , e_binary_ext    , e_trinary     , e_quaternary   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_r2d	extern_libs/exprtk.h	/^            e_cot           , e_sec           , e_csc         , e_r2d          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_r2d	extern_libs/exprtk.h	/^         e_inrange , e_sgn     , e_r2d     , e_d2r     ,$/;"	e	enum:exprtk::details::operator_type
e_rbracket	extern_libs/exprtk.h	/^            e_eq          = '=', e_rbracket    = ')', e_lbracket    = '(',$/;"	e	enum:exprtk::lexer::token::token_type
e_rbveccelem	extern_libs/exprtk.h	/^            e_vector        , e_vecelem       , e_rbvecelem   , e_rbveccelem   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_rbvecelem	extern_libs/exprtk.h	/^            e_vector        , e_vecelem       , e_rbvecelem   , e_rbveccelem   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_rcrlbracket	extern_libs/exprtk.h	/^            e_rsqrbracket = ']', e_lsqrbracket = '[', e_rcrlbracket = '}',$/;"	e	enum:exprtk::lexer::token::token_type
e_rdwrt	extern_libs/exprtk.h	/^         e_rdwrt = 4$/;"	e	enum:exprtk::rtl::io::file::details::file_mode
e_read	extern_libs/exprtk.h	/^         e_read  = 1,$/;"	e	enum:exprtk::rtl::io::file::details::file_mode
e_repeat	extern_libs/exprtk.h	/^            e_vararg        , e_conditional   , e_while       , e_repeat       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_repeat_until_loop	extern_libs/exprtk.h	/^         e_repeat_until_loop = 4,$/;"	e	enum:exprtk::loop_runtime_check::loop_types
e_replacer	extern_libs/exprtk.h	/^            e_replacer             =    1,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_retenv	extern_libs/exprtk.h	/^            e_retenv        , e_variable      , e_stringvar   , e_stringconst  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_return	extern_libs/exprtk.h	/^            e_for           , e_switch        , e_mswitch     , e_return       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_root	extern_libs/exprtk.h	/^         e_root    , e_sqrt    , e_sin     , e_sinc    ,$/;"	e	enum:exprtk::details::operator_type
e_round	extern_libs/exprtk.h	/^            e_pos           , e_round         , e_sin         , e_sinc         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_round	extern_libs/exprtk.h	/^         e_neg     , e_pos     , e_round   , e_roundn  ,$/;"	e	enum:exprtk::details::operator_type
e_roundn	extern_libs/exprtk.h	/^         e_neg     , e_pos     , e_round   , e_roundn  ,$/;"	e	enum:exprtk::details::operator_type
e_rsqrbracket	extern_libs/exprtk.h	/^            e_rsqrbracket = ']', e_lsqrbracket = '[', e_rcrlbracket = '}',$/;"	e	enum:exprtk::lexer::token::token_type
e_rtrn_overload	extern_libs/exprtk.h	/^         e_rtrn_overload = 2$/;"	e	enum:exprtk::igeneric_function::return_type
e_rtrn_scalar	extern_libs/exprtk.h	/^         e_rtrn_scalar   = 0,$/;"	e	enum:exprtk::igeneric_function::return_type
e_rtrn_string	extern_libs/exprtk.h	/^         e_rtrn_string   = 1,$/;"	e	enum:exprtk::igeneric_function::return_type
e_scalar	extern_libs/exprtk.h	/^         e_scalar ,$/;"	e	enum:exprtk::type_store::store_type
e_scand	extern_libs/exprtk.h	/^         e_mand    , e_mor     , e_scand   , e_scor    ,$/;"	e	enum:exprtk::details::operator_type
e_scor	extern_libs/exprtk.h	/^         e_mand    , e_mor     , e_scand   , e_scor    ,$/;"	e	enum:exprtk::details::operator_type
e_sec	extern_libs/exprtk.h	/^            e_cot           , e_sec           , e_csc         , e_r2d          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sec	extern_libs/exprtk.h	/^         e_sinh    , e_sec     , e_csc     , e_tan     ,$/;"	e	enum:exprtk::details::operator_type
e_sequence_check	extern_libs/exprtk.h	/^            e_sequence_check       =   16,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_sf00	extern_libs/exprtk.h	/^         e_sf00 = 1000, e_sf01 = 1001, e_sf02 = 1002, e_sf03 = 1003,$/;"	e	enum:exprtk::details::operator_type
e_sf01	extern_libs/exprtk.h	/^         e_sf00 = 1000, e_sf01 = 1001, e_sf02 = 1002, e_sf03 = 1003,$/;"	e	enum:exprtk::details::operator_type
e_sf02	extern_libs/exprtk.h	/^         e_sf00 = 1000, e_sf01 = 1001, e_sf02 = 1002, e_sf03 = 1003,$/;"	e	enum:exprtk::details::operator_type
e_sf03	extern_libs/exprtk.h	/^         e_sf00 = 1000, e_sf01 = 1001, e_sf02 = 1002, e_sf03 = 1003,$/;"	e	enum:exprtk::details::operator_type
e_sf04	extern_libs/exprtk.h	/^         e_sf04 = 1004, e_sf05 = 1005, e_sf06 = 1006, e_sf07 = 1007,$/;"	e	enum:exprtk::details::operator_type
e_sf05	extern_libs/exprtk.h	/^         e_sf04 = 1004, e_sf05 = 1005, e_sf06 = 1006, e_sf07 = 1007,$/;"	e	enum:exprtk::details::operator_type
e_sf06	extern_libs/exprtk.h	/^         e_sf04 = 1004, e_sf05 = 1005, e_sf06 = 1006, e_sf07 = 1007,$/;"	e	enum:exprtk::details::operator_type
e_sf07	extern_libs/exprtk.h	/^         e_sf04 = 1004, e_sf05 = 1005, e_sf06 = 1006, e_sf07 = 1007,$/;"	e	enum:exprtk::details::operator_type
e_sf08	extern_libs/exprtk.h	/^         e_sf08 = 1008, e_sf09 = 1009, e_sf10 = 1010, e_sf11 = 1011,$/;"	e	enum:exprtk::details::operator_type
e_sf09	extern_libs/exprtk.h	/^         e_sf08 = 1008, e_sf09 = 1009, e_sf10 = 1010, e_sf11 = 1011,$/;"	e	enum:exprtk::details::operator_type
e_sf10	extern_libs/exprtk.h	/^         e_sf08 = 1008, e_sf09 = 1009, e_sf10 = 1010, e_sf11 = 1011,$/;"	e	enum:exprtk::details::operator_type
e_sf11	extern_libs/exprtk.h	/^         e_sf08 = 1008, e_sf09 = 1009, e_sf10 = 1010, e_sf11 = 1011,$/;"	e	enum:exprtk::details::operator_type
e_sf12	extern_libs/exprtk.h	/^         e_sf12 = 1012, e_sf13 = 1013, e_sf14 = 1014, e_sf15 = 1015,$/;"	e	enum:exprtk::details::operator_type
e_sf13	extern_libs/exprtk.h	/^         e_sf12 = 1012, e_sf13 = 1013, e_sf14 = 1014, e_sf15 = 1015,$/;"	e	enum:exprtk::details::operator_type
e_sf14	extern_libs/exprtk.h	/^         e_sf12 = 1012, e_sf13 = 1013, e_sf14 = 1014, e_sf15 = 1015,$/;"	e	enum:exprtk::details::operator_type
e_sf15	extern_libs/exprtk.h	/^         e_sf12 = 1012, e_sf13 = 1013, e_sf14 = 1014, e_sf15 = 1015,$/;"	e	enum:exprtk::details::operator_type
e_sf16	extern_libs/exprtk.h	/^         e_sf16 = 1016, e_sf17 = 1017, e_sf18 = 1018, e_sf19 = 1019,$/;"	e	enum:exprtk::details::operator_type
e_sf17	extern_libs/exprtk.h	/^         e_sf16 = 1016, e_sf17 = 1017, e_sf18 = 1018, e_sf19 = 1019,$/;"	e	enum:exprtk::details::operator_type
e_sf18	extern_libs/exprtk.h	/^         e_sf16 = 1016, e_sf17 = 1017, e_sf18 = 1018, e_sf19 = 1019,$/;"	e	enum:exprtk::details::operator_type
e_sf19	extern_libs/exprtk.h	/^         e_sf16 = 1016, e_sf17 = 1017, e_sf18 = 1018, e_sf19 = 1019,$/;"	e	enum:exprtk::details::operator_type
e_sf20	extern_libs/exprtk.h	/^         e_sf20 = 1020, e_sf21 = 1021, e_sf22 = 1022, e_sf23 = 1023,$/;"	e	enum:exprtk::details::operator_type
e_sf21	extern_libs/exprtk.h	/^         e_sf20 = 1020, e_sf21 = 1021, e_sf22 = 1022, e_sf23 = 1023,$/;"	e	enum:exprtk::details::operator_type
e_sf22	extern_libs/exprtk.h	/^         e_sf20 = 1020, e_sf21 = 1021, e_sf22 = 1022, e_sf23 = 1023,$/;"	e	enum:exprtk::details::operator_type
e_sf23	extern_libs/exprtk.h	/^         e_sf20 = 1020, e_sf21 = 1021, e_sf22 = 1022, e_sf23 = 1023,$/;"	e	enum:exprtk::details::operator_type
e_sf24	extern_libs/exprtk.h	/^         e_sf24 = 1024, e_sf25 = 1025, e_sf26 = 1026, e_sf27 = 1027,$/;"	e	enum:exprtk::details::operator_type
e_sf25	extern_libs/exprtk.h	/^         e_sf24 = 1024, e_sf25 = 1025, e_sf26 = 1026, e_sf27 = 1027,$/;"	e	enum:exprtk::details::operator_type
e_sf26	extern_libs/exprtk.h	/^         e_sf24 = 1024, e_sf25 = 1025, e_sf26 = 1026, e_sf27 = 1027,$/;"	e	enum:exprtk::details::operator_type
e_sf27	extern_libs/exprtk.h	/^         e_sf24 = 1024, e_sf25 = 1025, e_sf26 = 1026, e_sf27 = 1027,$/;"	e	enum:exprtk::details::operator_type
e_sf28	extern_libs/exprtk.h	/^         e_sf28 = 1028, e_sf29 = 1029, e_sf30 = 1030, e_sf31 = 1031,$/;"	e	enum:exprtk::details::operator_type
e_sf29	extern_libs/exprtk.h	/^         e_sf28 = 1028, e_sf29 = 1029, e_sf30 = 1030, e_sf31 = 1031,$/;"	e	enum:exprtk::details::operator_type
e_sf30	extern_libs/exprtk.h	/^         e_sf28 = 1028, e_sf29 = 1029, e_sf30 = 1030, e_sf31 = 1031,$/;"	e	enum:exprtk::details::operator_type
e_sf31	extern_libs/exprtk.h	/^         e_sf28 = 1028, e_sf29 = 1029, e_sf30 = 1030, e_sf31 = 1031,$/;"	e	enum:exprtk::details::operator_type
e_sf32	extern_libs/exprtk.h	/^         e_sf32 = 1032, e_sf33 = 1033, e_sf34 = 1034, e_sf35 = 1035,$/;"	e	enum:exprtk::details::operator_type
e_sf33	extern_libs/exprtk.h	/^         e_sf32 = 1032, e_sf33 = 1033, e_sf34 = 1034, e_sf35 = 1035,$/;"	e	enum:exprtk::details::operator_type
e_sf34	extern_libs/exprtk.h	/^         e_sf32 = 1032, e_sf33 = 1033, e_sf34 = 1034, e_sf35 = 1035,$/;"	e	enum:exprtk::details::operator_type
e_sf35	extern_libs/exprtk.h	/^         e_sf32 = 1032, e_sf33 = 1033, e_sf34 = 1034, e_sf35 = 1035,$/;"	e	enum:exprtk::details::operator_type
e_sf36	extern_libs/exprtk.h	/^         e_sf36 = 1036, e_sf37 = 1037, e_sf38 = 1038, e_sf39 = 1039,$/;"	e	enum:exprtk::details::operator_type
e_sf37	extern_libs/exprtk.h	/^         e_sf36 = 1036, e_sf37 = 1037, e_sf38 = 1038, e_sf39 = 1039,$/;"	e	enum:exprtk::details::operator_type
e_sf38	extern_libs/exprtk.h	/^         e_sf36 = 1036, e_sf37 = 1037, e_sf38 = 1038, e_sf39 = 1039,$/;"	e	enum:exprtk::details::operator_type
e_sf39	extern_libs/exprtk.h	/^         e_sf36 = 1036, e_sf37 = 1037, e_sf38 = 1038, e_sf39 = 1039,$/;"	e	enum:exprtk::details::operator_type
e_sf3ext	extern_libs/exprtk.h	/^            e_sf3ext        , e_sf4ext        , e_nulleq      , e_strass       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sf40	extern_libs/exprtk.h	/^         e_sf40 = 1040, e_sf41 = 1041, e_sf42 = 1042, e_sf43 = 1043,$/;"	e	enum:exprtk::details::operator_type
e_sf41	extern_libs/exprtk.h	/^         e_sf40 = 1040, e_sf41 = 1041, e_sf42 = 1042, e_sf43 = 1043,$/;"	e	enum:exprtk::details::operator_type
e_sf42	extern_libs/exprtk.h	/^         e_sf40 = 1040, e_sf41 = 1041, e_sf42 = 1042, e_sf43 = 1043,$/;"	e	enum:exprtk::details::operator_type
e_sf43	extern_libs/exprtk.h	/^         e_sf40 = 1040, e_sf41 = 1041, e_sf42 = 1042, e_sf43 = 1043,$/;"	e	enum:exprtk::details::operator_type
e_sf44	extern_libs/exprtk.h	/^         e_sf44 = 1044, e_sf45 = 1045, e_sf46 = 1046, e_sf47 = 1047,$/;"	e	enum:exprtk::details::operator_type
e_sf45	extern_libs/exprtk.h	/^         e_sf44 = 1044, e_sf45 = 1045, e_sf46 = 1046, e_sf47 = 1047,$/;"	e	enum:exprtk::details::operator_type
e_sf46	extern_libs/exprtk.h	/^         e_sf44 = 1044, e_sf45 = 1045, e_sf46 = 1046, e_sf47 = 1047,$/;"	e	enum:exprtk::details::operator_type
e_sf47	extern_libs/exprtk.h	/^         e_sf44 = 1044, e_sf45 = 1045, e_sf46 = 1046, e_sf47 = 1047,$/;"	e	enum:exprtk::details::operator_type
e_sf48	extern_libs/exprtk.h	/^         e_sf48 = 1048, e_sf49 = 1049, e_sf50 = 1050, e_sf51 = 1051,$/;"	e	enum:exprtk::details::operator_type
e_sf49	extern_libs/exprtk.h	/^         e_sf48 = 1048, e_sf49 = 1049, e_sf50 = 1050, e_sf51 = 1051,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext	extern_libs/exprtk.h	/^            e_sf3ext        , e_sf4ext        , e_nulleq      , e_strass       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sf4ext00	extern_libs/exprtk.h	/^         e_sf4ext00 = 2000, e_sf4ext01 = 2001, e_sf4ext02 = 2002, e_sf4ext03 = 2003,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext01	extern_libs/exprtk.h	/^         e_sf4ext00 = 2000, e_sf4ext01 = 2001, e_sf4ext02 = 2002, e_sf4ext03 = 2003,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext02	extern_libs/exprtk.h	/^         e_sf4ext00 = 2000, e_sf4ext01 = 2001, e_sf4ext02 = 2002, e_sf4ext03 = 2003,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext03	extern_libs/exprtk.h	/^         e_sf4ext00 = 2000, e_sf4ext01 = 2001, e_sf4ext02 = 2002, e_sf4ext03 = 2003,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext04	extern_libs/exprtk.h	/^         e_sf4ext04 = 2004, e_sf4ext05 = 2005, e_sf4ext06 = 2006, e_sf4ext07 = 2007,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext05	extern_libs/exprtk.h	/^         e_sf4ext04 = 2004, e_sf4ext05 = 2005, e_sf4ext06 = 2006, e_sf4ext07 = 2007,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext06	extern_libs/exprtk.h	/^         e_sf4ext04 = 2004, e_sf4ext05 = 2005, e_sf4ext06 = 2006, e_sf4ext07 = 2007,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext07	extern_libs/exprtk.h	/^         e_sf4ext04 = 2004, e_sf4ext05 = 2005, e_sf4ext06 = 2006, e_sf4ext07 = 2007,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext08	extern_libs/exprtk.h	/^         e_sf4ext08 = 2008, e_sf4ext09 = 2009, e_sf4ext10 = 2010, e_sf4ext11 = 2011,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext09	extern_libs/exprtk.h	/^         e_sf4ext08 = 2008, e_sf4ext09 = 2009, e_sf4ext10 = 2010, e_sf4ext11 = 2011,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext10	extern_libs/exprtk.h	/^         e_sf4ext08 = 2008, e_sf4ext09 = 2009, e_sf4ext10 = 2010, e_sf4ext11 = 2011,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext11	extern_libs/exprtk.h	/^         e_sf4ext08 = 2008, e_sf4ext09 = 2009, e_sf4ext10 = 2010, e_sf4ext11 = 2011,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext12	extern_libs/exprtk.h	/^         e_sf4ext12 = 2012, e_sf4ext13 = 2013, e_sf4ext14 = 2014, e_sf4ext15 = 2015,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext13	extern_libs/exprtk.h	/^         e_sf4ext12 = 2012, e_sf4ext13 = 2013, e_sf4ext14 = 2014, e_sf4ext15 = 2015,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext14	extern_libs/exprtk.h	/^         e_sf4ext12 = 2012, e_sf4ext13 = 2013, e_sf4ext14 = 2014, e_sf4ext15 = 2015,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext15	extern_libs/exprtk.h	/^         e_sf4ext12 = 2012, e_sf4ext13 = 2013, e_sf4ext14 = 2014, e_sf4ext15 = 2015,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext16	extern_libs/exprtk.h	/^         e_sf4ext16 = 2016, e_sf4ext17 = 2017, e_sf4ext18 = 2018, e_sf4ext19 = 2019,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext17	extern_libs/exprtk.h	/^         e_sf4ext16 = 2016, e_sf4ext17 = 2017, e_sf4ext18 = 2018, e_sf4ext19 = 2019,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext18	extern_libs/exprtk.h	/^         e_sf4ext16 = 2016, e_sf4ext17 = 2017, e_sf4ext18 = 2018, e_sf4ext19 = 2019,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext19	extern_libs/exprtk.h	/^         e_sf4ext16 = 2016, e_sf4ext17 = 2017, e_sf4ext18 = 2018, e_sf4ext19 = 2019,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext20	extern_libs/exprtk.h	/^         e_sf4ext20 = 2020, e_sf4ext21 = 2021, e_sf4ext22 = 2022, e_sf4ext23 = 2023,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext21	extern_libs/exprtk.h	/^         e_sf4ext20 = 2020, e_sf4ext21 = 2021, e_sf4ext22 = 2022, e_sf4ext23 = 2023,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext22	extern_libs/exprtk.h	/^         e_sf4ext20 = 2020, e_sf4ext21 = 2021, e_sf4ext22 = 2022, e_sf4ext23 = 2023,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext23	extern_libs/exprtk.h	/^         e_sf4ext20 = 2020, e_sf4ext21 = 2021, e_sf4ext22 = 2022, e_sf4ext23 = 2023,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext24	extern_libs/exprtk.h	/^         e_sf4ext24 = 2024, e_sf4ext25 = 2025, e_sf4ext26 = 2026, e_sf4ext27 = 2027,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext25	extern_libs/exprtk.h	/^         e_sf4ext24 = 2024, e_sf4ext25 = 2025, e_sf4ext26 = 2026, e_sf4ext27 = 2027,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext26	extern_libs/exprtk.h	/^         e_sf4ext24 = 2024, e_sf4ext25 = 2025, e_sf4ext26 = 2026, e_sf4ext27 = 2027,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext27	extern_libs/exprtk.h	/^         e_sf4ext24 = 2024, e_sf4ext25 = 2025, e_sf4ext26 = 2026, e_sf4ext27 = 2027,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext28	extern_libs/exprtk.h	/^         e_sf4ext28 = 2028, e_sf4ext29 = 2029, e_sf4ext30 = 2030, e_sf4ext31 = 2031,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext29	extern_libs/exprtk.h	/^         e_sf4ext28 = 2028, e_sf4ext29 = 2029, e_sf4ext30 = 2030, e_sf4ext31 = 2031,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext30	extern_libs/exprtk.h	/^         e_sf4ext28 = 2028, e_sf4ext29 = 2029, e_sf4ext30 = 2030, e_sf4ext31 = 2031,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext31	extern_libs/exprtk.h	/^         e_sf4ext28 = 2028, e_sf4ext29 = 2029, e_sf4ext30 = 2030, e_sf4ext31 = 2031,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext32	extern_libs/exprtk.h	/^         e_sf4ext32 = 2032, e_sf4ext33 = 2033, e_sf4ext34 = 2034, e_sf4ext35 = 2035,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext33	extern_libs/exprtk.h	/^         e_sf4ext32 = 2032, e_sf4ext33 = 2033, e_sf4ext34 = 2034, e_sf4ext35 = 2035,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext34	extern_libs/exprtk.h	/^         e_sf4ext32 = 2032, e_sf4ext33 = 2033, e_sf4ext34 = 2034, e_sf4ext35 = 2035,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext35	extern_libs/exprtk.h	/^         e_sf4ext32 = 2032, e_sf4ext33 = 2033, e_sf4ext34 = 2034, e_sf4ext35 = 2035,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext36	extern_libs/exprtk.h	/^         e_sf4ext36 = 2036, e_sf4ext37 = 2037, e_sf4ext38 = 2038, e_sf4ext39 = 2039,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext37	extern_libs/exprtk.h	/^         e_sf4ext36 = 2036, e_sf4ext37 = 2037, e_sf4ext38 = 2038, e_sf4ext39 = 2039,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext38	extern_libs/exprtk.h	/^         e_sf4ext36 = 2036, e_sf4ext37 = 2037, e_sf4ext38 = 2038, e_sf4ext39 = 2039,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext39	extern_libs/exprtk.h	/^         e_sf4ext36 = 2036, e_sf4ext37 = 2037, e_sf4ext38 = 2038, e_sf4ext39 = 2039,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext40	extern_libs/exprtk.h	/^         e_sf4ext40 = 2040, e_sf4ext41 = 2041, e_sf4ext42 = 2042, e_sf4ext43 = 2043,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext41	extern_libs/exprtk.h	/^         e_sf4ext40 = 2040, e_sf4ext41 = 2041, e_sf4ext42 = 2042, e_sf4ext43 = 2043,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext42	extern_libs/exprtk.h	/^         e_sf4ext40 = 2040, e_sf4ext41 = 2041, e_sf4ext42 = 2042, e_sf4ext43 = 2043,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext43	extern_libs/exprtk.h	/^         e_sf4ext40 = 2040, e_sf4ext41 = 2041, e_sf4ext42 = 2042, e_sf4ext43 = 2043,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext44	extern_libs/exprtk.h	/^         e_sf4ext44 = 2044, e_sf4ext45 = 2045, e_sf4ext46 = 2046, e_sf4ext47 = 2047,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext45	extern_libs/exprtk.h	/^         e_sf4ext44 = 2044, e_sf4ext45 = 2045, e_sf4ext46 = 2046, e_sf4ext47 = 2047,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext46	extern_libs/exprtk.h	/^         e_sf4ext44 = 2044, e_sf4ext45 = 2045, e_sf4ext46 = 2046, e_sf4ext47 = 2047,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext47	extern_libs/exprtk.h	/^         e_sf4ext44 = 2044, e_sf4ext45 = 2045, e_sf4ext46 = 2046, e_sf4ext47 = 2047,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext48	extern_libs/exprtk.h	/^         e_sf4ext48 = 2048, e_sf4ext49 = 2049, e_sf4ext50 = 2050, e_sf4ext51 = 2051,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext49	extern_libs/exprtk.h	/^         e_sf4ext48 = 2048, e_sf4ext49 = 2049, e_sf4ext50 = 2050, e_sf4ext51 = 2051,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext50	extern_libs/exprtk.h	/^         e_sf4ext48 = 2048, e_sf4ext49 = 2049, e_sf4ext50 = 2050, e_sf4ext51 = 2051,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext51	extern_libs/exprtk.h	/^         e_sf4ext48 = 2048, e_sf4ext49 = 2049, e_sf4ext50 = 2050, e_sf4ext51 = 2051,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext52	extern_libs/exprtk.h	/^         e_sf4ext52 = 2052, e_sf4ext53 = 2053, e_sf4ext54 = 2054, e_sf4ext55 = 2055,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext53	extern_libs/exprtk.h	/^         e_sf4ext52 = 2052, e_sf4ext53 = 2053, e_sf4ext54 = 2054, e_sf4ext55 = 2055,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext54	extern_libs/exprtk.h	/^         e_sf4ext52 = 2052, e_sf4ext53 = 2053, e_sf4ext54 = 2054, e_sf4ext55 = 2055,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext55	extern_libs/exprtk.h	/^         e_sf4ext52 = 2052, e_sf4ext53 = 2053, e_sf4ext54 = 2054, e_sf4ext55 = 2055,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext56	extern_libs/exprtk.h	/^         e_sf4ext56 = 2056, e_sf4ext57 = 2057, e_sf4ext58 = 2058, e_sf4ext59 = 2059,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext57	extern_libs/exprtk.h	/^         e_sf4ext56 = 2056, e_sf4ext57 = 2057, e_sf4ext58 = 2058, e_sf4ext59 = 2059,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext58	extern_libs/exprtk.h	/^         e_sf4ext56 = 2056, e_sf4ext57 = 2057, e_sf4ext58 = 2058, e_sf4ext59 = 2059,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext59	extern_libs/exprtk.h	/^         e_sf4ext56 = 2056, e_sf4ext57 = 2057, e_sf4ext58 = 2058, e_sf4ext59 = 2059,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext60	extern_libs/exprtk.h	/^         e_sf4ext60 = 2060, e_sf4ext61 = 2061$/;"	e	enum:exprtk::details::operator_type
e_sf4ext61	extern_libs/exprtk.h	/^         e_sf4ext60 = 2060, e_sf4ext61 = 2061$/;"	e	enum:exprtk::details::operator_type
e_sf50	extern_libs/exprtk.h	/^         e_sf48 = 1048, e_sf49 = 1049, e_sf50 = 1050, e_sf51 = 1051,$/;"	e	enum:exprtk::details::operator_type
e_sf51	extern_libs/exprtk.h	/^         e_sf48 = 1048, e_sf49 = 1049, e_sf50 = 1050, e_sf51 = 1051,$/;"	e	enum:exprtk::details::operator_type
e_sf52	extern_libs/exprtk.h	/^         e_sf52 = 1052, e_sf53 = 1053, e_sf54 = 1054, e_sf55 = 1055,$/;"	e	enum:exprtk::details::operator_type
e_sf53	extern_libs/exprtk.h	/^         e_sf52 = 1052, e_sf53 = 1053, e_sf54 = 1054, e_sf55 = 1055,$/;"	e	enum:exprtk::details::operator_type
e_sf54	extern_libs/exprtk.h	/^         e_sf52 = 1052, e_sf53 = 1053, e_sf54 = 1054, e_sf55 = 1055,$/;"	e	enum:exprtk::details::operator_type
e_sf55	extern_libs/exprtk.h	/^         e_sf52 = 1052, e_sf53 = 1053, e_sf54 = 1054, e_sf55 = 1055,$/;"	e	enum:exprtk::details::operator_type
e_sf56	extern_libs/exprtk.h	/^         e_sf56 = 1056, e_sf57 = 1057, e_sf58 = 1058, e_sf59 = 1059,$/;"	e	enum:exprtk::details::operator_type
e_sf57	extern_libs/exprtk.h	/^         e_sf56 = 1056, e_sf57 = 1057, e_sf58 = 1058, e_sf59 = 1059,$/;"	e	enum:exprtk::details::operator_type
e_sf58	extern_libs/exprtk.h	/^         e_sf56 = 1056, e_sf57 = 1057, e_sf58 = 1058, e_sf59 = 1059,$/;"	e	enum:exprtk::details::operator_type
e_sf59	extern_libs/exprtk.h	/^         e_sf56 = 1056, e_sf57 = 1057, e_sf58 = 1058, e_sf59 = 1059,$/;"	e	enum:exprtk::details::operator_type
e_sf60	extern_libs/exprtk.h	/^         e_sf60 = 1060, e_sf61 = 1061, e_sf62 = 1062, e_sf63 = 1063,$/;"	e	enum:exprtk::details::operator_type
e_sf61	extern_libs/exprtk.h	/^         e_sf60 = 1060, e_sf61 = 1061, e_sf62 = 1062, e_sf63 = 1063,$/;"	e	enum:exprtk::details::operator_type
e_sf62	extern_libs/exprtk.h	/^         e_sf60 = 1060, e_sf61 = 1061, e_sf62 = 1062, e_sf63 = 1063,$/;"	e	enum:exprtk::details::operator_type
e_sf63	extern_libs/exprtk.h	/^         e_sf60 = 1060, e_sf61 = 1061, e_sf62 = 1062, e_sf63 = 1063,$/;"	e	enum:exprtk::details::operator_type
e_sf64	extern_libs/exprtk.h	/^         e_sf64 = 1064, e_sf65 = 1065, e_sf66 = 1066, e_sf67 = 1067,$/;"	e	enum:exprtk::details::operator_type
e_sf65	extern_libs/exprtk.h	/^         e_sf64 = 1064, e_sf65 = 1065, e_sf66 = 1066, e_sf67 = 1067,$/;"	e	enum:exprtk::details::operator_type
e_sf66	extern_libs/exprtk.h	/^         e_sf64 = 1064, e_sf65 = 1065, e_sf66 = 1066, e_sf67 = 1067,$/;"	e	enum:exprtk::details::operator_type
e_sf67	extern_libs/exprtk.h	/^         e_sf64 = 1064, e_sf65 = 1065, e_sf66 = 1066, e_sf67 = 1067,$/;"	e	enum:exprtk::details::operator_type
e_sf68	extern_libs/exprtk.h	/^         e_sf68 = 1068, e_sf69 = 1069, e_sf70 = 1070, e_sf71 = 1071,$/;"	e	enum:exprtk::details::operator_type
e_sf69	extern_libs/exprtk.h	/^         e_sf68 = 1068, e_sf69 = 1069, e_sf70 = 1070, e_sf71 = 1071,$/;"	e	enum:exprtk::details::operator_type
e_sf70	extern_libs/exprtk.h	/^         e_sf68 = 1068, e_sf69 = 1069, e_sf70 = 1070, e_sf71 = 1071,$/;"	e	enum:exprtk::details::operator_type
e_sf71	extern_libs/exprtk.h	/^         e_sf68 = 1068, e_sf69 = 1069, e_sf70 = 1070, e_sf71 = 1071,$/;"	e	enum:exprtk::details::operator_type
e_sf72	extern_libs/exprtk.h	/^         e_sf72 = 1072, e_sf73 = 1073, e_sf74 = 1074, e_sf75 = 1075,$/;"	e	enum:exprtk::details::operator_type
e_sf73	extern_libs/exprtk.h	/^         e_sf72 = 1072, e_sf73 = 1073, e_sf74 = 1074, e_sf75 = 1075,$/;"	e	enum:exprtk::details::operator_type
e_sf74	extern_libs/exprtk.h	/^         e_sf72 = 1072, e_sf73 = 1073, e_sf74 = 1074, e_sf75 = 1075,$/;"	e	enum:exprtk::details::operator_type
e_sf75	extern_libs/exprtk.h	/^         e_sf72 = 1072, e_sf73 = 1073, e_sf74 = 1074, e_sf75 = 1075,$/;"	e	enum:exprtk::details::operator_type
e_sf76	extern_libs/exprtk.h	/^         e_sf76 = 1076, e_sf77 = 1077, e_sf78 = 1078, e_sf79 = 1079,$/;"	e	enum:exprtk::details::operator_type
e_sf77	extern_libs/exprtk.h	/^         e_sf76 = 1076, e_sf77 = 1077, e_sf78 = 1078, e_sf79 = 1079,$/;"	e	enum:exprtk::details::operator_type
e_sf78	extern_libs/exprtk.h	/^         e_sf76 = 1076, e_sf77 = 1077, e_sf78 = 1078, e_sf79 = 1079,$/;"	e	enum:exprtk::details::operator_type
e_sf79	extern_libs/exprtk.h	/^         e_sf76 = 1076, e_sf77 = 1077, e_sf78 = 1078, e_sf79 = 1079,$/;"	e	enum:exprtk::details::operator_type
e_sf80	extern_libs/exprtk.h	/^         e_sf80 = 1080, e_sf81 = 1081, e_sf82 = 1082, e_sf83 = 1083,$/;"	e	enum:exprtk::details::operator_type
e_sf81	extern_libs/exprtk.h	/^         e_sf80 = 1080, e_sf81 = 1081, e_sf82 = 1082, e_sf83 = 1083,$/;"	e	enum:exprtk::details::operator_type
e_sf82	extern_libs/exprtk.h	/^         e_sf80 = 1080, e_sf81 = 1081, e_sf82 = 1082, e_sf83 = 1083,$/;"	e	enum:exprtk::details::operator_type
e_sf83	extern_libs/exprtk.h	/^         e_sf80 = 1080, e_sf81 = 1081, e_sf82 = 1082, e_sf83 = 1083,$/;"	e	enum:exprtk::details::operator_type
e_sf84	extern_libs/exprtk.h	/^         e_sf84 = 1084, e_sf85 = 1085, e_sf86 = 1086, e_sf87 = 1087,$/;"	e	enum:exprtk::details::operator_type
e_sf85	extern_libs/exprtk.h	/^         e_sf84 = 1084, e_sf85 = 1085, e_sf86 = 1086, e_sf87 = 1087,$/;"	e	enum:exprtk::details::operator_type
e_sf86	extern_libs/exprtk.h	/^         e_sf84 = 1084, e_sf85 = 1085, e_sf86 = 1086, e_sf87 = 1087,$/;"	e	enum:exprtk::details::operator_type
e_sf87	extern_libs/exprtk.h	/^         e_sf84 = 1084, e_sf85 = 1085, e_sf86 = 1086, e_sf87 = 1087,$/;"	e	enum:exprtk::details::operator_type
e_sf88	extern_libs/exprtk.h	/^         e_sf88 = 1088, e_sf89 = 1089, e_sf90 = 1090, e_sf91 = 1091,$/;"	e	enum:exprtk::details::operator_type
e_sf89	extern_libs/exprtk.h	/^         e_sf88 = 1088, e_sf89 = 1089, e_sf90 = 1090, e_sf91 = 1091,$/;"	e	enum:exprtk::details::operator_type
e_sf90	extern_libs/exprtk.h	/^         e_sf88 = 1088, e_sf89 = 1089, e_sf90 = 1090, e_sf91 = 1091,$/;"	e	enum:exprtk::details::operator_type
e_sf91	extern_libs/exprtk.h	/^         e_sf88 = 1088, e_sf89 = 1089, e_sf90 = 1090, e_sf91 = 1091,$/;"	e	enum:exprtk::details::operator_type
e_sf92	extern_libs/exprtk.h	/^         e_sf92 = 1092, e_sf93 = 1093, e_sf94 = 1094, e_sf95 = 1095,$/;"	e	enum:exprtk::details::operator_type
e_sf93	extern_libs/exprtk.h	/^         e_sf92 = 1092, e_sf93 = 1093, e_sf94 = 1094, e_sf95 = 1095,$/;"	e	enum:exprtk::details::operator_type
e_sf94	extern_libs/exprtk.h	/^         e_sf92 = 1092, e_sf93 = 1093, e_sf94 = 1094, e_sf95 = 1095,$/;"	e	enum:exprtk::details::operator_type
e_sf95	extern_libs/exprtk.h	/^         e_sf92 = 1092, e_sf93 = 1093, e_sf94 = 1094, e_sf95 = 1095,$/;"	e	enum:exprtk::details::operator_type
e_sf96	extern_libs/exprtk.h	/^         e_sf96 = 1096, e_sf97 = 1097, e_sf98 = 1098, e_sf99 = 1099,$/;"	e	enum:exprtk::details::operator_type
e_sf97	extern_libs/exprtk.h	/^         e_sf96 = 1096, e_sf97 = 1097, e_sf98 = 1098, e_sf99 = 1099,$/;"	e	enum:exprtk::details::operator_type
e_sf98	extern_libs/exprtk.h	/^         e_sf96 = 1096, e_sf97 = 1097, e_sf98 = 1098, e_sf99 = 1099,$/;"	e	enum:exprtk::details::operator_type
e_sf99	extern_libs/exprtk.h	/^         e_sf96 = 1096, e_sf97 = 1097, e_sf98 = 1098, e_sf99 = 1099,$/;"	e	enum:exprtk::details::operator_type
e_sffinal	extern_libs/exprtk.h	/^         e_sffinal  = 1100,$/;"	e	enum:exprtk::details::operator_type
e_sgn	extern_libs/exprtk.h	/^            e_sgn           , e_erf           , e_erfc        , e_ncdf         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sgn	extern_libs/exprtk.h	/^         e_inrange , e_sgn     , e_r2d     , e_d2r     ,$/;"	e	enum:exprtk::details::operator_type
e_shl	extern_libs/exprtk.h	/^            e_modass      =  15, e_shr         =  16, e_shl         =  17,$/;"	e	enum:exprtk::lexer::token::token_type
e_shl	extern_libs/exprtk.h	/^         e_shr     , e_shl     , e_abs     , e_acos    ,$/;"	e	enum:exprtk::details::operator_type
e_shr	extern_libs/exprtk.h	/^            e_modass      =  15, e_shr         =  16, e_shl         =  17,$/;"	e	enum:exprtk::lexer::token::token_type
e_shr	extern_libs/exprtk.h	/^         e_shr     , e_shl     , e_abs     , e_acos    ,$/;"	e	enum:exprtk::details::operator_type
e_sin	extern_libs/exprtk.h	/^            e_pos           , e_round         , e_sin         , e_sinc         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sin	extern_libs/exprtk.h	/^         e_root    , e_sqrt    , e_sin     , e_sinc    ,$/;"	e	enum:exprtk::details::operator_type
e_sinc	extern_libs/exprtk.h	/^            e_pos           , e_round         , e_sin         , e_sinc         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sinc	extern_libs/exprtk.h	/^         e_root    , e_sqrt    , e_sin     , e_sinc    ,$/;"	e	enum:exprtk::details::operator_type
e_sinh	extern_libs/exprtk.h	/^            e_sinh          , e_sqrt          , e_tan         , e_tanh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sinh	extern_libs/exprtk.h	/^         e_sinh    , e_sec     , e_csc     , e_tan     ,$/;"	e	enum:exprtk::details::operator_type
e_smulti	extern_libs/exprtk.h	/^         e_like    , e_ilike   , e_multi   , e_smulti  ,$/;"	e	enum:exprtk::details::operator_type
e_sqrt	extern_libs/exprtk.h	/^            e_sinh          , e_sqrt          , e_tan         , e_tanh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sqrt	extern_libs/exprtk.h	/^         e_root    , e_sqrt    , e_sin     , e_sinc    ,$/;"	e	enum:exprtk::details::operator_type
e_st_function	extern_libs/exprtk.h	/^         e_st_function       = 5,$/;"	e	enum:exprtk::parser::symbol_type
e_st_local_string	extern_libs/exprtk.h	/^         e_st_local_string   = 8$/;"	e	enum:exprtk::parser::symbol_type
e_st_local_variable	extern_libs/exprtk.h	/^         e_st_local_variable = 6,$/;"	e	enum:exprtk::parser::symbol_type
e_st_local_vector	extern_libs/exprtk.h	/^         e_st_local_vector   = 7,$/;"	e	enum:exprtk::parser::symbol_type
e_st_string	extern_libs/exprtk.h	/^         e_st_string         = 4,$/;"	e	enum:exprtk::parser::symbol_type
e_st_unknown	extern_libs/exprtk.h	/^         e_st_unknown        = 0,$/;"	e	enum:exprtk::parser::symbol_type
e_st_variable	extern_libs/exprtk.h	/^         e_st_variable       = 1,$/;"	e	enum:exprtk::parser::symbol_type
e_st_vecelem	extern_libs/exprtk.h	/^         e_st_vecelem        = 3,$/;"	e	enum:exprtk::parser::symbol_type
e_st_vector	extern_libs/exprtk.h	/^         e_st_vector         = 2,$/;"	e	enum:exprtk::parser::symbol_type
e_start	algorithm/QuadLayering.h	/^  Edge* e_start() const { return e_start_; }$/;"	f	class:TQMesh::QuadLayerVertices
e_strass	extern_libs/exprtk.h	/^            e_sf3ext        , e_sf4ext        , e_nulleq      , e_strass       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_strccondition	extern_libs/exprtk.h	/^            e_strcondition  , e_strccondition , e_add         , e_sub          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_strconcat	extern_libs/exprtk.h	/^            e_stringvarrng  , e_cstringvarrng , e_strgenrange , e_strconcat    ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_strcondition	extern_libs/exprtk.h	/^            e_strcondition  , e_strccondition , e_add         , e_sub          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_strength_reduction	extern_libs/exprtk.h	/^            e_strength_reduction   =   64,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_strfunction	extern_libs/exprtk.h	/^            e_function      , e_vafunction    , e_genfunction , e_strfunction  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_strgenrange	extern_libs/exprtk.h	/^            e_stringvarrng  , e_cstringvarrng , e_strgenrange , e_strconcat    ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_string	extern_libs/exprtk.h	/^            e_string      =   9, e_assign      =  10, e_addass      =  11,$/;"	e	enum:exprtk::lexer::token::token_type
e_string	extern_libs/exprtk.h	/^            e_string$/;"	e	enum:exprtk::expression::control_block::data_type
e_string	extern_libs/exprtk.h	/^            e_string$/;"	e	enum:exprtk::parser::scope_element::element_type
e_string	extern_libs/exprtk.h	/^         e_string$/;"	e	enum:exprtk::type_store::store_type
e_stringconst	extern_libs/exprtk.h	/^            e_retenv        , e_variable      , e_stringvar   , e_stringconst  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_stringsize	extern_libs/exprtk.h	/^            e_stringvarsize , e_strswap       , e_stringsize  , e_stringvararg ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_stringvar	extern_libs/exprtk.h	/^            e_retenv        , e_variable      , e_stringvar   , e_stringconst  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_stringvararg	extern_libs/exprtk.h	/^            e_stringvarsize , e_strswap       , e_stringsize  , e_stringvararg ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_stringvarrng	extern_libs/exprtk.h	/^            e_stringvarrng  , e_cstringvarrng , e_strgenrange , e_strconcat    ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_stringvarsize	extern_libs/exprtk.h	/^            e_stringvarsize , e_strswap       , e_stringsize  , e_stringvararg ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_strswap	extern_libs/exprtk.h	/^            e_stringvarsize , e_strswap       , e_stringsize  , e_stringvararg ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sub	extern_libs/exprtk.h	/^            e_strcondition  , e_strccondition , e_add         , e_sub          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sub	extern_libs/exprtk.h	/^            e_sub         = '-', e_div         = '\/', e_mul         = '*',$/;"	e	enum:exprtk::lexer::token::token_type
e_sub	extern_libs/exprtk.h	/^         e_default , e_null    , e_add     , e_sub     ,$/;"	e	enum:exprtk::details::operator_type
e_subass	extern_libs/exprtk.h	/^            e_subass      =  12, e_mulass      =  13, e_divass      =  14,$/;"	e	enum:exprtk::lexer::token::token_type
e_subass	extern_libs/exprtk.h	/^         e_trunc   , e_assign  , e_addass  , e_subass  ,$/;"	e	enum:exprtk::details::operator_type
e_sum	extern_libs/exprtk.h	/^         e_sum     , e_prod    , e_lt      , e_lte     ,$/;"	e	enum:exprtk::details::operator_type
e_swap	extern_libs/exprtk.h	/^            e_continue      , e_swap$/;"	e	enum:exprtk::details::expression_node::node_type
e_swap	extern_libs/exprtk.h	/^            e_swap        =  21, e_lt          = '<', e_gt          = '>',$/;"	e	enum:exprtk::lexer::token::token_type
e_swap	extern_libs/exprtk.h	/^         e_swap    ,$/;"	e	enum:exprtk::details::operator_type
e_switch	extern_libs/exprtk.h	/^            e_for           , e_switch        , e_mswitch     , e_return       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_symbol	extern_libs/exprtk.h	/^            e_eof         =   6, e_number      =   7, e_symbol      =   8,$/;"	e	enum:exprtk::lexer::token::token_type
e_symtab	extern_libs/exprtk.h	/^         e_symtab  = 5,$/;"	e	enum:exprtk::parser_error::error_mode
e_syntax	extern_libs/exprtk.h	/^         e_syntax  = 1,$/;"	e	enum:exprtk::parser_error::error_mode
e_tan	extern_libs/exprtk.h	/^            e_sinh          , e_sqrt          , e_tan         , e_tanh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_tan	extern_libs/exprtk.h	/^         e_sinh    , e_sec     , e_csc     , e_tan     ,$/;"	e	enum:exprtk::details::operator_type
e_tanh	extern_libs/exprtk.h	/^            e_sinh          , e_sqrt          , e_tan         , e_tanh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_tanh	extern_libs/exprtk.h	/^         e_tanh    , e_cot     , e_clamp   , e_iclamp  ,$/;"	e	enum:exprtk::details::operator_type
e_ternary	extern_libs/exprtk.h	/^            e_ternary     = '?'$/;"	e	enum:exprtk::lexer::token::token_type
e_timeout	extern_libs/exprtk.h	/^          e_timeout         = 2$/;"	e	enum:exprtk::loop_runtime_check::violation_type
e_token	extern_libs/exprtk.h	/^         e_token   = 2,$/;"	e	enum:exprtk::parser_error::error_mode
e_trinary	extern_libs/exprtk.h	/^            e_binary        , e_binary_ext    , e_trinary     , e_quaternary   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_trunc	extern_libs/exprtk.h	/^            e_frac          , e_trunc         , e_uvouv       , e_vov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_trunc	extern_libs/exprtk.h	/^         e_trunc   , e_assign  , e_addass  , e_subass  ,$/;"	e	enum:exprtk::details::operator_type
e_unary	extern_libs/exprtk.h	/^            e_none          , e_null          , e_constant    , e_unary        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_unknown	extern_libs/exprtk.h	/^            e_unknown              =    0,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_unknown	extern_libs/exprtk.h	/^            e_unknown  ,$/;"	e	enum:exprtk::expression::control_block::data_type
e_unknown	extern_libs/exprtk.h	/^          e_unknown         = 0,$/;"	e	enum:exprtk::loop_runtime_check::violation_type
e_unknown	extern_libs/exprtk.h	/^         e_unknown = 0,$/;"	e	enum:exprtk::parser_error::error_mode
e_unknown	extern_libs/exprtk.h	/^         e_unknown,$/;"	e	enum:exprtk::type_store::store_type
e_usr_constant_type	extern_libs/exprtk.h	/^            e_usr_constant_type = 2$/;"	e	enum:exprtk::parser::unknown_symbol_resolver::usr_symbol_type
e_usr_unknown_type	extern_libs/exprtk.h	/^            e_usr_unknown_type  = 0,$/;"	e	enum:exprtk::parser::unknown_symbol_resolver::usr_symbol_type
e_usr_variable_type	extern_libs/exprtk.h	/^            e_usr_variable_type = 1,$/;"	e	enum:exprtk::parser::unknown_symbol_resolver::usr_symbol_type
e_usrmode_default	extern_libs/exprtk.h	/^            e_usrmode_default  = 0,$/;"	e	enum:exprtk::parser::unknown_symbol_resolver::usr_mode
e_usrmode_extended	extern_libs/exprtk.h	/^            e_usrmode_extended = 1$/;"	e	enum:exprtk::parser::unknown_symbol_resolver::usr_mode
e_uvouv	extern_libs/exprtk.h	/^            e_frac          , e_trunc         , e_uvouv       , e_vov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vafunction	extern_libs/exprtk.h	/^            e_function      , e_vafunction    , e_genfunction , e_strfunction  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_valvecarith	extern_libs/exprtk.h	/^            e_valvecarith   , e_vecunaryop    , e_vecondition , e_break        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_valvecineq	extern_libs/exprtk.h	/^            e_vecvalineq    , e_valvecineq    , e_vecvecarith , e_vecvalarith  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vararg	extern_libs/exprtk.h	/^            e_vararg        , e_conditional   , e_while       , e_repeat       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_variable	extern_libs/exprtk.h	/^            e_retenv        , e_variable      , e_stringvar   , e_stringconst  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_variable	extern_libs/exprtk.h	/^            e_variable,$/;"	e	enum:exprtk::parser::scope_element::element_type
e_vecdata	extern_libs/exprtk.h	/^            e_vecdata  ,$/;"	e	enum:exprtk::expression::control_block::data_type
e_vecdefass	extern_libs/exprtk.h	/^            e_vecdefass     , e_vecvalass     , e_vecvecass   , e_vecopvalass  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecelem	extern_libs/exprtk.h	/^            e_vecelem ,$/;"	e	enum:exprtk::parser::scope_element::element_type
e_vecelem	extern_libs/exprtk.h	/^            e_vector        , e_vecelem       , e_rbvecelem   , e_rbveccelem   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecfunc	extern_libs/exprtk.h	/^            e_vecopvecass   , e_vecfunc       , e_vecvecswap  , e_vecvecineq   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecholder	extern_libs/exprtk.h	/^            e_vecholder,$/;"	e	enum:exprtk::expression::control_block::data_type
e_vecondition	extern_libs/exprtk.h	/^            e_valvecarith   , e_vecunaryop    , e_vecondition , e_break        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecopvalass	extern_libs/exprtk.h	/^            e_vecdefass     , e_vecvalass     , e_vecvecass   , e_vecopvalass  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecopvecass	extern_libs/exprtk.h	/^            e_vecopvecass   , e_vecfunc       , e_vecvecswap  , e_vecvecineq   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vector	extern_libs/exprtk.h	/^            e_vector        , e_vecelem       , e_rbvecelem   , e_rbveccelem   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vector	extern_libs/exprtk.h	/^            e_vector  ,$/;"	e	enum:exprtk::parser::scope_element::element_type
e_vector	extern_libs/exprtk.h	/^         e_vector ,$/;"	e	enum:exprtk::type_store::store_type
e_vecunaryop	extern_libs/exprtk.h	/^            e_valvecarith   , e_vecunaryop    , e_vecondition , e_break        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvalarith	extern_libs/exprtk.h	/^            e_vecvalineq    , e_valvecineq    , e_vecvecarith , e_vecvalarith  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvalass	extern_libs/exprtk.h	/^            e_vecdefass     , e_vecvalass     , e_vecvecass   , e_vecopvalass  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvalineq	extern_libs/exprtk.h	/^            e_vecvalineq    , e_valvecineq    , e_vecvecarith , e_vecvalarith  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvecarith	extern_libs/exprtk.h	/^            e_vecvalineq    , e_valvecineq    , e_vecvecarith , e_vecvalarith  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvecass	extern_libs/exprtk.h	/^            e_vecdefass     , e_vecvalass     , e_vecvecass   , e_vecopvalass  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvecineq	extern_libs/exprtk.h	/^            e_vecopvecass   , e_vecfunc       , e_vecvecswap  , e_vecvecineq   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvecswap	extern_libs/exprtk.h	/^            e_vecopvecass   , e_vecfunc       , e_vecvecswap  , e_vecvecineq   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vob	extern_libs/exprtk.h	/^            e_cov           , e_voc           , e_vob         , e_bov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_voc	extern_libs/exprtk.h	/^            e_cov           , e_voc           , e_vob         , e_bov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vococov	extern_libs/exprtk.h	/^            e_covocov       , e_vocovoc       , e_covovoc     , e_vococov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vocov	extern_libs/exprtk.h	/^            e_vocov         , e_covov         , e_covoc       , e_vovovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vocovoc	extern_libs/exprtk.h	/^            e_covocov       , e_vocovoc       , e_covovoc     , e_vococov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vocovov	extern_libs/exprtk.h	/^            e_vovovoc       , e_vovocov       , e_vocovov     , e_covovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vov	extern_libs/exprtk.h	/^            e_frac          , e_trunc         , e_uvouv       , e_vov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vovoc	extern_libs/exprtk.h	/^            e_cob           , e_boc           , e_vovov       , e_vovoc        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vovocov	extern_libs/exprtk.h	/^            e_vovovoc       , e_vovocov       , e_vocovov     , e_covovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vovov	extern_libs/exprtk.h	/^            e_cob           , e_boc           , e_vovov       , e_vovoc        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vovovoc	extern_libs/exprtk.h	/^            e_vovovoc       , e_vovocov       , e_vocovov     , e_covovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vovovov	extern_libs/exprtk.h	/^            e_vocov         , e_covov         , e_covoc       , e_vovovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_while	extern_libs/exprtk.h	/^            e_vararg        , e_conditional   , e_while       , e_repeat       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_while_loop	extern_libs/exprtk.h	/^         e_while_loop        = 2,$/;"	e	enum:exprtk::loop_runtime_check::loop_types
e_write	extern_libs/exprtk.h	/^         e_write = 2,$/;"	e	enum:exprtk::rtl::io::file::details::file_mode
e_xnor	extern_libs/exprtk.h	/^            e_or            , e_nor           , e_xor         , e_xnor         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_xnor	extern_libs/exprtk.h	/^         e_or      , e_nor     , e_xor     , e_xnor    ,$/;"	e	enum:exprtk::details::operator_type
e_xor	extern_libs/exprtk.h	/^            e_or            , e_nor           , e_xor         , e_xnor         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_xor	extern_libs/exprtk.h	/^         e_or      , e_nor     , e_xor     , e_xnor    ,$/;"	e	enum:exprtk::details::operator_type
edge_colors	algorithm/Boundary.h	/^  const std::vector<int>& edge_colors() const { return edge_colors_; }$/;"	f	class:TQMesh::CSVBoundaryReader
edge_colors	algorithm/Boundary.h	/^  std::vector<int>& edge_colors() { return edge_colors_; }$/;"	f	class:TQMesh::CSVBoundaryReader
edge_colors_	algorithm/Boundary.h	/^  std::vector<int>   edge_colors_;$/;"	m	class:TQMesh::CSVBoundaryReader
edge_size	tests/tests_Front.cpp	/^void edge_size()$/;"	f	namespace:FrontTests
edgelength	algorithm/Quad.h	/^  double        edgelength(unsigned int i) const { return edge_lengths_[i]; }$/;"	f	class:TQMesh::Quad
edgelength	algorithm/Triangle.h	/^  double        edgelength(unsigned int i) const { return edge_lengths_[i]; }$/;"	f	class:TQMesh::Triangle
edgelist	algorithm/Edge.h	/^  EdgeList& edgelist() { return *edgelist_; }$/;"	f	class:TQMesh::Edge
edgelist	algorithm/Edge.h	/^  const EdgeList& edgelist() const { return *edgelist_; }$/;"	f	class:TQMesh::Edge
edges	algorithm/EdgeList.h	/^  auto& edges() { return edges_; }$/;"	f	class:TQMesh::EdgeList
edges	algorithm/EdgeList.h	/^  const auto& edges() const { return edges_; }$/;"	f	class:TQMesh::EdgeList
edges	algorithm/Front.h	/^  const std::vector<EdgeVector>& edges() const { return edges_; }$/;"	f	class:TQMesh::FrontInitData
edges	algorithm/Front.h	/^  std::vector<EdgeVector>& edges() { return edges_; }$/;"	f	class:TQMesh::FrontInitData
edges	algorithm/Vertex.h	/^  EdgeList& edges() { return edges_;}$/;"	f	class:TQMesh::Vertex
edges	algorithm/Vertex.h	/^  const Edge& edges(size_t i) const $/;"	f	class:TQMesh::Vertex
edges	algorithm/Vertex.h	/^  const EdgeList& edges() const { return edges_;}$/;"	f	class:TQMesh::Vertex
element_	extern_libs/exprtk.h	/^         std::vector<scope_element> element_;$/;"	m	class:exprtk::parser::scope_element_manager
element_color	algorithm/Mesh.h	/^  int    element_color()    const { return elem_color_; }$/;"	f	class:TQMesh::Mesh
element_color	algorithm/Mesh.h	/^  void element_color(int c) { elem_color_ = c; }$/;"	f	class:TQMesh::Mesh
element_color_	app/TQMeshApp.h	/^  int                     element_color_;$/;"	m	class:TQMesh::MeshConstruction
element_type	extern_libs/exprtk.h	/^         enum element_type$/;"	g	struct:exprtk::parser::scope_element
else_stmt	extern_libs/exprtk.h	38707;"	d
empty	extern_libs/exprtk.h	/^         inline bool empty() const$/;"	f	class:exprtk::lexer::generator
empty	extern_libs/exprtk.h	/^         inline bool empty() const$/;"	f	class:exprtk::parser::scope_element_manager
empty	extern_libs/exprtk.h	/^         inline bool empty() const$/;"	f	class:exprtk::type_store::parameter_list
empty	extern_libs/exprtk.h	/^         inline bool empty() const$/;"	f	struct:exprtk::parser::symtab_store
empty_method_body	extern_libs/exprtk.h	17094;"	d
empty_method_body	extern_libs/exprtk.h	17173;"	d
enable_all_arithmetic_ops	extern_libs/exprtk.h	/^         settings_store& enable_all_arithmetic_ops()$/;"	f	class:exprtk::parser::settings_store
enable_all_assignment_ops	extern_libs/exprtk.h	/^         settings_store& enable_all_assignment_ops()$/;"	f	class:exprtk::parser::settings_store
enable_all_base_functions	extern_libs/exprtk.h	/^         settings_store& enable_all_base_functions()$/;"	f	class:exprtk::parser::settings_store
enable_all_control_structures	extern_libs/exprtk.h	/^         settings_store& enable_all_control_structures()$/;"	f	class:exprtk::parser::settings_store
enable_all_inequality_ops	extern_libs/exprtk.h	/^         settings_store& enable_all_inequality_ops()$/;"	f	class:exprtk::parser::settings_store
enable_all_logic_ops	extern_libs/exprtk.h	/^         settings_store& enable_all_logic_ops()$/;"	f	class:exprtk::parser::settings_store
enable_arithmetic_operation	extern_libs/exprtk.h	/^         settings_store& enable_arithmetic_operation(settings_arithmetic_opr arithmetic)$/;"	f	class:exprtk::parser::settings_store
enable_assignment_operation	extern_libs/exprtk.h	/^         settings_store& enable_assignment_operation(settings_assignment_opr assignment)$/;"	f	class:exprtk::parser::settings_store
enable_base_function	extern_libs/exprtk.h	/^         settings_store& enable_base_function(settings_base_funcs bf)$/;"	f	class:exprtk::parser::settings_store
enable_bracket_check_	extern_libs/exprtk.h	/^         bool enable_bracket_check_;$/;"	m	class:exprtk::parser::settings_store
enable_collect_assings_	extern_libs/exprtk.h	/^         bool enable_collect_assings_;$/;"	m	class:exprtk::parser::settings_store
enable_collect_funcs_	extern_libs/exprtk.h	/^         bool enable_collect_funcs_;$/;"	m	class:exprtk::parser::settings_store
enable_collect_vars_	extern_libs/exprtk.h	/^         bool enable_collect_vars_;$/;"	m	class:exprtk::parser::settings_store
enable_commutative_check_	extern_libs/exprtk.h	/^         bool enable_commutative_check_;$/;"	m	class:exprtk::parser::settings_store
enable_control_structure	extern_libs/exprtk.h	/^         settings_store& enable_control_structure(settings_control_structs ctrl_struct)$/;"	f	class:exprtk::parser::settings_store
enable_has_side_effects	extern_libs/exprtk.h	/^   void enable_has_side_effects(FunctionType& func)$/;"	f	namespace:exprtk
enable_inequality_operation	extern_libs/exprtk.h	/^         settings_store& enable_inequality_operation(settings_inequality_opr inequality)$/;"	f	class:exprtk::parser::settings_store
enable_joiner_	extern_libs/exprtk.h	/^         bool enable_joiner_;$/;"	m	class:exprtk::parser::settings_store
enable_local_vardef	extern_libs/exprtk.h	/^         settings_store& enable_local_vardef()$/;"	f	class:exprtk::parser::settings_store
enable_logic_operation	extern_libs/exprtk.h	/^         settings_store& enable_logic_operation(settings_logic_opr logic)$/;"	f	class:exprtk::parser::settings_store
enable_numeric_check_	extern_libs/exprtk.h	/^         bool enable_numeric_check_;$/;"	m	class:exprtk::parser::settings_store
enable_replacer_	extern_libs/exprtk.h	/^         bool enable_replacer_;$/;"	m	class:exprtk::parser::settings_store
enable_sequence_check_	extern_libs/exprtk.h	/^         bool enable_sequence_check_;$/;"	m	class:exprtk::parser::settings_store
enable_strength_reduction_	extern_libs/exprtk.h	/^         bool enable_strength_reduction_;$/;"	m	class:exprtk::parser::settings_store
enable_unknown_symbol_resolver	extern_libs/exprtk.h	/^      inline void enable_unknown_symbol_resolver(unknown_symbol_resolver& usr)$/;"	f	class:exprtk::parser
enable_unknown_symbol_resolver	extern_libs/exprtk.h	/^      inline void enable_unknown_symbol_resolver(unknown_symbol_resolver* usr = reinterpret_cast<unknown_symbol_resolver*>(0))$/;"	f	class:exprtk::parser
enable_zero_parameters	extern_libs/exprtk.h	/^   void enable_zero_parameters(FunctionType& func)$/;"	f	namespace:exprtk
end	algorithm/Domain.h	/^  const_iterator end() const { return boundaries_.end(); }$/;"	f	class:TQMesh::Domain
end	algorithm/Domain.h	/^  iterator end() { return boundaries_.end(); }$/;"	f	class:TQMesh::Domain
end	algorithm/EdgeList.h	/^  const_iterator end() const { return edges_.end(); }$/;"	f	class:TQMesh::EdgeList
end	algorithm/EdgeList.h	/^  iterator end() { return edges_.end(); }$/;"	f	class:TQMesh::EdgeList
end	extern_libs/exprtk.h	/^         inline const value_t* end() const$/;"	f	struct:exprtk::type_store::type_view
end	extern_libs/exprtk.h	/^         inline value_t* end()$/;"	f	struct:exprtk::type_store::type_view
end	utils/Container.h	/^  const_iterator end() const { return items_.end(); }$/;"	f	class:CppUtils::Container
end	utils/Container.h	/^  iterator end() { return items_.end(); }$/;"	f	class:CppUtils::Container
end	utils/VecND.h	/^  const_iterator end() const { return entries_.end(); }$/;"	f	class:CppUtils::VecND
end	utils/VecND.h	/^  iterator end() { return entries_.end(); }$/;"	f	class:CppUtils::VecND
end_key	utils/ParaReader.h	/^  const string& end_key() const { return end_key_; }$/;"	f	class:CppUtils::ParameterBase
end_key	utils/ParaReader.h	/^  string& end_key() { return end_key_; }$/;"	f	class:CppUtils::ParameterBase
end_key_	utils/ParaReader.h	/^  string   end_key_;$/;"	m	class:CppUtils::ParameterBase
ending_position	algorithm/QuadLayering.h	/^  QuadLayering& ending_position(const Vec2d& v) $/;"	f	class:TQMesh::QuadLayering
ending_position	algorithm/QuadLayering.h	/^  QuadLayering& ending_position(double x, double y) $/;"	f	class:TQMesh::QuadLayering
ending_position	algorithm/QuadLayering.h	/^  const Vec2d& ending_position() const { return xy_end_; }$/;"	f	class:TQMesh::QuadLayering
entity_name	extern_libs/exprtk.h	/^         inline std::string entity_name(const PtrType& ptr) const$/;"	f	struct:exprtk::symbol_table::type_store
eof	extern_libs/exprtk.h	/^         bool eof() const$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
eof	extern_libs/exprtk.h	/^      eof()$/;"	f	struct:exprtk::rtl::io::file::eof
eof	extern_libs/exprtk.h	/^   struct eof : public exprtk::ifunction<T>$/;"	s	namespace:exprtk::rtl::io::file
eof_token_	extern_libs/exprtk.h	/^         token_t            eof_token_;$/;"	m	class:exprtk::lexer::generator
eps_	algorithm/SmoothingStrategy.h	/^  double             eps_                  = 0.75;$/;"	m	class:TQMesh::SmoothingStrategy
epsilon	algorithm/SmoothingStrategy.h	/^  LaplaceSmoothing& epsilon(double e) { eps_ = e; return *this;} $/;"	f	class:TQMesh::LaplaceSmoothing
epsilon	algorithm/SmoothingStrategy.h	/^  MixedSmoothing& epsilon(double e) { eps_ = e; return *this;} $/;"	f	class:TQMesh::MixedSmoothing
epsilon	algorithm/SmoothingStrategy.h	/^  TorsionSmoothing& epsilon(double e) { eps_ = e; return *this;} $/;"	f	class:TQMesh::TorsionSmoothing
epsilon	algorithm/SmoothingStrategy.h	/^  double epsilon() const { return eps_; }$/;"	f	class:TQMesh::LaplaceSmoothing
epsilon	algorithm/SmoothingStrategy.h	/^  double epsilon() const { return eps_; }$/;"	f	class:TQMesh::MixedSmoothing
epsilon	algorithm/SmoothingStrategy.h	/^  double epsilon() const { return eps_; }$/;"	f	class:TQMesh::TorsionSmoothing
epsilon_type	extern_libs/exprtk.h	/^            struct epsilon_type {};$/;"	s	namespace:exprtk::details::numeric::details
eq_op	extern_libs/exprtk.h	/^      struct eq_op : public opr_base<T>$/;"	s	namespace:exprtk::details
equal	extern_libs/exprtk.h	/^         inline T equal(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
equal_impl	extern_libs/exprtk.h	/^            inline T equal_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
equal_impl	extern_libs/exprtk.h	/^            inline T equal_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
equal_impl	extern_libs/exprtk.h	/^            inline float equal_impl(const float v0, const float v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
equal_op	extern_libs/exprtk.h	/^      struct equal_op : public opr_base<T>$/;"	s	namespace:exprtk::details
erf_impl	extern_libs/exprtk.h	/^            inline T erf_impl(T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
erf_impl	extern_libs/exprtk.h	/^            inline T erf_impl(T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
erfc_impl	extern_libs/exprtk.h	/^            inline T erfc_impl(T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
erfc_impl	extern_libs/exprtk.h	/^            inline T erfc_impl(T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
error	extern_libs/exprtk.h	/^            std::pair<lexer::token,lexer::token> error(const std::size_t index)$/;"	f	class:exprtk::lexer::helper::sequence_validator
error	extern_libs/exprtk.h	/^            std::pair<lexer::token,lexer::token> error(const std::size_t index)$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
error	extern_libs/exprtk.h	/^      inline std::string error() const$/;"	f	class:exprtk::parser
error	utils/ParaReader.h	/^  void error(string msg) const { throw Invalid{msg}; }$/;"	f	class:CppUtils::ParaBlock
error	utils/ParaReader.h	/^  void error(string msg) { throw Invalid{msg}; }$/;"	f	class:CppUtils::ParaBlock
error_count	extern_libs/exprtk.h	/^            std::size_t error_count() const$/;"	f	class:exprtk::lexer::helper::numeric_checker
error_count	extern_libs/exprtk.h	/^            std::size_t error_count() const$/;"	f	class:exprtk::lexer::helper::sequence_validator
error_count	extern_libs/exprtk.h	/^            std::size_t error_count() const$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
error_count	extern_libs/exprtk.h	/^      inline std::size_t error_count() const$/;"	f	class:exprtk::parser
error_header_	utils/Log.h	/^  std::string error_header_  = "[ERROR] ";$/;"	m	class:CppUtils::LogProperties
error_index	extern_libs/exprtk.h	/^            std::size_t error_index(const std::size_t& i)$/;"	f	class:exprtk::lexer::helper::numeric_checker
error_line	extern_libs/exprtk.h	/^         std::string error_line;$/;"	m	struct:exprtk::parser_error::type
error_list_	extern_libs/exprtk.h	/^            std::vector<std::pair<lexer::token,lexer::token> > error_list_;$/;"	m	class:exprtk::lexer::helper::sequence_validator
error_list_	extern_libs/exprtk.h	/^            std::vector<std::pair<lexer::token,lexer::token> > error_list_;$/;"	m	class:exprtk::lexer::helper::sequence_validator_3tokens
error_list_	extern_libs/exprtk.h	/^            std::vector<std::size_t> error_list_;$/;"	m	class:exprtk::lexer::helper::numeric_checker
error_list_	extern_libs/exprtk.h	/^      std::deque<parser_error::type> error_list_;$/;"	m	class:exprtk::parser
error_mode	extern_libs/exprtk.h	/^      enum error_mode$/;"	g	namespace:exprtk::parser_error
error_node	extern_libs/exprtk.h	/^      static inline expression_node_ptr error_node()$/;"	f	class:exprtk::parser
error_t	extern_libs/exprtk.h	/^      typedef parser_error::type      error_t;$/;"	t	struct:exprtk::type_defs
error_token	extern_libs/exprtk.h	/^            lexer::token error_token()$/;"	f	class:exprtk::lexer::helper::bracket_checker
error_token_	extern_libs/exprtk.h	/^            lexer::token error_token_;$/;"	m	class:exprtk::lexer::helper::bracket_checker
error_token_inserter	extern_libs/exprtk.h	/^            lexer::token_inserter* error_token_inserter;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
error_token_joiner	extern_libs/exprtk.h	/^            lexer::token_joiner*   error_token_joiner;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
error_token_modifier	extern_libs/exprtk.h	/^            lexer::token_modifier* error_token_modifier;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
error_token_scanner	extern_libs/exprtk.h	/^            lexer::token_scanner*  error_token_scanner;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
eval_test	utils/Testing.h	/^static inline bool eval_test(bool cond, $/;"	f	namespace:CppUtils
evaluate	algorithm/Domain.h	/^  inline double evaluate(const Vec2d& xy, $/;"	f	class:TQMesh::SizeFunction
evaluate	extern_libs/exprtk.h	/^         static inline T evaluate(const Type x, const Type c1, const Type c0)$/;"	f	struct:exprtk::polynomial::poly_impl
evaluate	extern_libs/exprtk.h	/^         static inline T evaluate(const Type x, const Type c2, const Type c1, const Type c0)$/;"	f	struct:exprtk::polynomial::poly_impl
evaluate	extern_libs/exprtk.h	/^         static inline T evaluate(const Type x, const Type c3, const Type c2, const Type c1, const Type c0)$/;"	f	struct:exprtk::polynomial::poly_impl
evaluate	extern_libs/exprtk.h	/^         static inline T evaluate(const Type x, const Type c4, const Type c3, const Type c2, const Type c1, const Type c0)$/;"	f	struct:exprtk::polynomial::poly_impl
evaluate	extern_libs/exprtk.h	/^         static inline T evaluate(const Type x,$/;"	f	struct:exprtk::polynomial::poly_impl
evaluate_branches	extern_libs/exprtk.h	/^         struct evaluate_branches <T_,1>$/;"	s	class:exprtk::details::exprtk_final
evaluate_branches	extern_libs/exprtk.h	/^         struct evaluate_branches <T_,2>$/;"	s	class:exprtk::details::exprtk_final
evaluate_branches	extern_libs/exprtk.h	/^         struct evaluate_branches <T_,3>$/;"	s	class:exprtk::details::exprtk_final
evaluate_branches	extern_libs/exprtk.h	/^         struct evaluate_branches <T_,4>$/;"	s	class:exprtk::details::exprtk_final
evaluate_branches	extern_libs/exprtk.h	/^         struct evaluate_branches <T_,5>$/;"	s	class:exprtk::details::exprtk_final
evaluate_branches	extern_libs/exprtk.h	/^         struct evaluate_branches$/;"	s	class:exprtk::details::exprtk_final
evaluation	tests/tests_SizeFunction.cpp	/^void evaluation()$/;"	f	namespace:SizeFunctionTests
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[10])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[11])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[12])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[13])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[14])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[15])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[16])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[17])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[18])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[19])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[1])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[20])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[2])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[3])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[4])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[5])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[6])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[7])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[8])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[9])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	extern_libs/exprtk.h	/^         static inline void execute(std::string& s, char_cptr data, const std::size_t size)$/;"	f	struct:exprtk::details::asn_addassignment
execute	extern_libs/exprtk.h	/^         static inline void execute(std::string& s, char_cptr data, const std::size_t size)$/;"	f	struct:exprtk::details::asn_assignment
execute	extern_libs/exprtk.h	/^         struct invoke { static inline T execute(ifunction&, branch_t (&)[ParamCount]) { return std::numeric_limits<T_>::quiet_NaN(); } };$/;"	f	struct:exprtk::details::exprtk_final::invoke
exhaustive_search_loop	algorithm/Triangulation.h	/^  bool exhaustive_search_loop(Edge* base_edge, int n_elements)$/;"	f	class:TQMesh::Triangulation
exhaustive_search_triangle	algorithm/Triangulation.h	/^  bool exhaustive_search_triangle(Edge& base_edge)$/;"	f	class:TQMesh::Triangulation
exhaustive_search_triangulation	tests/tests_Mesh.cpp	/^void exhaustive_search_triangulation()$/;"	f	namespace:MeshTests
exp_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   exp_impl(const T v, int_type_tag) { return std::exp  (v); }$/;"	f	namespace:exprtk::details::numeric::details
exp_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   exp_impl(const T v, real_type_tag) { return std::exp  (v); }$/;"	f	namespace:exprtk::details::numeric::details
expm1_impl	extern_libs/exprtk.h	/^            inline T expm1_impl(const T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
expm1_impl	extern_libs/exprtk.h	/^            inline T expm1_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
export_mesh_file	tests/tests_Front.cpp	/^static inline void export_mesh_file(const Vertices& vertices,$/;"	f	namespace:FrontTests
export_size_function	algorithm/Domain.h	/^  void export_size_function(std::ostream& os,$/;"	f	class:TQMesh::Domain
export_size_function	algorithm/Domain.h	/^  void export_size_function(std::ostream& os,$/;"	f	class:TQMesh::SizeFunction
expr	extern_libs/exprtk.h	/^         expression_ptr expr;$/;"	m	struct:exprtk::expression::control_block
expr_as_vec1_store_	extern_libs/exprtk.h	/^         mutable tmp_vs_t  expr_as_vec1_store_;$/;"	m	class:exprtk::details::generic_function_node
expr_map_	extern_libs/exprtk.h	/^      std::map<std::string,expression_t> expr_map_;$/;"	m	class:exprtk::function_compositor
expression	app/size_function.cpp	/^static exprtk::expression<double>   expression;$/;"	v	file:
expression	extern_libs/exprtk.h	/^         expression_t expression;$/;"	m	struct:exprtk::function_compositor::base_func
expression	extern_libs/exprtk.h	/^         inline function& expression(const std::string& e)$/;"	f	struct:exprtk::function_compositor::function
expression	extern_libs/exprtk.h	/^      explicit expression(const symbol_table<T>& symbol_table)$/;"	f	class:exprtk::expression
expression	extern_libs/exprtk.h	/^      expression()$/;"	f	class:exprtk::expression
expression	extern_libs/exprtk.h	/^      expression(const expression<T>& e)$/;"	f	class:exprtk::expression
expression	extern_libs/exprtk.h	/^   class expression$/;"	c	namespace:exprtk
expression_	extern_libs/exprtk.h	/^         expression_node_ptr& expression_;$/;"	m	struct:exprtk::parser::scoped_expression_delete
expression_	extern_libs/exprtk.h	/^         std::string expression_;$/;"	m	struct:exprtk::function_compositor::function
expression_generator	extern_libs/exprtk.h	/^      class expression_generator$/;"	c	class:exprtk::parser
expression_generator_	extern_libs/exprtk.h	/^      expression_generator<T> expression_generator_;$/;"	m	class:exprtk::parser
expression_helper	extern_libs/exprtk.h	/^   class expression_helper$/;"	c	namespace:exprtk
expression_node	extern_libs/exprtk.h	/^      class expression_node : public node_collector_interface<expression_node<T> >,$/;"	c	namespace:exprtk::details
expression_node_ptr	extern_libs/exprtk.h	/^         typedef details::expression_node<Type>* expression_node_ptr;$/;"	t	class:exprtk::parser::expression_generator
expression_node_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>*           expression_node_ptr;$/;"	t	struct:exprtk::details::range_pack
expression_node_ptr	extern_libs/exprtk.h	/^         typedef expression_node_t*        expression_node_ptr;$/;"	t	struct:exprtk::parser::scope_element
expression_node_ptr	extern_libs/exprtk.h	/^         typedef expression_node_t* expression_node_ptr;$/;"	t	class:exprtk::parser::scope_element_manager
expression_node_ptr	extern_libs/exprtk.h	/^      inline std::size_t parse_base_function_call(expression_node_ptr (&param_list)[MaxNumberofParameters], const std::string& function_name = "")$/;"	m	class:exprtk::parser
expression_node_ptr	extern_libs/exprtk.h	/^      typedef expression_node_t*                          expression_node_ptr;$/;"	t	class:exprtk::parser
expression_node_t	extern_libs/exprtk.h	/^      typedef details::expression_node<T>                 expression_node_t;$/;"	t	class:exprtk::parser
expression_ptr	extern_libs/exprtk.h	/^         typedef details::expression_node<T>*        expression_ptr;$/;"	t	struct:exprtk::symbol_table::type_store
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node  <T>* expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node <T>* expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>*            expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>*          expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>*       expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>*       expression_ptr;$/;"	t	class:exprtk::details::repeat_until_loop_bc_node
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>*   expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::binary_node
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::expression_node
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::for_loop_bc_node
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::for_loop_node
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::generic_function_node
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::quaternary_node
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::repeat_until_loop_node
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::switch_node
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::trinary_node
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::unary_node
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::while_loop_bc_node
expression_ptr	extern_libs/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::while_loop_node
expression_ptr	extern_libs/exprtk.h	/^      typedef details::expression_node<T>*        expression_ptr;$/;"	t	class:exprtk::symbol_table
expression_ptr	extern_libs/exprtk.h	/^      typedef details::expression_node<T>*  expression_ptr;$/;"	t	class:exprtk::expression
expression_t	extern_libs/exprtk.h	/^         typedef exprtk::expression<T>   expression_t;$/;"	t	struct:exprtk::details::collector_helper
expression_t	extern_libs/exprtk.h	/^      typedef expression<T>                               expression_t;$/;"	t	class:exprtk::parser
expression_t	extern_libs/exprtk.h	/^      typedef expression<T>           expression_t;$/;"	t	struct:exprtk::type_defs
expression_t	extern_libs/exprtk.h	/^      typedef exprtk::expression<T>             expression_t;$/;"	t	class:exprtk::function_compositor
exprtk	extern_libs/exprtk.h	/^namespace exprtk$/;"	n
exprtk_crtype	extern_libs/exprtk.h	14588;"	d
exprtk_crtype	extern_libs/exprtk.h	14745;"	d
exprtk_debug	extern_libs/exprtk.h	40698;"	d
exprtk_debug	extern_libs/exprtk.h	63;"	d
exprtk_define_epsilon_type	extern_libs/exprtk.h	825;"	d
exprtk_define_epsilon_type	extern_libs/exprtk.h	839;"	d
exprtk_define_erf	extern_libs/exprtk.h	1201;"	d
exprtk_define_erf	extern_libs/exprtk.h	1207;"	d
exprtk_define_erfc	extern_libs/exprtk.h	1245;"	d
exprtk_define_erfc	extern_libs/exprtk.h	1251;"	d
exprtk_define_freefunction	extern_libs/exprtk.h	18380;"	d
exprtk_define_freefunction	extern_libs/exprtk.h	18406;"	d
exprtk_define_process	extern_libs/exprtk.h	17509;"	d
exprtk_define_process	extern_libs/exprtk.h	17521;"	d
exprtk_define_unary_function	extern_libs/exprtk.h	1584;"	d
exprtk_define_unary_function	extern_libs/exprtk.h	1632;"	d
exprtk_define_unary_op	extern_libs/exprtk.h	13015;"	d
exprtk_define_unary_op	extern_libs/exprtk.h	13078;"	d
exprtk_disable_fallthrough_begin	extern_libs/exprtk.h	40706;"	d
exprtk_disable_fallthrough_begin	extern_libs/exprtk.h	73;"	d
exprtk_disable_fallthrough_end	extern_libs/exprtk.h	40710;"	d
exprtk_disable_fallthrough_end	extern_libs/exprtk.h	77;"	d
exprtk_error_location	extern_libs/exprtk.h	40702;"	d
exprtk_error_location	extern_libs/exprtk.h	68;"	d
exprtk_final	extern_libs/exprtk.h	/^      class T0oT1 exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class T0oT1oT2 exprtk_final : public T0oT1oT2_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class T0oT1oT2_sf3 exprtk_final : public T0oT1oT2_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class T0oT1oT2_sf3ext exprtk_final : public sf3ext_type_node<T,T0,T1,T2>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class T0oT1oT2oT3 exprtk_final : public T0oT1oT2oT3_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class T0oT1oT2oT3_sf4 exprtk_final : public T0oT1oT2_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class T0oT1oT2oT3_sf4ext exprtk_final : public T0oT1oT2oT3_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_op_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_rebasevec_celem_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_rebasevec_celem_op_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_rebasevec_elem_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_rebasevec_elem_op_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_string_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_string_range_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_vec_elem_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_vec_elem_op_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_vec_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_vec_op_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_vecvec_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class assignment_vecvec_op_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class binary_ext_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class bipow_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class bipowninv_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class boc_node exprtk_final : public boc_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class bov_node exprtk_final : public bov_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class break_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class cob_node exprtk_final : public cob_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class conditional_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class conditional_string_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class conditional_vector_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class cons_conditional_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class cons_conditional_str_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class const_string_range_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class continue_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class cov_node exprtk_final : public cov_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class for_loop_bc_rtc_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class for_loop_rtc_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class function_N_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class function_N_node<T,IFunction,0> exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class generic_string_range_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class ipow_node exprtk_final: public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class ipowinv_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class literal_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class multi_switch_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class multimode_strfunction_node exprtk_final : public string_function_node<T,StringFunction>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class null_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class rebasevector_celem_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class rebasevector_elem_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class repeat_until_loop_bc_rtc_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class repeat_until_loop_rtc_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class return_envelope_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class return_node exprtk_final : public generic_function_node<T,null_igenfunc<T> >$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class scand_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class scor_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class sf3_node exprtk_final : public trinary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class sf3_var_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class sf4_node exprtk_final : public quaternary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class sf4_var_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class sos_node exprtk_final : public sos_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class sosos_node exprtk_final : public sosos_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class str_sogens_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class str_vararg_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class str_xoxr_node exprtk_final : public sos_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class str_xrox_node exprtk_final : public sos_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class str_xroxr_node exprtk_final : public sos_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class string_concat_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class string_literal_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class string_range_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class string_size_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class stringvar_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class stringvar_size_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class swap_generic_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class swap_genstrings_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class swap_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class swap_string_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class swap_vecvec_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class switch_n_node exprtk_final : public switch_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class unary_branch_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class unary_variable_node exprtk_final : public uv_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class unary_vector_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class uvouv_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class vararg_function_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class vararg_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class vararg_varnode exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class variable_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class vec_binop_valvec_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class vec_binop_vecval_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class vec_binop_vecvec_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class vector_assignment_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class vector_elem_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class vector_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class vectorize_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class vob_node exprtk_final : public vob_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class voc_node exprtk_final : public voc_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class vov_node exprtk_final : public vov_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class while_loop_bc_rtc_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	/^      class while_loop_rtc_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	extern_libs/exprtk.h	40718;"	d
exprtk_final	extern_libs/exprtk.h	87;"	d
exprtk_loop	extern_libs/exprtk.h	10551;"	d
exprtk_loop	extern_libs/exprtk.h	10587;"	d
exprtk_loop	extern_libs/exprtk.h	10705;"	d
exprtk_loop	extern_libs/exprtk.h	10742;"	d
exprtk_loop	extern_libs/exprtk.h	10985;"	d
exprtk_loop	extern_libs/exprtk.h	11021;"	d
exprtk_loop	extern_libs/exprtk.h	11137;"	d
exprtk_loop	extern_libs/exprtk.h	11176;"	d
exprtk_loop	extern_libs/exprtk.h	11329;"	d
exprtk_loop	extern_libs/exprtk.h	11369;"	d
exprtk_loop	extern_libs/exprtk.h	11491;"	d
exprtk_loop	extern_libs/exprtk.h	11530;"	d
exprtk_loop	extern_libs/exprtk.h	11650;"	d
exprtk_loop	extern_libs/exprtk.h	11689;"	d
exprtk_loop	extern_libs/exprtk.h	11805;"	d
exprtk_loop	extern_libs/exprtk.h	11844;"	d
exprtk_loop	extern_libs/exprtk.h	14027;"	d
exprtk_loop	extern_libs/exprtk.h	14065;"	d
exprtk_loop	extern_libs/exprtk.h	14128;"	d
exprtk_loop	extern_libs/exprtk.h	14166;"	d
exprtk_loop	extern_libs/exprtk.h	9001;"	d
exprtk_loop	extern_libs/exprtk.h	9040;"	d
exprtk_override	extern_libs/exprtk.h	40714;"	d
exprtk_override	extern_libs/exprtk.h	86;"	d
exprtk_process_digit	extern_libs/exprtk.h	1726;"	d
exprtk_process_digit	extern_libs/exprtk.h	1757;"	d
exprtk_register_complex_type_tag	extern_libs/exprtk.h	796;"	d
exprtk_register_function	extern_libs/exprtk.h	38979;"	d
exprtk_register_function	extern_libs/exprtk.h	38990;"	d
exprtk_register_function	extern_libs/exprtk.h	39472;"	d
exprtk_register_function	extern_libs/exprtk.h	39487;"	d
exprtk_register_function	extern_libs/exprtk.h	40633;"	d
exprtk_register_function	extern_libs/exprtk.h	40665;"	d
exprtk_register_int_type_tag	extern_libs/exprtk.h	800;"	d
exprtk_register_int_type_tag	extern_libs/exprtk.h	820;"	d
exprtk_register_real_type_tag	extern_libs/exprtk.h	792;"	d
exprtk_register_real_type_tag	extern_libs/exprtk.h	819;"	d
extended_opr_switch_statements	extern_libs/exprtk.h	30074;"	d
extended_opr_switch_statements	extern_libs/exprtk.h	35974;"	d
extent	algorithm/Domain.h	/^  std::pair<Vec2d,Vec2d> extent() const $/;"	f	class:TQMesh::Domain
f	extern_libs/exprtk.h	/^          ff00_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc00
f	extern_libs/exprtk.h	/^         ff01_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc01
f	extern_libs/exprtk.h	/^         ff02_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc02
f	extern_libs/exprtk.h	/^         ff03_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc03
f	extern_libs/exprtk.h	/^         ff04_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc04
f	extern_libs/exprtk.h	/^         ff05_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc05
f	extern_libs/exprtk.h	/^         ff06_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc06
f	extern_libs/exprtk.h	/^         ff07_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc07
f	extern_libs/exprtk.h	/^         ff08_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc08
f	extern_libs/exprtk.h	/^         ff09_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc09
f	extern_libs/exprtk.h	/^         ff10_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc10
f	extern_libs/exprtk.h	/^         ff11_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc11
f	extern_libs/exprtk.h	/^         ff12_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc12
f	extern_libs/exprtk.h	/^         ff13_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc13
f	extern_libs/exprtk.h	/^         ff14_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc14
f	extern_libs/exprtk.h	/^         ff15_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc15
f	extern_libs/exprtk.h	/^         inline bfunc_t f() const$/;"	f	class:exprtk::details::exprtk_final
f	extern_libs/exprtk.h	/^         inline ufunc_t f()$/;"	f	class:exprtk::details::exprtk_final
f	extern_libs/exprtk.h	/^         qfunc_t f() const$/;"	f	class:exprtk::details::exprtk_final
f	extern_libs/exprtk.h	/^         tfunc_t f() const$/;"	f	class:exprtk::details::exprtk_final
f0	extern_libs/exprtk.h	/^         bfunc_t f0() const$/;"	f	class:exprtk::details::exprtk_final
f0	extern_libs/exprtk.h	/^         inline bfunc_t f0() const$/;"	f	class:exprtk::details::exprtk_final
f0_	extern_libs/exprtk.h	/^         const bfunc_t f0_;$/;"	m	class:exprtk::details::exprtk_final
f1	extern_libs/exprtk.h	/^         bfunc_t f1() const$/;"	f	class:exprtk::details::exprtk_final
f1	extern_libs/exprtk.h	/^         inline bfunc_t f1() const$/;"	f	class:exprtk::details::exprtk_final
f1_	extern_libs/exprtk.h	/^         const bfunc_t f1_;$/;"	m	class:exprtk::details::exprtk_final
f2	extern_libs/exprtk.h	/^         inline bfunc_t f2() const$/;"	f	class:exprtk::details::exprtk_final
f2_	extern_libs/exprtk.h	/^         const bfunc_t f2_;$/;"	m	class:exprtk::details::exprtk_final
f_	algorithm/Domain.h	/^  UserSizeFunction f_;$/;"	m	class:TQMesh::SizeFunction
f_	extern_libs/exprtk.h	/^         const bfunc_t f_;$/;"	m	class:exprtk::details::exprtk_final
f_	extern_libs/exprtk.h	/^         const qfunc_t f_;$/;"	m	class:exprtk::details::exprtk_final
f_	extern_libs/exprtk.h	/^         const tfunc_t f_;$/;"	m	class:exprtk::details::exprtk_final
facet_l	algorithm/Edge.h	/^  Facet* facet_l() { return face_l_; }$/;"	f	class:TQMesh::Edge
facet_l	algorithm/Edge.h	/^  const Facet* facet_l() const { return face_l_; }$/;"	f	class:TQMesh::Edge
facet_l	algorithm/Edge.h	/^  void facet_l(Facet* f) { face_l_ = f; }$/;"	f	class:TQMesh::Edge
facet_r	algorithm/Edge.h	/^  Facet* facet_r() { return face_r_; }$/;"	f	class:TQMesh::Edge
facet_r	algorithm/Edge.h	/^  const Facet* facet_r() const { return face_r_; }$/;"	f	class:TQMesh::Edge
facet_r	algorithm/Edge.h	/^  void facet_r(Facet* f) { face_r_ = f; }$/;"	f	class:TQMesh::Edge
facets	algorithm/Vertex.h	/^  const Facet& facets(size_t i) const$/;"	f	class:TQMesh::Vertex
facets	algorithm/Vertex.h	/^  const FacetList& facets() const { return facets_;}$/;"	f	class:TQMesh::Vertex
facets	tests/tests_Vertex.cpp	/^void facets()$/;"	f	namespace:VertexTests
facets_	algorithm/Quad.h	/^  FacetArray           facets_;$/;"	m	class:TQMesh::Quad
facets_	algorithm/Triangle.h	/^  FacetArray           facets_;$/;"	m	class:TQMesh::Triangle
fast_exp	extern_libs/exprtk.h	/^         struct fast_exp$/;"	s	namespace:exprtk::details::numeric
fast_exp	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 0> { static inline T result(const T  ) { return T(1);      } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 1> { static inline T result(const T v) { return v;         } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 2> { static inline T result(const T v) { return v * v;     } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 3> { static inline T result(const T v) { return v * v * v; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 4> { static inline T result(const T v) { T v_2 = v * v; return v_2 * v_2; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 5> { static inline T result(const T v) { return fast_exp<T,4>::result(v) * v; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 6> { static inline T result(const T v) { T v_3 = fast_exp<T,3>::result(v); return v_3 * v_3; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 7> { static inline T result(const T v) { return fast_exp<T,6>::result(v) * v; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 8> { static inline T result(const T v) { T v_4 = fast_exp<T,4>::result(v); return v_4 * v_4; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 9> { static inline T result(const T v) { return fast_exp<T,8>::result(v) * v; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T,10> { static inline T result(const T v) { T v_5 = fast_exp<T,5>::result(v); return v_5 * v_5; } };$/;"	s	namespace:exprtk::details::numeric
ff00_functor	extern_libs/exprtk.h	/^      typedef T (*ff00_functor)();$/;"	t	class:exprtk::symbol_table
ff01_functor	extern_libs/exprtk.h	/^      typedef T (*ff01_functor)(T);$/;"	t	class:exprtk::symbol_table
ff02_functor	extern_libs/exprtk.h	/^      typedef T (*ff02_functor)(T, T);$/;"	t	class:exprtk::symbol_table
ff03_functor	extern_libs/exprtk.h	/^      typedef T (*ff03_functor)(T, T, T);$/;"	t	class:exprtk::symbol_table
ff04_functor	extern_libs/exprtk.h	/^      typedef T (*ff04_functor)(T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff05_functor	extern_libs/exprtk.h	/^      typedef T (*ff05_functor)(T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff06_functor	extern_libs/exprtk.h	/^      typedef T (*ff06_functor)(T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff07_functor	extern_libs/exprtk.h	/^      typedef T (*ff07_functor)(T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff08_functor	extern_libs/exprtk.h	/^      typedef T (*ff08_functor)(T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff09_functor	extern_libs/exprtk.h	/^      typedef T (*ff09_functor)(T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff10_functor	extern_libs/exprtk.h	/^      typedef T (*ff10_functor)(T, T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff11_functor	extern_libs/exprtk.h	/^      typedef T (*ff11_functor)(T, T, T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff12_functor	extern_libs/exprtk.h	/^      typedef T (*ff12_functor)(T, T, T, T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff13_functor	extern_libs/exprtk.h	/^      typedef T (*ff13_functor)(T, T, T, T, T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff14_functor	extern_libs/exprtk.h	/^      typedef T (*ff14_functor)(T, T, T, T, T, T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff15_functor	extern_libs/exprtk.h	/^      typedef T (*ff15_functor)(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
file	extern_libs/exprtk.h	/^   namespace rtl { namespace io { namespace file { namespace details$/;"	n	namespace:exprtk::rtl::io
file	utils/Testing.h	/^  const std::string& file() const { return file_; }$/;"	f	class:CppUtils::TestData
file_descriptor	extern_libs/exprtk.h	/^         file_descriptor(const std::string& fname, const std::string& access)$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
file_descriptor	extern_libs/exprtk.h	/^      struct file_descriptor$/;"	s	namespace:exprtk::rtl::io::file::details
file_mode	extern_libs/exprtk.h	/^      enum file_mode$/;"	g	namespace:exprtk::rtl::io::file::details
file_name	extern_libs/exprtk.h	/^         std::string file_name;$/;"	m	struct:exprtk::rtl::io::file::details::file_descriptor
final_check	tests/tests_MeshChecker.cpp	/^void final_check()$/;"	f	namespace:CheckerTests
final_node_	extern_libs/exprtk.h	/^         branch_t              final_node_;$/;"	m	class:exprtk::details::exprtk_final
final_stmt_return	extern_libs/exprtk.h	/^         bool final_stmt_return() const$/;"	f	class:exprtk::parser::dependent_entity_collector
final_stmt_return_	extern_libs/exprtk.h	/^         bool final_stmt_return_;$/;"	m	class:exprtk::parser::dependent_entity_collector
find_next_layer_endings	algorithm/QuadLayering.h	/^  bool find_next_layer_endings(QuadLayerVertices& quad_layer_verts)$/;"	f	class:TQMesh::QuadLayering
find_start_and_ending_edges	algorithm/QuadLayering.h	/^  bool find_start_and_ending_edges(const Vec2d& xy_start,$/;"	f	class:TQMesh::QuadLayering
finish_quad_layer	algorithm/QuadLayering.h	/^  void finish_quad_layer(QuadLayerVertices& quad_layer_verts)$/;"	f	class:TQMesh::QuadLayering
finished	extern_libs/exprtk.h	/^         inline bool finished() const$/;"	f	class:exprtk::lexer::generator
first_height	algorithm/QuadLayering.h	/^  QuadLayering& first_height(double h) $/;"	f	class:TQMesh::QuadLayering
first_height	algorithm/QuadLayering.h	/^  double first_height() const { return first_height_; }$/;"	f	class:TQMesh::QuadLayering
fixed_vertices	algorithm/Domain.h	/^  VertexVector& fixed_vertices() { return fixed_verts_; }$/;"	f	class:TQMesh::Domain
fixed_vertices	algorithm/Domain.h	/^  const VertexVector& fixed_vertices() const { return fixed_verts_; }$/;"	f	class:TQMesh::Domain
fixed_vertices	examples/04_fixed_vertices.cpp	/^bool fixed_vertices()$/;"	f
floor_impl	extern_libs/exprtk.h	/^            template <typename T> inline T floor_impl(const T v, int_type_tag) { return v;             }$/;"	f	namespace:exprtk::details::numeric::details
floor_impl	extern_libs/exprtk.h	/^            template <typename T> inline T floor_impl(const T v, real_type_tag) { return std::floor(v); }$/;"	f	namespace:exprtk::details::numeric::details
for_loop	extern_libs/exprtk.h	/^         inline expression_node_ptr for_loop(expression_node_ptr& initialiser,$/;"	f	class:exprtk::parser::expression_generator
for_loop_bc_node	extern_libs/exprtk.h	/^         for_loop_bc_node(expression_ptr initialiser,$/;"	f	class:exprtk::details::for_loop_bc_node
for_loop_bc_node	extern_libs/exprtk.h	/^      class for_loop_bc_node : public for_loop_node<T>$/;"	c	namespace:exprtk::details
for_loop_bc_node_t	extern_libs/exprtk.h	/^      typedef details::for_loop_bc_node<T>                for_loop_bc_node_t;$/;"	t	class:exprtk::parser
for_loop_bc_rtc_node	extern_libs/exprtk.h	/^         for_loop_bc_rtc_node(expression_ptr initialiser,$/;"	f	class:exprtk::details::exprtk_final
for_loop_bc_rtc_node_t	extern_libs/exprtk.h	/^      typedef details::for_loop_bc_rtc_node<T>            for_loop_bc_rtc_node_t;$/;"	t	class:exprtk::parser
for_loop_node	extern_libs/exprtk.h	/^         for_loop_node(expression_ptr initialiser,$/;"	f	class:exprtk::details::for_loop_node
for_loop_node	extern_libs/exprtk.h	/^      class for_loop_node : public expression_node<T>$/;"	c	namespace:exprtk::details
for_loop_node_t	extern_libs/exprtk.h	/^      typedef details::for_loop_node<T>                   for_loop_node_t;$/;"	t	class:exprtk::parser
for_loop_rtc_node	extern_libs/exprtk.h	/^         for_loop_rtc_node(expression_ptr initialiser,$/;"	f	class:exprtk::details::exprtk_final
for_loop_rtc_node_t	extern_libs/exprtk.h	/^      typedef details::for_loop_rtc_node<T>               for_loop_rtc_node_t;$/;"	t	class:exprtk::parser
forward	extern_libs/exprtk.h	/^      inline bool forward(const std::string& name,$/;"	f	class:exprtk::function_compositor
found	utils/ParaReader.h	/^  bool found() const { return found_; }$/;"	f	class:CppUtils::ParameterBase
found	utils/ParaReader.h	/^  bool found(const string& name)$/;"	f	class:CppUtils::ParaBlock
found	utils/ParaReader.h	/^  void found(bool f) { found_ = f; }$/;"	f	class:CppUtils::ParameterBase
fp_map_	extern_libs/exprtk.h	/^      std::vector<funcparam_t> fp_map_;$/;"	m	class:exprtk::function_compositor
frac_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  frac_impl(const T  , int_type_tag) { return T(0);          }$/;"	f	namespace:exprtk::details::numeric::details
frac_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  frac_impl(const T v, real_type_tag) { return (v - static_cast<long long>(v)); }$/;"	f	namespace:exprtk::details::numeric::details
free	extern_libs/exprtk.h	/^         void free()$/;"	f	struct:exprtk::details::range_pack
free	extern_libs/exprtk.h	/^         void inline free(expression_node<T>*& e) const$/;"	f	class:exprtk::details::node_allocator
free_all_nodes	extern_libs/exprtk.h	/^      inline void free_all_nodes(NodeAllocator& node_allocator, Sequence<expression_node<T>*,Allocator>& b)$/;"	f	namespace:exprtk::details
free_all_nodes	extern_libs/exprtk.h	/^      inline void free_all_nodes(NodeAllocator& node_allocator, expression_node<T>* (&b)[N])$/;"	f	namespace:exprtk::details
free_element	extern_libs/exprtk.h	/^         inline void free_element(scope_element& se)$/;"	f	class:exprtk::parser::scope_element_manager
free_function_list_	extern_libs/exprtk.h	/^            std::vector<ifunction<T>*> free_function_list_;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
free_node	extern_libs/exprtk.h	/^      inline void free_node(NodeAllocator&, expression_node<T>*& node)$/;"	f	namespace:exprtk::details
freefunc00	extern_libs/exprtk.h	/^          explicit freefunc00(ff00_functor ff) : exprtk::ifunction<T>(0), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc00
freefunc00	extern_libs/exprtk.h	/^       struct freefunc00 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc01	extern_libs/exprtk.h	/^         explicit freefunc01(ff01_functor ff) : exprtk::ifunction<T>(1), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc01
freefunc01	extern_libs/exprtk.h	/^      struct freefunc01 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc02	extern_libs/exprtk.h	/^         explicit freefunc02(ff02_functor ff) : exprtk::ifunction<T>(2), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc02
freefunc02	extern_libs/exprtk.h	/^      struct freefunc02 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc03	extern_libs/exprtk.h	/^         explicit freefunc03(ff03_functor ff) : exprtk::ifunction<T>(3), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc03
freefunc03	extern_libs/exprtk.h	/^      struct freefunc03 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc04	extern_libs/exprtk.h	/^         explicit freefunc04(ff04_functor ff) : exprtk::ifunction<T>(4), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc04
freefunc04	extern_libs/exprtk.h	/^      struct freefunc04 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc05	extern_libs/exprtk.h	/^         explicit freefunc05(ff05_functor ff) : exprtk::ifunction<T>(5), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc05
freefunc05	extern_libs/exprtk.h	/^      struct freefunc05 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc06	extern_libs/exprtk.h	/^         explicit freefunc06(ff06_functor ff) : exprtk::ifunction<T>(6), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc06
freefunc06	extern_libs/exprtk.h	/^      struct freefunc06 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc07	extern_libs/exprtk.h	/^         explicit freefunc07(ff07_functor ff) : exprtk::ifunction<T>(7), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc07
freefunc07	extern_libs/exprtk.h	/^      struct freefunc07 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc08	extern_libs/exprtk.h	/^         explicit freefunc08(ff08_functor ff) : exprtk::ifunction<T>(8), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc08
freefunc08	extern_libs/exprtk.h	/^      struct freefunc08 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc09	extern_libs/exprtk.h	/^         explicit freefunc09(ff09_functor ff) : exprtk::ifunction<T>(9), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc09
freefunc09	extern_libs/exprtk.h	/^      struct freefunc09 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc10	extern_libs/exprtk.h	/^         explicit freefunc10(ff10_functor ff) : exprtk::ifunction<T>(10), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc10
freefunc10	extern_libs/exprtk.h	/^      struct freefunc10 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc11	extern_libs/exprtk.h	/^         explicit freefunc11(ff11_functor ff) : exprtk::ifunction<T>(11), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc11
freefunc11	extern_libs/exprtk.h	/^      struct freefunc11 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc12	extern_libs/exprtk.h	/^         explicit freefunc12(ff12_functor ff) : exprtk::ifunction<T>(12), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc12
freefunc12	extern_libs/exprtk.h	/^      struct freefunc12 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc13	extern_libs/exprtk.h	/^         explicit freefunc13(ff13_functor ff) : exprtk::ifunction<T>(13), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc13
freefunc13	extern_libs/exprtk.h	/^      struct freefunc13 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc14	extern_libs/exprtk.h	/^         explicit freefunc14(ff14_functor ff) : exprtk::ifunction<T>(14), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc14
freefunc14	extern_libs/exprtk.h	/^      struct freefunc14 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc15	extern_libs/exprtk.h	/^         explicit freefunc15(ff15_functor ff) : exprtk::ifunction<T>(15), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc15
freefunc15	extern_libs/exprtk.h	/^      struct freefunc15 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
front	extern_libs/exprtk.h	/^         inline const type_store& front() const$/;"	f	class:exprtk::type_store::parameter_list
front	extern_libs/exprtk.h	/^         inline type_store& front()$/;"	f	class:exprtk::type_store::parameter_list
front	extern_libs/exprtk.h	/^      inline const char_t& front(const std::string& s)$/;"	f	namespace:exprtk::details
front	utils/Container.h	/^  T& front() $/;"	f	class:CppUtils::Container
front	utils/Container.h	/^  const T& front() const $/;"	f	class:CppUtils::Container
front_	algorithm/FrontUpdate.h	/^  Front&          front_;$/;"	m	class:TQMesh::FrontUpdate
front_update_	algorithm/MeshingStrategy.h	/^  FrontUpdate   front_update_;$/;"	m	class:TQMesh::MeshingStrategy
func	utils/Testing.h	/^  const std::string& func() const { return func_; }$/;"	f	class:CppUtils::TestData
func_0param	extern_libs/exprtk.h	/^         func_0param() : base_func(0) {}$/;"	f	struct:exprtk::function_compositor::func_0param
func_0param	extern_libs/exprtk.h	/^      struct func_0param : public base_func$/;"	s	class:exprtk::function_compositor
func_1param	extern_libs/exprtk.h	/^         func_1param() : base_func(1) {}$/;"	f	struct:exprtk::function_compositor::func_1param
func_1param	extern_libs/exprtk.h	/^      struct func_1param : public base_func$/;"	s	class:exprtk::function_compositor
func_2param	extern_libs/exprtk.h	/^         func_2param() : base_func(2) {}$/;"	f	struct:exprtk::function_compositor::func_2param
func_2param	extern_libs/exprtk.h	/^      struct func_2param : public base_func$/;"	s	class:exprtk::function_compositor
func_3param	extern_libs/exprtk.h	/^         func_3param() : base_func(3) {}$/;"	f	struct:exprtk::function_compositor::func_3param
func_3param	extern_libs/exprtk.h	/^      struct func_3param : public base_func$/;"	s	class:exprtk::function_compositor
func_4param	extern_libs/exprtk.h	/^         func_4param() : base_func(4) {}$/;"	f	struct:exprtk::function_compositor::func_4param
func_4param	extern_libs/exprtk.h	/^      struct func_4param : public base_func$/;"	s	class:exprtk::function_compositor
func_5param	extern_libs/exprtk.h	/^         func_5param() : base_func(5) {}$/;"	f	struct:exprtk::function_compositor::func_5param
func_5param	extern_libs/exprtk.h	/^      struct func_5param : public base_func$/;"	s	class:exprtk::function_compositor
func_6param	extern_libs/exprtk.h	/^         func_6param() : base_func(6) {}$/;"	f	struct:exprtk::function_compositor::func_6param
func_6param	extern_libs/exprtk.h	/^      struct func_6param : public base_func$/;"	s	class:exprtk::function_compositor
funcparam_t	extern_libs/exprtk.h	/^      typedef std::map<std::string,base_func*> funcparam_t;$/;"	t	class:exprtk::function_compositor
function	extern_libs/exprtk.h	/^         function()$/;"	f	struct:exprtk::function_compositor::function
function	extern_libs/exprtk.h	/^         function(const std::string& n)$/;"	f	struct:exprtk::function_compositor::function
function	extern_libs/exprtk.h	/^         function(const std::string& name,$/;"	f	struct:exprtk::function_compositor::function
function	extern_libs/exprtk.h	/^         inline expression_node_ptr function(ifunction_t* f)$/;"	f	class:exprtk::parser::expression_generator
function	extern_libs/exprtk.h	/^         inline expression_node_ptr function(ifunction_t* f, expression_node_ptr (&b)[N])$/;"	f	class:exprtk::parser::expression_generator
function	extern_libs/exprtk.h	/^      struct function$/;"	s	class:exprtk::function_compositor
function_	extern_libs/exprtk.h	/^         GenericFunction* function_;$/;"	m	class:exprtk::details::generic_function_node
function_	extern_libs/exprtk.h	/^         VarArgFunction* function_;$/;"	m	class:exprtk::details::exprtk_final
function_	extern_libs/exprtk.h	/^         ifunction*  function_;$/;"	m	class:exprtk::details::exprtk_final
function_	extern_libs/exprtk.h	/^         ifunction* function_;$/;"	m	class:exprtk::details::exprtk_final
function_N_node	extern_libs/exprtk.h	/^         explicit function_N_node(ifunction* func)$/;"	f	class:exprtk::details::exprtk_final
function_compositor	extern_libs/exprtk.h	/^      function_compositor()$/;"	f	class:exprtk::function_compositor
function_compositor	extern_libs/exprtk.h	/^      function_compositor(const symbol_table_t& st)$/;"	f	class:exprtk::function_compositor
function_compositor	extern_libs/exprtk.h	/^   class function_compositor$/;"	c	namespace:exprtk
function_count	extern_libs/exprtk.h	/^      inline std::size_t function_count() const$/;"	f	class:exprtk::symbol_table
function_disabled	extern_libs/exprtk.h	/^         bool function_disabled(const std::string& function_name) const$/;"	f	class:exprtk::parser::settings_store
function_enabled	extern_libs/exprtk.h	/^         bool function_enabled(const std::string& function_name) const$/;"	f	class:exprtk::parser::settings_store
function_name	extern_libs/exprtk.h	/^      inline std::size_t parse_base_function_call(expression_node_ptr (&param_list)[MaxNumberofParameters], const std::string& function_name = "")$/;"	m	class:exprtk::parser
function_ptr	extern_libs/exprtk.h	/^         typedef typename symbol_table_t::function_ptr function_ptr;$/;"	t	struct:exprtk::parser::symtab_store
function_ptr	extern_libs/exprtk.h	/^      typedef function_t*                         function_ptr;$/;"	t	class:exprtk::symbol_table
function_store	extern_libs/exprtk.h	/^            type_store<function_t        , function_t        > function_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
function_t	extern_libs/exprtk.h	/^         typedef exprtk::ifunction<T>     function_t;$/;"	t	struct:exprtk::function_compositor::base_func
function_t	extern_libs/exprtk.h	/^      typedef ifunction        <T>                function_t;$/;"	t	class:exprtk::symbol_table
function_t	extern_libs/exprtk.h	/^      typedef typename compositor_t::function function_t;$/;"	t	struct:exprtk::type_defs
function_traits	extern_libs/exprtk.h	/^      function_traits()$/;"	f	class:exprtk::function_traits
function_traits	extern_libs/exprtk.h	/^   class function_traits$/;"	c	namespace:exprtk
functor_t	extern_libs/exprtk.h	/^         typedef typename details::functor_t<T> functor_t;$/;"	t	class:exprtk::details::exprtk_final
functor_t	extern_libs/exprtk.h	/^         typedef typename details::functor_t<T> functor_t;$/;"	t	struct:exprtk::details::T0oT1oT20T3process
functor_t	extern_libs/exprtk.h	/^         typedef typename details::functor_t<T> functor_t;$/;"	t	struct:exprtk::details::T0oT1oT2process
functor_t	extern_libs/exprtk.h	/^         typedef typename details::functor_t<T> functor_t;$/;"	t	struct:exprtk::details::opr_base
functor_t	extern_libs/exprtk.h	/^         typedef typename details::functor_t<T> functor_t;$/;"	t	struct:exprtk::details::sf_base
functor_t	extern_libs/exprtk.h	/^      struct functor_t$/;"	s	namespace:exprtk::details
functor_t	extern_libs/exprtk.h	/^      typedef typename details::functor_t<T> functor_t;$/;"	t	class:exprtk::parser
g	extern_libs/exprtk.h	/^      getline<T> g;$/;"	m	struct:exprtk::rtl::io::file::package
g2d_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   g2d_impl(const T v, real_type_tag) { return (v * T(9.0\/10.0)); }$/;"	f	namespace:exprtk::details::numeric::details
gather_entities_to_refine	algorithm/RefinementStrategy.h	/^  void gather_entities_to_refine()$/;"	f	class:TQMesh::QuadRefinement
gen_function_t	extern_libs/exprtk.h	/^         typedef generic_function_node<T,GenericFunction> gen_function_t;$/;"	t	class:exprtk::details::multimode_genfunction_node
gen_function_t	extern_libs/exprtk.h	/^         typedef generic_function_node<T,StringFunction> gen_function_t;$/;"	t	class:exprtk::details::string_function_node
gen_function_t	extern_libs/exprtk.h	/^         typedef generic_function_node<T,igeneric_function_t> gen_function_t;$/;"	t	class:exprtk::details::exprtk_final
generate_elements_exhaustive	algorithm/Triangulation.h	/^  bool generate_elements_exhaustive() $/;"	f	class:TQMesh::Triangulation
generate_mesh	app/TQMeshApp.h	/^  bool generate_mesh()$/;"	f	class:TQMesh::MeshConstruction
generate_quad_layer	algorithm/QuadLayering.h	/^  bool generate_quad_layer(double height)$/;"	f	class:TQMesh::QuadLayering
generator	extern_libs/exprtk.h	/^         generator()$/;"	f	class:exprtk::lexer::generator
generator	extern_libs/exprtk.h	/^      class generator$/;"	c	namespace:exprtk::lexer
generator_t	extern_libs/exprtk.h	/^         typedef generator generator_t;$/;"	t	class:exprtk::lexer::parser_helper
generic_function_call	extern_libs/exprtk.h	/^         inline expression_node_ptr generic_function_call(igeneric_function_t* gf,$/;"	f	class:exprtk::parser::expression_generator
generic_function_node	extern_libs/exprtk.h	/^         explicit generic_function_node(const std::vector<expression_ptr>& arg_list,$/;"	f	class:exprtk::details::generic_function_node
generic_function_node	extern_libs/exprtk.h	/^      class generic_function_node : public expression_node<T>$/;"	c	namespace:exprtk::details
generic_function_ptr	extern_libs/exprtk.h	/^         typedef typename symbol_table_t::generic_function_ptr generic_function_ptr;$/;"	t	struct:exprtk::parser::symtab_store
generic_function_ptr	extern_libs/exprtk.h	/^      typedef generic_function_t*                 generic_function_ptr;$/;"	t	class:exprtk::symbol_table
generic_function_store	extern_libs/exprtk.h	/^            type_store<generic_function_t, generic_function_t> generic_function_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
generic_function_t	extern_libs/exprtk.h	/^      typedef igeneric_function<T>                generic_function_t;$/;"	t	class:exprtk::symbol_table
generic_string_range_node	extern_libs/exprtk.h	/^         generic_string_range_node(expression_ptr str_branch, const range_t& brange)$/;"	f	class:exprtk::details::exprtk_final
generic_string_range_node_t	extern_libs/exprtk.h	/^      typedef details::generic_string_range_node<T>       generic_string_range_node_t;$/;"	t	class:exprtk::parser
generic_type	extern_libs/exprtk.h	/^         typedef type_store<T> generic_type;$/;"	t	class:exprtk::details::null_igenfunc
generic_type	extern_libs/exprtk.h	/^         typedef typename igeneric_function<T>::generic_type generic_type;$/;"	t	struct:exprtk::rtl::io::details::print_impl
generic_type	extern_libs/exprtk.h	/^         typedef typename igfun_t::generic_type        generic_type;$/;"	t	struct:exprtk::rtl::vecops::helper::load_vector_range
generic_type	extern_libs/exprtk.h	/^      typedef type_store<T> generic_type;$/;"	t	class:exprtk::igeneric_function
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::io::file::getline
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::io::file::open
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::io::file::read
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::io::file::write
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::all_false
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::all_true
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::any_false
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::any_true
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::axpby
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::axpbyz
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::axpbz
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::axpy
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::axpyz
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::copy
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::count
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::dot
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::dotk
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::iota
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::nthelement
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::rol
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::ror
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::shift_left
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::shift_right
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::sort
generic_type	extern_libs/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::sumk
get	extern_libs/exprtk.h	/^         inline type_ptr get(const std::string& symbol_name) const$/;"	f	struct:exprtk::symbol_table::type_store
get_active_element	extern_libs/exprtk.h	/^         inline scope_element& get_active_element(const std::string& var_name,$/;"	f	class:exprtk::parser::scope_element_manager
get_bdry_edges	algorithm/Mesh.h	/^  get_bdry_edges(const Vec2d& center, double radius) const$/;"	f	class:TQMesh::Mesh
get_block	utils/ParaReader.h	/^  ParaBlock& get_block(const string& name)$/;"	f	class:CppUtils::ParaBlock
get_boundary_edge	algorithm/Mesh.h	/^  get_boundary_edge(const Vertex& v1, const Vertex& v2, bool dir=false) $/;"	f	class:TQMesh::Mesh
get_closest_vertex	algorithm/EdgeList.h	/^  Vertex& get_closest_vertex(const Vec2d& xy)$/;"	f	class:TQMesh::EdgeList
get_color	utils/Log.h	/^  std::string get_color(LogLevel level)$/;"	f	class:CppUtils::LogProperties
get_conststr_stringvar_name	extern_libs/exprtk.h	/^         inline std::string get_conststr_stringvar_name(const expression_node_ptr& ptr) const$/;"	f	struct:exprtk::parser::symtab_store
get_conststr_stringvar_name	extern_libs/exprtk.h	/^      inline std::string get_conststr_stringvar_name(const expression_ptr& ptr) const$/;"	f	class:exprtk::symbol_table
get_domain	algorithm/MeshBuilder.h	/^  Domain* get_domain(Mesh& mesh)$/;"	f	class:TQMesh::MeshBuilder
get_edge	algorithm/EdgeList.h	/^  get_edge(const Vertex& v, int pos) const$/;"	f	class:TQMesh::EdgeList
get_edge	algorithm/EdgeList.h	/^  get_edge(const Vertex& v1, const Vertex& v2, bool dir=false) const$/;"	f	class:TQMesh::EdgeList
get_edge	algorithm/Mesh.h	/^  Edge* get_edge(const Vertex& v1, const Vertex& v2, bool dir=false)$/;"	f	class:TQMesh::Mesh
get_edge_dir	algorithm/EdgeList.h	/^  Edge* get_edge_dir(const Vertex& v1, const Vertex& v2) const$/;"	f	class:TQMesh::EdgeList
get_edge_nodir	algorithm/EdgeList.h	/^  Edge* get_edge_nodir(const Vertex& v1, const Vertex& v2) const$/;"	f	class:TQMesh::EdgeList
get_edges	algorithm/Domain.h	/^  get_edges (const Vec2d& center, double radius) const $/;"	f	class:TQMesh::Domain
get_edges	algorithm/EdgeList.h	/^  EdgeVector get_edges(const Vec2d& center, const double radius) const$/;"	f	class:TQMesh::EdgeList
get_edges_to_refine	algorithm/Front.h	/^  EdgeVector get_edges_to_refine() const $/;"	f	class:TQMesh::Front
get_element	extern_libs/exprtk.h	/^         inline scope_element& get_element(const std::size_t& index)$/;"	f	class:exprtk::parser::scope_element_manager
get_element	extern_libs/exprtk.h	/^         inline scope_element& get_element(const std::string& var_name,$/;"	f	class:exprtk::parser::scope_element_manager
get_error	extern_libs/exprtk.h	/^      inline parser_error::type get_error(const std::size_t& index) const$/;"	f	class:exprtk::parser
get_file_mode	extern_libs/exprtk.h	/^         file_mode get_file_mode(const std::string& access) const$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
get_from_varptr	extern_libs/exprtk.h	/^         inline type_ptr get_from_varptr(const void* ptr) const$/;"	f	struct:exprtk::symbol_table::type_store
get_front_edges	algorithm/Mesh.h	/^  EdgeVector get_front_edges() const$/;"	f	class:TQMesh::Mesh
get_function	extern_libs/exprtk.h	/^         inline function_ptr get_function(const std::string& function_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_function	extern_libs/exprtk.h	/^      inline function_ptr get_function(const std::string& function_name) const$/;"	f	class:exprtk::symbol_table
get_generic_function	extern_libs/exprtk.h	/^         inline generic_function_ptr get_generic_function(const std::string& function_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_generic_function	extern_libs/exprtk.h	/^      inline generic_function_ptr get_generic_function(const std::string& function_name) const$/;"	f	class:exprtk::symbol_table
get_header	utils/Log.h	/^  const std::string& get_header(LogLevel level) const $/;"	f	class:CppUtils::LogProperties
get_instance	algorithm/Facet.h	/^  static NullFacet& get_instance() $/;"	f	class:TQMesh::NullFacet
get_interface_edges	algorithm/Mesh.h	/^  EdgeVector get_interface_edges() const$/;"	f	class:TQMesh::Mesh
get_interior_edge	algorithm/Mesh.h	/^  get_interior_edge(const Vertex& v1, const Vertex& v2, bool dir=false) $/;"	f	class:TQMesh::Mesh
get_intr_edges	algorithm/Mesh.h	/^  get_intr_edges(const Vec2d& center, double radius) const$/;"	f	class:TQMesh::Mesh
get_items	utils/Container.h	/^  Vector get_items(const Vec2d& center, $/;"	f	class:CppUtils::Container
get_items	utils/Container.h	/^  Vector get_items(const Vec2d& lowleft, $/;"	f	class:CppUtils::Container
get_items	utils/QuadTree.h	/^  size_t get_items(const Vec2<V>& center, $/;"	f	class:CppUtils::QuadTree
get_items	utils/QuadTree.h	/^  size_t get_items(const Vec2<V>& lowleft, $/;"	f	class:CppUtils::QuadTree
get_leaf	utils/QuadTree.h	/^  const QuadTree* get_leaf(const Vec2<V>& query) const$/;"	f	class:CppUtils::QuadTree
get_list	extern_libs/exprtk.h	/^         inline std::size_t get_list(Sequence<std::pair<std::string,RawType>,Allocator>& list) const$/;"	f	struct:exprtk::symbol_table::type_store
get_list	extern_libs/exprtk.h	/^         inline std::size_t get_list(Sequence<std::string,Allocator>& vlist) const$/;"	f	struct:exprtk::symbol_table::type_store
get_loop_runtime_check	extern_libs/exprtk.h	/^         inline loop_runtime_check_ptr get_loop_runtime_check(const loop_runtime_check::loop_types loop_type) const$/;"	f	class:exprtk::parser::expression_generator
get_nearest	utils/Container.h	/^  T* get_nearest(const Vec2d& location) const$/;"	f	class:CppUtils::Container
get_nearest	utils/QuadTree.h	/^  T* get_nearest(const Vec2<V>& query,$/;"	f	class:CppUtils::QuadTree
get_nearest_edge	algorithm/EdgeList.h	/^  Edge* get_nearest_edge(const Vec2d& location) const$/;"	f	class:TQMesh::EdgeList
get_neighbor_mesh_edges	algorithm/Front.h	/^  EdgeVector get_neighbor_mesh_edges(const Edge& e, $/;"	f	class:TQMesh::FrontInitData
get_next_edge	algorithm/Edge.h	/^  Edge* get_next_edge() const$/;"	f	class:TQMesh::Edge
get_operator	extern_libs/exprtk.h	/^         inline details::operator_type get_operator(const binary_functor_t& bop) const$/;"	f	class:exprtk::parser::expression_generator
get_ostream	utils/Log.h	/^  std::ostream& get_ostream(LogLevel level)$/;"	f	class:CppUtils::LogProperties
get_ostream_type	utils/Log.h	/^  OStreamType get_ostream_type(LogLevel level)$/;"	f	class:CppUtils::LogProperties
get_overload_function	extern_libs/exprtk.h	/^         inline generic_function_ptr get_overload_function(const std::string& function_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_overload_function	extern_libs/exprtk.h	/^      inline generic_function_ptr get_overload_function(const std::string& function_name) const$/;"	f	class:exprtk::symbol_table
get_parameter	utils/ParaReader.h	/^  Parameter<T>& get_parameter(const string& name)$/;"	f	class:CppUtils::ParaBlock
get_prev_edge	algorithm/Edge.h	/^  Edge* get_prev_edge() const$/;"	f	class:TQMesh::Edge
get_quads	algorithm/Mesh.h	/^  get_quads(const Vec2d& center, double radius) const$/;"	f	class:TQMesh::Mesh
get_query_data	utils/ParaReader.h	/^  QueryContainer get_query_data(const string& query, $/;"	f	class:CppUtils::ParameterBase
get_string_function	extern_libs/exprtk.h	/^         inline generic_function_ptr get_string_function(const std::string& function_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_string_function	extern_libs/exprtk.h	/^      inline generic_function_ptr get_string_function(const std::string& function_name) const$/;"	f	class:exprtk::symbol_table
get_stringvar	extern_libs/exprtk.h	/^         inline stringvar_ptr get_stringvar(const std::string& string_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_stringvar	extern_libs/exprtk.h	/^      inline stringvar_ptr get_stringvar(const std::string& string_name) const$/;"	f	class:exprtk::symbol_table
get_stringvar_base	extern_libs/exprtk.h	/^      inline stringvar_base<T> get_stringvar_base(const std::string& string_name) const$/;"	f	class:exprtk::symbol_table
get_stringvar_list	extern_libs/exprtk.h	/^      inline std::size_t get_stringvar_list(Sequence<std::pair<std::string,std::string>,Allocator>& svlist) const$/;"	f	class:exprtk::symbol_table
get_stringvar_list	extern_libs/exprtk.h	/^      inline std::size_t get_stringvar_list(Sequence<std::string,Allocator>& svlist) const$/;"	f	class:exprtk::symbol_table
get_stringvar_name	extern_libs/exprtk.h	/^         inline std::string get_stringvar_name(const expression_node_ptr& ptr) const$/;"	f	struct:exprtk::parser::symtab_store
get_stringvar_name	extern_libs/exprtk.h	/^      inline std::string get_stringvar_name(const expression_ptr& ptr) const$/;"	f	class:exprtk::symbol_table
get_symbol_table	extern_libs/exprtk.h	/^         inline symbol_table_t& get_symbol_table(const std::size_t& index = 0)$/;"	f	struct:exprtk::parser::symtab_store
get_symbol_table	extern_libs/exprtk.h	/^      inline const symbol_table<T>& get_symbol_table(const std::size_t& index = 0) const$/;"	f	class:exprtk::expression
get_symbol_table	extern_libs/exprtk.h	/^      inline symbol_table<T>& get_symbol_table(const std::size_t& index = 0)$/;"	f	class:exprtk::expression
get_symbol_table_list	extern_libs/exprtk.h	/^      inline symtab_list_t get_symbol_table_list() const$/;"	f	class:exprtk::expression
get_triangles	algorithm/Mesh.h	/^  get_triangles(const Vec2d& center, double radius) const$/;"	f	class:TQMesh::Mesh
get_valid_boundary_edges	algorithm/Mesh.h	/^  EdgeVector get_valid_boundary_edges() const $/;"	f	class:TQMesh::Mesh
get_valid_interior_edges	algorithm/Mesh.h	/^  EdgeVector get_valid_interior_edges() const$/;"	f	class:TQMesh::Mesh
get_value	utils/ParaReader.h	/^  T get_value(const string& name)$/;"	f	class:CppUtils::ParaBlock
get_value	utils/ParaReader.h	/^  T get_value(size_t i) const$/;"	f	class:CppUtils::Parameter
get_value	utils/ParaReader.h	/^  T get_value(size_t i, const string& name)$/;"	f	class:CppUtils::ParaBlock
get_value	utils/ParaReader.h	/^  T get_value(size_t i, size_t j) const$/;"	f	class:CppUtils::Parameter
get_value	utils/ParaReader.h	/^  T get_value(size_t i, size_t j, const string& name)$/;"	f	class:CppUtils::ParaBlock
get_vararg_function	extern_libs/exprtk.h	/^         inline vararg_function_ptr get_vararg_function(const std::string& vararg_function_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_vararg_function	extern_libs/exprtk.h	/^      inline vararg_function_ptr get_vararg_function(const std::string& vararg_function_name) const$/;"	f	class:exprtk::symbol_table
get_variable	extern_libs/exprtk.h	/^         inline expression_node_ptr get_variable(const T& v)$/;"	f	class:exprtk::parser::scope_element_manager
get_variable	extern_libs/exprtk.h	/^         inline variable_ptr get_variable(const T& var_ref) const$/;"	f	struct:exprtk::parser::symtab_store
get_variable	extern_libs/exprtk.h	/^         inline variable_ptr get_variable(const std::string& variable_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_variable	extern_libs/exprtk.h	/^      inline variable_ptr get_variable(const T& var_ref) const$/;"	f	class:exprtk::symbol_table
get_variable	extern_libs/exprtk.h	/^      inline variable_ptr get_variable(const std::string& variable_name) const$/;"	f	class:exprtk::symbol_table
get_variable_list	extern_libs/exprtk.h	/^      inline std::size_t get_variable_list(Sequence<std::pair<std::string,T>,Allocator>& vlist) const$/;"	f	class:exprtk::symbol_table
get_variable_list	extern_libs/exprtk.h	/^      inline std::size_t get_variable_list(Sequence<std::string,Allocator>& vlist) const$/;"	f	class:exprtk::symbol_table
get_variable_name	extern_libs/exprtk.h	/^         inline std::string get_variable_name(const expression_node_ptr& ptr) const$/;"	f	struct:exprtk::parser::symtab_store
get_variable_name	extern_libs/exprtk.h	/^      inline std::string get_variable_name(const expression_ptr& ptr) const$/;"	f	class:exprtk::symbol_table
get_vector	extern_libs/exprtk.h	/^         inline vector_holder_ptr get_vector(const std::string& vector_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_vector	extern_libs/exprtk.h	/^      inline vector_holder_ptr get_vector(const std::string& vector_name) const$/;"	f	class:exprtk::symbol_table
get_vector_list	extern_libs/exprtk.h	/^      inline std::size_t get_vector_list(Sequence<std::string,Allocator>& vlist) const$/;"	f	class:exprtk::symbol_table
get_vector_name	extern_libs/exprtk.h	/^         inline std::string get_vector_name(const vector_holder_ptr& ptr) const$/;"	f	struct:exprtk::parser::symtab_store
get_vector_name	extern_libs/exprtk.h	/^      inline std::string get_vector_name(const vector_holder_ptr& ptr) const$/;"	f	class:exprtk::symbol_table
get_vertices	algorithm/Mesh.h	/^  get_vertices(const Vec2d& center, double radius) const$/;"	f	class:TQMesh::Mesh
get_x	utils/VecND.h	/^  T& get_x() { return entries_[0]; }$/;"	f	class:CppUtils::VecND
get_x	utils/VecND.h	/^  const T& get_x() const { return entries_[0]; }$/;"	f	class:CppUtils::VecND
get_y	utils/VecND.h	/^  T& get_y() $/;"	f	class:CppUtils::VecND
get_y	utils/VecND.h	/^  const T& get_y() const $/;"	f	class:CppUtils::VecND
get_z	utils/VecND.h	/^  T& get_z() $/;"	f	class:CppUtils::VecND
get_z	utils/VecND.h	/^  const T& get_z() const $/;"	f	class:CppUtils::VecND
getline	extern_libs/exprtk.h	/^         bool getline(std::string& s)$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
getline	extern_libs/exprtk.h	/^      getline()$/;"	f	class:exprtk::rtl::io::file::getline
getline	extern_libs/exprtk.h	/^   class getline : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::io::file
global_loop_batch_size	extern_libs/exprtk.h	/^         const unsigned int global_loop_batch_size = 16;$/;"	m	namespace:exprtk::details::loop_unroll
growth_rate	algorithm/QuadLayering.h	/^  QuadLayering& growth_rate(double r) $/;"	f	class:TQMesh::QuadLayering
growth_rate	algorithm/QuadLayering.h	/^  double growth_rate() const { return growth_rate_; }$/;"	f	class:TQMesh::QuadLayering
gt_op	extern_libs/exprtk.h	/^      struct gt_op : public opr_base<T>$/;"	s	namespace:exprtk::details
gte_op	extern_libs/exprtk.h	/^      struct gte_op : public opr_base<T>$/;"	s	namespace:exprtk::details
handle_runtime_violation	extern_libs/exprtk.h	/^      virtual void handle_runtime_violation(const violation_context&)$/;"	f	struct:exprtk::loop_runtime_check
has_no_property	algorithm/Edge.h	/^  bool has_no_property() const $/;"	f	class:TQMesh::Edge
has_no_property	algorithm/Vertex.h	/^  bool has_no_property() const $/;"	f	class:TQMesh::Vertex
has_property	algorithm/Edge.h	/^  bool has_property(EdgeProperty p) const { return (properties_ & p); }$/;"	f	class:TQMesh::Edge
has_property	algorithm/Vertex.h	/^  bool has_property(VertexProperty p) const { return (properties_ & p); }$/;"	f	class:TQMesh::Vertex
has_side_effects	extern_libs/exprtk.h	/^      inline bool& has_side_effects()$/;"	f	class:exprtk::function_traits
has_side_effects_	extern_libs/exprtk.h	/^      bool has_side_effects_;$/;"	m	class:exprtk::function_traits
height	algorithm/QuadLayering.h	/^  double height() const { return height_; }$/;"	f	class:TQMesh::QuadLayerVertices
heights	algorithm/QuadLayering.h	/^  DoubleVector& heights() { return heights_; }$/;"	f	class:TQMesh::QuadLayerVertices
heights	algorithm/QuadLayering.h	/^  const DoubleVector& heights() const { return heights_; }$/;"	f	class:TQMesh::QuadLayerVertices
helper	extern_libs/exprtk.h	/^      namespace helper$/;"	n	namespace:exprtk::lexer
helper	extern_libs/exprtk.h	/^   namespace helper$/;"	n	namespace:exprtk::rtl::vecops
helper_assembly	extern_libs/exprtk.h	/^         struct helper_assembly$/;"	s	namespace:exprtk::lexer::helper
helper_assembly_	extern_libs/exprtk.h	/^      lexer::helper::helper_assembly helper_assembly_;$/;"	m	class:exprtk::parser
helper_interface	extern_libs/exprtk.h	/^      class helper_interface$/;"	c	namespace:exprtk::lexer
hex_to_bin	extern_libs/exprtk.h	/^      inline uchar_t hex_to_bin(uchar_t h)$/;"	f	namespace:exprtk::details
hypot	extern_libs/exprtk.h	/^         inline T hypot(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
hypot_impl	extern_libs/exprtk.h	/^            inline T hypot_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
hypot_impl	extern_libs/exprtk.h	/^            inline T hypot_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
ia	extern_libs/exprtk.h	/^      iota       <T> ia;$/;"	m	struct:exprtk::rtl::vecops::package
id	algorithm/Mesh.h	/^  int    id()               const { return mesh_id_; }$/;"	f	class:TQMesh::Mesh
id	extern_libs/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode0
id	extern_libs/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode1
id	extern_libs/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode2
id	extern_libs/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode3
id	extern_libs/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode4
id	extern_libs/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT2process::mode0
id	extern_libs/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT2process::mode1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_cocov_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covoc_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covoc_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covov_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covov_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococ_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocov_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocov_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovov_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovov_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>&,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression2
id	extern_libs/exprtk.h	/^            static inline std::string id(expression_generator<Type>&,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression4
id	extern_libs/exprtk.h	/^         static inline std::string id()$/;"	f	class:exprtk::details::exprtk_final
ifunction	extern_libs/exprtk.h	/^         typedef IFunction ifunction;$/;"	t	class:exprtk::details::exprtk_final
ifunction	extern_libs/exprtk.h	/^      explicit ifunction(const std::size_t& pc)$/;"	f	class:exprtk::ifunction
ifunction	extern_libs/exprtk.h	/^   class ifunction : public function_traits$/;"	c	namespace:exprtk
ifunction_t	extern_libs/exprtk.h	/^         typedef ifunction<T>                        ifunction_t;$/;"	t	struct:exprtk::symbol_table::type_store
ifunction_t	extern_libs/exprtk.h	/^      typedef ifunction<T>                                ifunction_t;$/;"	t	class:exprtk::parser
igeneric_function	extern_libs/exprtk.h	/^      igeneric_function(const std::string& param_seq = "", const return_type rtr_type = e_rtrn_scalar)$/;"	f	class:exprtk::igeneric_function
igeneric_function	extern_libs/exprtk.h	/^   class igeneric_function : public function_traits$/;"	c	namespace:exprtk
igeneric_function_empty_body	extern_libs/exprtk.h	17215;"	d
igeneric_function_ptr	extern_libs/exprtk.h	/^         typedef igeneric_function_t* igeneric_function_ptr;$/;"	t	class:exprtk::details::exprtk_final
igeneric_function_t	extern_libs/exprtk.h	/^         typedef igeneric_function<T>                igeneric_function_t;$/;"	t	struct:exprtk::symbol_table::type_store
igeneric_function_t	extern_libs/exprtk.h	/^         typedef null_igenfunc<T>     igeneric_function_t;$/;"	t	class:exprtk::details::exprtk_final
igeneric_function_t	extern_libs/exprtk.h	/^      typedef igeneric_function<T>                        igeneric_function_t;$/;"	t	class:exprtk::parser
igfun_t	extern_libs/exprtk.h	/^         typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	struct:exprtk::rtl::vecops::helper::load_vector_range
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::io::file::getline
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::io::file::open
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::io::file::read
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::io::file::write
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::all_false
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::all_true
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::any_false
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::any_true
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::axpby
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::axpbyz
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::axpbz
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::axpy
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::axpyz
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::copy
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::count
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::dot
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::dotk
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::iota
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::nthelement
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::rol
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::ror
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::shift_left
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::shift_right
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::sort
igfun_t	extern_libs/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::sumk
ignore_set_	extern_libs/exprtk.h	/^            std::set<std::string,details::ilesscompare> ignore_set_;$/;"	m	class:exprtk::lexer::helper::commutative_inserter
ignore_symbol	extern_libs/exprtk.h	/^            inline void ignore_symbol(const std::string& symbol)$/;"	f	class:exprtk::lexer::helper::commutative_inserter
ilesscompare	extern_libs/exprtk.h	/^      struct ilesscompare$/;"	s	namespace:exprtk::details
ilike_op	extern_libs/exprtk.h	/^      struct ilike_op : public opr_base<T>$/;"	s	namespace:exprtk::details
imatch	extern_libs/exprtk.h	/^      inline bool imatch(const char_t c1, const char_t c2)$/;"	f	namespace:exprtk::details
imatch	extern_libs/exprtk.h	/^      inline bool imatch(const std::string& s1, const std::string& s2)$/;"	f	namespace:exprtk::details
in_container	utils/Container.h	/^  bool in_container() const { return in_container_; }$/;"	f	class:CppUtils::ContainerEntry
in_on_quad	utils/Geometry.h	/^inline bool in_on_quad(const Vec2<T>& v, $/;"	f	namespace:CppUtils
in_on_rect	utils/Geometry.h	/^inline bool in_on_rect(const Vec2<T>& v,$/;"	f	namespace:CppUtils
in_on_segment	utils/Geometry.h	/^static inline bool in_on_segment(const Vec2<T>& p,$/;"	f	namespace:CppUtils
in_on_triangle	utils/Geometry.h	/^inline bool in_on_triangle(const Vec2<T>& v,$/;"	f	namespace:CppUtils
in_op	extern_libs/exprtk.h	/^      struct in_op : public opr_base<T>$/;"	s	namespace:exprtk::details
in_quad	utils/Geometry.h	/^inline bool in_quad(const Vec2<T>& v, $/;"	f	namespace:CppUtils
in_quad_layer	algorithm/Vertex.h	/^  bool in_quad_layer() const { return has_property(VertexProperty::in_quad_layer); }$/;"	f	class:TQMesh::Vertex
in_quad_layer	algorithm/Vertex.h	/^  in_quad_layer = 0b00000010,$/;"	m	class:TQMesh::VertexProperty
in_rect	utils/Geometry.h	/^inline bool in_rect(const Vec2<T>& v,$/;"	f	namespace:CppUtils
in_segment	utils/Geometry.h	/^static inline bool in_segment(const Vec2<T>& p,$/;"	f	namespace:CppUtils
in_triangle	utils/Geometry.h	/^inline bool in_triangle(const Vec2<T>& v,$/;"	f	namespace:CppUtils
in_use	extern_libs/exprtk.h	/^      inline bool in_use() const$/;"	f	class:exprtk::timer
in_use_	extern_libs/exprtk.h	/^      bool in_use_;$/;"	m	class:exprtk::timer
incrementor_	extern_libs/exprtk.h	/^         branch_t incrementor_;$/;"	m	class:exprtk::details::for_loop_node
index	algorithm/Vertex.h	/^  unsigned int index() const { return index_; }$/;"	f	class:TQMesh::Vertex
index	algorithm/Vertex.h	/^  void index (unsigned int i) { index_ = i; }$/;"	f	class:TQMesh::Vertex
index	extern_libs/exprtk.h	/^         std::size_t  index;$/;"	m	struct:exprtk::parser::scope_element
index_	extern_libs/exprtk.h	/^         branch_t          index_;$/;"	m	class:exprtk::details::exprtk_final
index_	extern_libs/exprtk.h	/^         branch_t index_;$/;"	m	class:exprtk::details::exprtk_final
index_	extern_libs/exprtk.h	/^         const std::size_t index_;$/;"	m	class:exprtk::details::exprtk_final
inequality_disabled	extern_libs/exprtk.h	/^         bool inequality_disabled(const details::operator_type& inequality) const$/;"	f	class:exprtk::parser::settings_store
inequality_enabled	extern_libs/exprtk.h	/^         bool inequality_enabled(const details::operator_type& inequality) const$/;"	f	class:exprtk::parser::settings_store
inequality_opr_to_string	extern_libs/exprtk.h	/^         std::string inequality_opr_to_string(details::operator_type opr) const$/;"	f	class:exprtk::parser::settings_store
inequality_ops_list	extern_libs/exprtk.h	/^      static const std::string inequality_ops_list[] =$/;"	m	namespace:exprtk::details
inequality_ops_list_size	extern_libs/exprtk.h	/^      static const std::size_t inequality_ops_list_size = sizeof(inequality_ops_list) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
info_header_	utils/Log.h	/^  std::string info_header_   = "[INFO] ";$/;"	m	class:CppUtils::LogProperties
information	extern_libs/exprtk.h	/^   namespace information$/;"	n	namespace:exprtk
init	extern_libs/exprtk.h	/^         inline bool init(const std::string& str)$/;"	f	class:exprtk::lexer::parser_helper
init	extern_libs/exprtk.h	/^         virtual void init()                     {              }$/;"	f	class:exprtk::lexer::helper_interface
init_FixedVertices	tests/TestBuilder.h	/^  void init_FixedVertices()$/;"	f	class:TQMesh::TestBuilder
init_LakeSuperior	tests/TestBuilder.h	/^  void init_LakeSuperior()$/;"	f	class:TQMesh::TestBuilder
init_NormalStepAndSharpEdge	tests/TestBuilder.h	/^  void init_NormalStepAndSharpEdge()$/;"	f	class:TQMesh::TestBuilder
init_RefinedTriangle	tests/TestBuilder.h	/^  void init_RefinedTriangle()$/;"	f	class:TQMesh::TestBuilder
init_SharpStepAndSharpEdge	tests/TestBuilder.h	/^  void init_SharpStepAndSharpEdge()$/;"	f	class:TQMesh::TestBuilder
init_TriangleSquareCircle	tests/TestBuilder.h	/^  void init_TriangleSquareCircle()$/;"	f	class:TQMesh::TestBuilder
init_UnitCircle	tests/TestBuilder.h	/^  void init_UnitCircle()$/;"	f	class:TQMesh::TestBuilder
init_UnitSquare	tests/TestBuilder.h	/^  void init_UnitSquare()$/;"	f	class:TQMesh::TestBuilder
init_advancing_front	algorithm/MeshingStrategy.h	/^  Edge* init_advancing_front(bool sort_edges=true)$/;"	f	class:TQMesh::MeshingStrategy
init_branches	extern_libs/exprtk.h	/^         virtual bool init_branches()$/;"	f	class:exprtk::details::generic_function_node
init_domain_vertices	app/TQMeshApp.h	/^  void init_domain_vertices(ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
init_element_color	app/TQMeshApp.h	/^  void init_element_color(ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
init_exterior_boundary	app/TQMeshApp.h	/^  void init_exterior_boundary(ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
init_fixed_vertices	app/TQMeshApp.h	/^  void init_fixed_vertices(ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
init_front	algorithm/Front.h	/^  void init_front(const Domain&            domain, $/;"	f	class:TQMesh::Front
init_front	algorithm/Front.h	/^  void init_front(const Mesh& mesh)$/;"	f	class:TQMesh::Front
init_front_edges	algorithm/Front.h	/^  EdgeVector init_front_edges(const EdgeVector&   front_edges,$/;"	f	class:TQMesh::Front
init_interior_boundaries	app/TQMeshApp.h	/^  void init_interior_boundaries(ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
init_mesh_domain	app/TQMeshApp.h	/^  void init_mesh_domain(ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
init_mesh_vertices	algorithm/Front.h	/^  VertexVector init_mesh_vertices(const EdgeVector& front_edges,$/;"	f	class:TQMesh::Front
init_mesh_vertices	app/TQMeshApp.h	/^  void init_mesh_vertices(ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
init_meshing_algorithm	app/TQMeshApp.h	/^  void init_meshing_algorithm(ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
init_parameter_file_reader	app/TQMeshApp.h	/^  void init_parameter_file_reader()$/;"	f	class:TQMesh::TQMeshApp
init_precompilation	extern_libs/exprtk.h	/^      inline void init_precompilation()$/;"	f	class:exprtk::parser
init_quad_layers	app/TQMeshApp.h	/^  void init_quad_layers(ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
init_refinement_parameters	app/TQMeshApp.h	/^  void init_refinement_parameters(ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
init_size_function	app/size_function.cpp	/^UserSizeFunction init_size_function(const std::string& expr)$/;"	f
init_smoothing_parameters	app/TQMeshApp.h	/^  void init_smoothing_parameters(ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
init_synthesize_map	extern_libs/exprtk.h	/^         inline void init_synthesize_map()$/;"	f	class:exprtk::parser::expression_generator
init_vertex_connectivity	algorithm/SmoothingStrategy.h	/^  void init_vertex_connectivity()$/;"	f	class:TQMesh::SmoothingStrategy
initialised_	extern_libs/exprtk.h	/^         bool                  initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	extern_libs/exprtk.h	/^         bool                initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	extern_libs/exprtk.h	/^         bool              initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	extern_libs/exprtk.h	/^         bool             initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	extern_libs/exprtk.h	/^         bool            initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	extern_libs/exprtk.h	/^         bool         initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	extern_libs/exprtk.h	/^         bool        initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	extern_libs/exprtk.h	/^         bool initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialiser_	extern_libs/exprtk.h	/^         branch_t initialiser_;$/;"	m	class:exprtk::details::for_loop_node
initialiser_list_	extern_libs/exprtk.h	/^         std::vector<expression_ptr> initialiser_list_;$/;"	m	class:exprtk::details::exprtk_final
initialization	tests/tests_Front.cpp	/^void initialization()$/;"	f	namespace:FrontTests
initialization	tests/tests_Mesh.cpp	/^void initialization()$/;"	f	namespace:MeshTests
initialization	tests/tests_MeshGenerator.cpp	/^void initialization()$/;"	f	namespace:MeshGeneratorTests
initialization	tests/tests_Quad.cpp	/^void initialization()$/;"	f	namespace:QuadTests
initialization	tests/tests_Triangle.cpp	/^void initialization()$/;"	f	namespace:TriangleTests
input_param_cnt_	extern_libs/exprtk.h	/^         std::size_t input_param_cnt_;$/;"	m	class:exprtk::parser::scope_element_manager
inrange_op	extern_libs/exprtk.h	/^      struct inrange_op : public opr_base<T>$/;"	s	namespace:exprtk::details
insert	extern_libs/exprtk.h	/^            inline int insert(const lexer::token& t0, const lexer::token& t1, lexer::token& new_token)$/;"	f	class:exprtk::lexer::helper::commutative_inserter
insert	utils/Container.h	/^  T& insert( const_iterator pos, Args&&... args )$/;"	f	class:CppUtils::Container
insert_boundary	algorithm/Domain.h	/^  Boundary& insert_boundary( const_iterator pos, Args&&... args )$/;"	f	class:TQMesh::Domain
insert_edge	algorithm/Boundary.h	/^  Edge& insert_edge(const_iterator pos, Vertex& v1, Vertex& v2, $/;"	f	class:TQMesh::Boundary
insert_edge	algorithm/EdgeList.h	/^  virtual Edge& insert_edge(const_iterator pos, Vertex& v1, Vertex& v2, $/;"	f	class:TQMesh::EdgeList
insert_front	extern_libs/exprtk.h	/^         inline void insert_front(token_t::token_type tk_type)$/;"	f	class:exprtk::lexer::generator
instance	utils/Testing.h	/^  static std::vector<TestData>& instance()$/;"	f	class:CppUtils::TestDataSingleton
int_type_tag	extern_libs/exprtk.h	/^            struct int_type_tag     { int_type_tag    () {} };$/;"	f	struct:exprtk::details::numeric::details::int_type_tag
int_type_tag	extern_libs/exprtk.h	/^            struct int_type_tag     { int_type_tag    () {} };$/;"	s	namespace:exprtk::details::numeric::details
integrate	extern_libs/exprtk.h	/^   inline T integrate(const expression<T>& e,$/;"	f	namespace:exprtk
interior_edges	algorithm/Mesh.h	/^  EdgeList& interior_edges() { return intr_edges_; }$/;"	f	class:TQMesh::Mesh
interior_edges	algorithm/Mesh.h	/^  const EdgeList& interior_edges() const { return intr_edges_; }$/;"	f	class:TQMesh::Mesh
interior_exterior	tests/tests_Boundary.cpp	/^void interior_exterior()$/;"	f	namespace:BoundaryTests
intersects_domain	algorithm/Quad.h	/^  bool intersects_domain(const Domain& domain) const$/;"	f	class:TQMesh::Quad
intersects_domain	algorithm/Triangle.h	/^  bool intersects_domain(const Domain& domain) const $/;"	f	class:TQMesh::Triangle
intersects_domain	tests/tests_Triangle.cpp	/^void intersects_domain()$/;"	f	namespace:TriangleTests
intersects_edgelist	algorithm/EdgeList.h	/^  bool intersects_edgelist(const EdgeList& edge_list) const$/;"	f	class:TQMesh::EdgeList
intersects_facet	algorithm/Vertex.h	/^  bool intersects_facet(const Container<T>& facets,$/;"	f	class:TQMesh::Vertex
intersects_front	algorithm/Quad.h	/^  bool intersects_front(const Front& front,$/;"	f	class:TQMesh::Quad
intersects_front	algorithm/Triangle.h	/^  bool intersects_front(const Front& front, const double range) const $/;"	f	class:TQMesh::Triangle
intersects_mesh_edges	algorithm/Vertex.h	/^  bool intersects_mesh_edges(const Mesh& mesh, $/;"	f	class:TQMesh::Vertex
intersects_quad	algorithm/Quad.h	/^  bool intersects_quad(const Container<Q>& quads,$/;"	f	class:TQMesh::Quad
intersects_quad	algorithm/Triangle.h	/^  bool intersects_quad(const Container<T>& quads,$/;"	f	class:TQMesh::Triangle
intersects_self	algorithm/EdgeList.h	/^  bool intersects_self(void) const$/;"	f	class:TQMesh::EdgeList
intersects_triangle	algorithm/Quad.h	/^  bool intersects_triangle(const Container<T>& tris,$/;"	f	class:TQMesh::Quad
intersects_triangle	algorithm/Triangle.h	/^  bool intersects_triangle(const Container<T>& tris,$/;"	f	class:TQMesh::Triangle
intersects_triangle	tests/tests_Triangle.cpp	/^void intersects_triangle()$/;"	f	namespace:TriangleTests
intersects_vertex	algorithm/Facet.h	/^  virtual bool intersects_vertex(const Vertex& v) const$/;"	f	class:TQMesh::Facet
intersects_vertex	algorithm/Quad.h	/^  bool intersects_vertex(const Vertices& verts,$/;"	f	class:TQMesh::Quad
intersects_vertex	algorithm/Triangle.h	/^  bool intersects_vertex(const Vertices& verts,$/;"	f	class:TQMesh::Triangle
intersects_vertex	tests/tests_Triangle.cpp	/^void intersects_vertex()$/;"	f	namespace:TriangleTests
inv_binary_op_map_	extern_libs/exprtk.h	/^         inv_binary_op_map_t*     inv_binary_op_map_;$/;"	m	class:exprtk::parser::expression_generator
inv_binary_op_map_	extern_libs/exprtk.h	/^      inv_binary_op_map_t inv_binary_op_map_;$/;"	m	class:exprtk::parser
inv_binary_op_map_t	extern_libs/exprtk.h	/^      typedef std::map<binary_functor_t,operator_t> inv_binary_op_map_t;$/;"	t	class:exprtk::parser
invalid_bracket_check	extern_libs/exprtk.h	/^            bool invalid_bracket_check(const lexer::token::token_type base, const lexer::token::token_type t)$/;"	f	class:exprtk::lexer::helper::sequence_validator
invalid_comb_	extern_libs/exprtk.h	/^            set_t invalid_comb_;$/;"	m	class:exprtk::lexer::helper::sequence_validator
invalid_comb_	extern_libs/exprtk.h	/^            set_t invalid_comb_;$/;"	m	class:exprtk::lexer::helper::sequence_validator_3tokens
invalid_range	extern_libs/exprtk.h	/^      inline bool invalid_range(const Vector& v, const std::size_t r0, const std::size_t r1)$/;"	f	namespace:exprtk::rtl::vecops::helper
invoke	extern_libs/exprtk.h	/^         struct invoke { static inline T execute(ifunction&, branch_t (&)[ParamCount]) { return std::numeric_limits<T_>::quiet_NaN(); } };$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,10>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,11>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,12>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,13>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,14>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,15>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,16>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,17>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,18>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,19>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,1>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,20>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,2>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,3>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,4>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,5>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,6>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,7>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,8>$/;"	s	class:exprtk::details::exprtk_final
invoke	extern_libs/exprtk.h	/^         struct invoke<T_,9>$/;"	s	class:exprtk::details::exprtk_final
io	extern_libs/exprtk.h	/^   namespace rtl { namespace io { namespace details$/;"	n	namespace:exprtk::rtl
io	extern_libs/exprtk.h	/^   namespace rtl { namespace io { namespace file { namespace details$/;"	n	namespace:exprtk::rtl
iota	extern_libs/exprtk.h	/^      iota()$/;"	f	class:exprtk::rtl::vecops::iota
iota	extern_libs/exprtk.h	/^   class iota : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
ip_index	extern_libs/exprtk.h	/^         std::size_t  ip_index;$/;"	m	struct:exprtk::parser::scope_element
ipow_node	extern_libs/exprtk.h	/^         explicit ipow_node(const T& v)$/;"	f	class:exprtk::details::exprtk_final
ipowinv_node	extern_libs/exprtk.h	/^         explicit ipowinv_node(const T& v)$/;"	f	class:exprtk::details::exprtk_final
irange_ptr	extern_libs/exprtk.h	/^         typedef irange_t*             irange_ptr;$/;"	t	class:exprtk::details::exprtk_final
irange_ptr	extern_libs/exprtk.h	/^         typedef irange_t*            irange_ptr;$/;"	t	class:exprtk::details::exprtk_final
irange_t	extern_libs/exprtk.h	/^         typedef range_interface  <T>  irange_t;$/;"	t	class:exprtk::details::exprtk_final
irange_t	extern_libs/exprtk.h	/^         typedef range_interface <T>  irange_t;$/;"	t	class:exprtk::details::exprtk_final
irange_t	extern_libs/exprtk.h	/^         typedef range_interface<T>   irange_t;$/;"	t	class:exprtk::details::exprtk_final
is_active	algorithm/Quad.h	/^  bool          is_active() const { return active_; }$/;"	f	class:TQMesh::Quad
is_active	algorithm/Quad.h	/^  void is_active(bool a) { active_ = a; }$/;"	f	class:TQMesh::Quad
is_active	algorithm/Triangle.h	/^  bool          is_active() const { return active_; }$/;"	f	class:TQMesh::Triangle
is_active	algorithm/Triangle.h	/^  void is_active(bool a) { active_ = a; }$/;"	f	class:TQMesh::Triangle
is_adjacent	algorithm/Vertex.h	/^  bool is_adjacent(const Edge& q) $/;"	f	class:TQMesh::Vertex
is_adjacent	algorithm/Vertex.h	/^  bool is_adjacent(const Facet& q) $/;"	f	class:TQMesh::Vertex
is_assignment_operation	extern_libs/exprtk.h	/^         inline bool is_assignment_operation(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
is_base_function	extern_libs/exprtk.h	/^      inline bool is_base_function(const std::string& function_name)$/;"	f	namespace:exprtk::details
is_binary	extern_libs/exprtk.h	/^      static inline bool is_binary(const expression<T>& expr)$/;"	f	class:exprtk::expression_helper
is_binary_node	extern_libs/exprtk.h	/^      inline bool is_binary_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_boc_node	extern_libs/exprtk.h	/^      inline bool is_boc_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_bracket	extern_libs/exprtk.h	/^      inline bool is_bracket(const char_t c)$/;"	f	namespace:exprtk::details
is_break_node	extern_libs/exprtk.h	/^      inline bool is_break_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_ccw	algorithm/EdgeList.h	/^  bool is_ccw() const { return (orient_ == Orientation::CCW); }$/;"	f	class:TQMesh::EdgeList
is_closed	algorithm/QuadLayering.h	/^  bool is_closed() const { return is_closed_; }$/;"	f	class:TQMesh::QuadLayerVertices
is_cob_node	extern_libs/exprtk.h	/^      inline bool is_cob_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_comment_start	extern_libs/exprtk.h	/^         inline bool is_comment_start(details::char_cptr itr)$/;"	f	class:exprtk::lexer::generator
is_comment_start	extern_libs/exprtk.h	/^         inline bool is_comment_start(details::char_cptr)$/;"	f	class:exprtk::lexer::generator
is_const	extern_libs/exprtk.h	/^      template <typename T> struct is_const                { enum {result = 0}; };$/;"	s	namespace:exprtk::details
is_const	extern_libs/exprtk.h	/^      template <typename T> struct is_const <const T>      { enum {result = 1}; };$/;"	s	namespace:exprtk::details
is_const_ref	extern_libs/exprtk.h	/^      template <typename T> struct is_const_ref            { enum {result = 0}; };$/;"	s	namespace:exprtk::details
is_const_ref	extern_libs/exprtk.h	/^      template <typename T> struct is_const_ref <const T&> { enum {result = 1}; };$/;"	s	namespace:exprtk::details
is_const_string_node	extern_libs/exprtk.h	/^      inline bool is_const_string_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_const_string_range_node	extern_libs/exprtk.h	/^      inline bool is_const_string_range_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_constant	extern_libs/exprtk.h	/^         inline bool is_constant(const std::string& symbol_name) const$/;"	f	struct:exprtk::symbol_table::type_store
is_constant	extern_libs/exprtk.h	/^      static inline bool is_constant(const expression<T>& expr)$/;"	f	class:exprtk::expression_helper
is_constant_foldable	extern_libs/exprtk.h	/^         inline bool is_constant_foldable(const Sequence<NodePtr,Allocator>& b) const$/;"	f	class:exprtk::parser::expression_generator
is_constant_node	extern_libs/exprtk.h	/^         inline bool is_constant_node(const std::string& symbol_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_constant_node	extern_libs/exprtk.h	/^      inline bool is_constant_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_constant_node	extern_libs/exprtk.h	/^      inline bool is_constant_node(const std::string& symbol_name) const$/;"	f	class:exprtk::symbol_table
is_constant_string	extern_libs/exprtk.h	/^         inline bool is_constant_string(const std::string& symbol_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_constant_string	extern_libs/exprtk.h	/^      inline bool is_constant_string(const std::string& symbol_name) const$/;"	f	class:exprtk::symbol_table
is_constpow_operation	extern_libs/exprtk.h	/^         inline bool is_constpow_operation(const details::operator_type& operation, expression_node_ptr(&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
is_conststr_stringvar	extern_libs/exprtk.h	/^         inline bool is_conststr_stringvar(const std::string& symbol_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_conststr_stringvar	extern_libs/exprtk.h	/^      inline bool is_conststr_stringvar(const std::string& symbol_name) const$/;"	f	class:exprtk::symbol_table
is_continue_node	extern_libs/exprtk.h	/^      inline bool is_continue_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_control_struct	extern_libs/exprtk.h	/^      inline bool is_control_struct(const std::string& cntrl_strct)$/;"	f	namespace:exprtk::details
is_cov_node	extern_libs/exprtk.h	/^      inline bool is_cov_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_digit	extern_libs/exprtk.h	/^      inline bool is_digit(const char_t c)$/;"	f	namespace:exprtk::details
is_empty	algorithm/Mesh.h	/^  bool is_empty() const $/;"	f	class:TQMesh::Mesh
is_end	extern_libs/exprtk.h	/^         inline bool is_end(details::char_cptr itr)$/;"	f	class:exprtk::lexer::generator
is_error	extern_libs/exprtk.h	/^         inline bool is_error() const$/;"	f	struct:exprtk::lexer::token
is_exterior	algorithm/Boundary.h	/^  bool is_exterior() const $/;"	f	class:TQMesh::Boundary
is_false	extern_libs/exprtk.h	/^      inline bool is_false(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_false	extern_libs/exprtk.h	/^      inline bool is_false(const std::pair<expression_node<T>*,bool>& node)$/;"	f	namespace:exprtk::details
is_false_impl	extern_libs/exprtk.h	/^            inline bool is_false_impl(const T v)$/;"	f	namespace:exprtk::details::numeric::details
is_fixed	algorithm/Vertex.h	/^  bool is_fixed() const { return has_property(VertexProperty::is_fixed); }$/;"	f	class:TQMesh::Vertex
is_fixed	algorithm/Vertex.h	/^  is_fixed      = 0b00000100,$/;"	m	class:TQMesh::VertexProperty
is_function	extern_libs/exprtk.h	/^         inline bool is_function(const std::string& function_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_function	extern_libs/exprtk.h	/^      inline bool is_function(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_function	extern_libs/exprtk.h	/^      inline bool is_function(const std::string& function_name) const$/;"	f	class:exprtk::symbol_table
is_function	extern_libs/exprtk.h	/^      static inline bool is_function(const expression<T>& expr)$/;"	f	class:exprtk::expression_helper
is_generally_string_node	extern_libs/exprtk.h	/^      inline bool is_generally_string_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_genricstring_range_node	extern_libs/exprtk.h	/^      inline bool is_genricstring_range_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_ghost	algorithm/Edge.h	/^  bool is_ghost() const { return has_property(EdgeProperty::is_ghost); }$/;"	f	class:TQMesh::Edge
is_ghost	algorithm/Edge.h	/^  is_ghost       = 0b00001000,$/;"	m	class:TQMesh::EdgeProperty
is_hex_digit	extern_libs/exprtk.h	/^      inline bool is_hex_digit(const uchar_t digit)$/;"	f	namespace:exprtk::details
is_inside	algorithm/Domain.h	/^  bool is_inside(const T& s) const $/;"	f	class:TQMesh::Domain
is_inside	algorithm/EdgeList.h	/^  bool is_inside(const T& s) const $/;"	f	class:TQMesh::EdgeList
is_inside	algorithm/EdgeList.h	/^  bool is_inside(const Vec2d& obj) const $/;"	f	class:TQMesh::EdgeList
is_inside	tests/tests_Boundary.cpp	/^void is_inside()$/;"	f	namespace:BoundaryTests
is_inside	tests/tests_EdgeList.cpp	/^void is_inside()$/;"	f	namespace:EdgeListTests
is_integer	extern_libs/exprtk.h	/^         inline bool is_integer(const T v)$/;"	f	namespace:exprtk::details::numeric
is_integer_impl	extern_libs/exprtk.h	/^            inline bool is_integer_impl(const T& v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
is_integer_impl	extern_libs/exprtk.h	/^            inline bool is_integer_impl(const T&, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
is_interior	algorithm/Boundary.h	/^  bool is_interior() const$/;"	f	class:TQMesh::Boundary
is_interior	algorithm/Edge.h	/^  bool is_interior() const$/;"	f	class:TQMesh::Edge
is_interior	algorithm/Edge.h	/^  is_interior    = 0b00000100,$/;"	m	class:TQMesh::EdgeProperty
is_invalid	extern_libs/exprtk.h	/^      inline bool is_invalid(const char_t c)$/;"	f	namespace:exprtk::details
is_invalid_arithmetic_operation	extern_libs/exprtk.h	/^      bool is_invalid_arithmetic_operation(const details::operator_type operation) const$/;"	f	class:exprtk::parser
is_invalid_assignment_op	extern_libs/exprtk.h	/^         inline bool is_invalid_assignment_op(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
is_invalid_assignment_operation	extern_libs/exprtk.h	/^      bool is_invalid_assignment_operation(const details::operator_type operation) const$/;"	f	class:exprtk::parser
is_invalid_inequality_operation	extern_libs/exprtk.h	/^      bool is_invalid_inequality_operation(const details::operator_type operation) const$/;"	f	class:exprtk::parser
is_invalid_logic_operation	extern_libs/exprtk.h	/^      bool is_invalid_logic_operation(const details::operator_type operation) const$/;"	f	class:exprtk::parser
is_invalid_string_op	extern_libs/exprtk.h	/^         inline bool is_invalid_string_op(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
is_invalid_string_op	extern_libs/exprtk.h	/^         inline bool is_invalid_string_op(const details::operator_type& operation, expression_node_ptr (&branch)[3]) const$/;"	f	class:exprtk::parser::expression_generator
is_ivariable_node	extern_libs/exprtk.h	/^      inline bool is_ivariable_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_ivector_node	extern_libs/exprtk.h	/^      inline bool is_ivector_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_left	utils/Geometry.h	/^static inline bool is_left(const Vec2<T>& p,$/;"	f	namespace:CppUtils
is_left_bracket	extern_libs/exprtk.h	/^      inline bool is_left_bracket(const char_t c)$/;"	f	namespace:exprtk::details
is_lefton	utils/Geometry.h	/^static inline bool is_lefton(const Vec2<T>& p,$/;"	f	namespace:CppUtils
is_letter	extern_libs/exprtk.h	/^      inline bool is_letter(const char_t c)$/;"	f	namespace:exprtk::details
is_letter_or_digit	extern_libs/exprtk.h	/^      inline bool is_letter_or_digit(const char_t c)$/;"	f	namespace:exprtk::details
is_logic_opr	extern_libs/exprtk.h	/^      inline bool is_logic_opr(const std::string& lgc_opr)$/;"	f	namespace:exprtk::details
is_nan	extern_libs/exprtk.h	/^         inline bool is_nan(const T v)$/;"	f	namespace:exprtk::details::numeric
is_nan_impl	extern_libs/exprtk.h	/^            inline bool is_nan_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
is_neg_unary_node	extern_libs/exprtk.h	/^      inline bool is_neg_unary_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_negate_node	extern_libs/exprtk.h	/^      inline bool is_negate_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_not_null	algorithm/Facet.h	/^  static inline bool is_not_null(Facet* f) $/;"	f	class:TQMesh::NullFacet
is_null	algorithm/Facet.h	/^  static inline bool is_null(Facet* f) $/;"	f	class:TQMesh::NullFacet
is_null	extern_libs/exprtk.h	/^      static inline bool is_null(const expression<T>& expr)$/;"	f	class:exprtk::expression_helper
is_null_node	extern_libs/exprtk.h	/^      inline bool is_null_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_operator_char	extern_libs/exprtk.h	/^      inline bool is_operator_char(const char_t c)$/;"	f	namespace:exprtk::details
is_rebasevector_celem_node	extern_libs/exprtk.h	/^      inline bool is_rebasevector_celem_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_rebasevector_elem_node	extern_libs/exprtk.h	/^      inline bool is_rebasevector_elem_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_ref	extern_libs/exprtk.h	/^      template <typename T> struct is_ref                  { enum {result = 0}; };$/;"	s	namespace:exprtk::details
is_ref	extern_libs/exprtk.h	/^      template <typename T> struct is_ref<T&>              { enum {result = 1}; };$/;"	s	namespace:exprtk::details
is_ref	extern_libs/exprtk.h	/^      template <typename T> struct is_ref<const T&>        { enum {result = 0}; };$/;"	s	namespace:exprtk::details
is_reserved_symbol	extern_libs/exprtk.h	/^            inline bool is_reserved_symbol(const std::string& symbol) const$/;"	f	struct:exprtk::symbol_table::control_block::st_data
is_reserved_symbol	extern_libs/exprtk.h	/^      inline bool is_reserved_symbol(const std::string& symbol)$/;"	f	namespace:exprtk::details
is_reserved_word	extern_libs/exprtk.h	/^      inline bool is_reserved_word(const std::string& symbol)$/;"	f	namespace:exprtk::details
is_return_node	extern_libs/exprtk.h	/^      inline bool is_return_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_right_bracket	extern_libs/exprtk.h	/^      inline bool is_right_bracket(const char_t c)$/;"	f	namespace:exprtk::details
is_sf3ext_node	extern_libs/exprtk.h	/^      inline bool is_sf3ext_node(const expression_node<T>* n)$/;"	f	namespace:exprtk::details
is_sf4ext_node	extern_libs/exprtk.h	/^      inline bool is_sf4ext_node(const expression_node<T>* n)$/;"	f	namespace:exprtk::details
is_shortcircuit_expression	extern_libs/exprtk.h	/^         inline bool is_shortcircuit_expression(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
is_shortcircuit_expression	extern_libs/exprtk.h	/^         inline bool is_shortcircuit_expression(const details::operator_type&) const$/;"	f	class:exprtk::parser::expression_generator
is_sign	extern_libs/exprtk.h	/^      inline bool is_sign(const char_t c)$/;"	f	namespace:exprtk::details
is_string_assignment_node	extern_libs/exprtk.h	/^      inline bool is_string_assignment_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_ccondition_node	extern_libs/exprtk.h	/^      inline bool is_string_ccondition_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_concat_node	extern_libs/exprtk.h	/^      inline bool is_string_concat_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_condition_node	extern_libs/exprtk.h	/^      inline bool is_string_condition_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_function_node	extern_libs/exprtk.h	/^      inline bool is_string_function_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_node	extern_libs/exprtk.h	/^      inline bool is_string_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_operation	extern_libs/exprtk.h	/^         inline bool is_string_operation(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
is_string_operation	extern_libs/exprtk.h	/^         inline bool is_string_operation(const details::operator_type& operation, expression_node_ptr (&branch)[3]) const$/;"	f	class:exprtk::parser::expression_generator
is_string_range_node	extern_libs/exprtk.h	/^      inline bool is_string_range_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_vararg_node	extern_libs/exprtk.h	/^      inline bool is_string_vararg_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_stringvar	extern_libs/exprtk.h	/^         inline bool is_stringvar(const std::string& stringvar_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_stringvar	extern_libs/exprtk.h	/^      inline bool is_stringvar(const std::string& stringvar_name) const$/;"	f	class:exprtk::symbol_table
is_swap_node	extern_libs/exprtk.h	/^      inline bool is_swap_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_t0ot1ot2_node	extern_libs/exprtk.h	/^      inline bool is_t0ot1ot2_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_t0ot1ot2ot3_node	extern_libs/exprtk.h	/^      inline bool is_t0ot1ot2ot3_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_too_close	algorithm/FacetGeometry.h	/^  static inline bool is_too_close(const Q& quad, const F& front,$/;"	f	class:TQMesh::QuadGeometry
is_traversable	algorithm/EdgeList.h	/^  bool is_traversable(Edge& e_start, Edge& e_end)$/;"	f	class:TQMesh::EdgeList
is_true	extern_libs/exprtk.h	/^      inline bool is_true(const double v)$/;"	f	namespace:exprtk::details
is_true	extern_libs/exprtk.h	/^      inline bool is_true(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_true	extern_libs/exprtk.h	/^      inline bool is_true(const float v)$/;"	f	namespace:exprtk::details
is_true	extern_libs/exprtk.h	/^      inline bool is_true(const long double v)$/;"	f	namespace:exprtk::details
is_true	extern_libs/exprtk.h	/^      inline bool is_true(const std::complex<T>& v)$/;"	f	namespace:exprtk::details
is_true	extern_libs/exprtk.h	/^      inline bool is_true(const std::pair<expression_node<T>*,bool>& node)$/;"	f	namespace:exprtk::details
is_true_impl	extern_libs/exprtk.h	/^            inline bool is_true_impl(const T v)$/;"	f	namespace:exprtk::details::numeric::details
is_twin_edge	algorithm/Front.h	/^  const std::vector<BoolVector>& is_twin_edge() const { return is_twin_edge_; }$/;"	f	class:TQMesh::FrontInitData
is_twin_edge	algorithm/Front.h	/^  std::vector<BoolVector>& is_twin_edge() { return is_twin_edge_; }$/;"	f	class:TQMesh::FrontInitData
is_unary	extern_libs/exprtk.h	/^      static inline bool is_unary(const expression<T>& expr)$/;"	f	class:exprtk::expression_helper
is_unary_node	extern_libs/exprtk.h	/^      inline bool is_unary_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_uv_node	extern_libs/exprtk.h	/^      inline bool is_uv_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_valid	algorithm/MeshGenerator.h	/^  bool is_valid(Mesh& mesh)$/;"	f	class:TQMesh::MeshGenerator
is_valid	algorithm/Quad.h	/^  bool is_valid() const$/;"	f	class:TQMesh::Quad
is_valid	algorithm/Triangle.h	/^  bool is_valid() const$/;"	f	class:TQMesh::Triangle
is_valid	extern_libs/exprtk.h	/^   inline bool is_valid(const expression<T>& expr)$/;"	f	namespace:exprtk
is_valid_sf_symbol	extern_libs/exprtk.h	/^      inline bool is_valid_sf_symbol(const std::string& symbol)$/;"	f	namespace:exprtk::details
is_valid_string_char	extern_libs/exprtk.h	/^      inline bool is_valid_string_char(const char_t c)$/;"	f	namespace:exprtk::details
is_vararg_function	extern_libs/exprtk.h	/^         inline bool is_vararg_function(const std::string& vararg_function_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_vararg_function	extern_libs/exprtk.h	/^      inline bool is_vararg_function(const std::string& vararg_function_name) const$/;"	f	class:exprtk::symbol_table
is_variable	extern_libs/exprtk.h	/^         inline bool is_variable(const std::string& variable_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_variable	extern_libs/exprtk.h	/^      inline bool is_variable(const std::string& variable_name) const$/;"	f	class:exprtk::symbol_table
is_variable	extern_libs/exprtk.h	/^      static inline bool is_variable(const expression<T>& expr)$/;"	f	class:exprtk::expression_helper
is_variable_node	extern_libs/exprtk.h	/^      inline bool is_variable_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_vector	extern_libs/exprtk.h	/^         inline bool is_vector(const std::string& vector_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_vector	extern_libs/exprtk.h	/^      inline bool is_vector(const std::string& vector_name) const$/;"	f	class:exprtk::symbol_table
is_vector_arithmetic_operation	extern_libs/exprtk.h	/^         inline bool is_vector_arithmetic_operation(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
is_vector_elem_node	extern_libs/exprtk.h	/^      inline bool is_vector_elem_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_vector_eqineq_logic_operation	extern_libs/exprtk.h	/^         inline bool is_vector_eqineq_logic_operation(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
is_vector_node	extern_libs/exprtk.h	/^      inline bool is_vector_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_voc_node	extern_libs/exprtk.h	/^      inline bool is_voc_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_vov_node	extern_libs/exprtk.h	/^      inline bool is_vov_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_whitespace	extern_libs/exprtk.h	/^      inline bool is_whitespace(const char_t c)$/;"	f	namespace:exprtk::details
is_zero	utils/VecND.h	/^  bool is_zero(std::size_t ulp = VecND<T,N>::cmp_ulp) const$/;"	f	class:CppUtils::VecND
items	utils/QuadTree.h	/^  const List& items() const { return items_; }$/;"	f	class:CppUtils::QuadTree
items_	utils/Container.h	/^  List               items_;$/;"	m	class:CppUtils::Container
items_	utils/QuadTree.h	/^  List           items_;$/;"	m	class:CppUtils::QuadTree
iteration_count	extern_libs/exprtk.h	/^         details::_uint64_t iteration_count;$/;"	m	struct:exprtk::loop_runtime_check::violation_context
iteration_count_	extern_libs/exprtk.h	/^         mutable _uint64_t iteration_count_;$/;"	m	struct:exprtk::details::loop_runtime_checker
ivararg_function	extern_libs/exprtk.h	/^   class ivararg_function : public function_traits$/;"	c	namespace:exprtk
ivararg_function_t	extern_libs/exprtk.h	/^         typedef ivararg_function<T>                 ivararg_function_t;$/;"	t	struct:exprtk::symbol_table::type_store
ivararg_function_t	extern_libs/exprtk.h	/^      typedef ivararg_function<T>                         ivararg_function_t;$/;"	t	class:exprtk::parser
ivariable	extern_libs/exprtk.h	/^      class ivariable$/;"	c	namespace:exprtk::details
ivariable_ptr	extern_libs/exprtk.h	/^         typedef ivariable<T>*       ivariable_ptr;$/;"	t	class:exprtk::details::exprtk_final
ivec_ptr_	extern_libs/exprtk.h	/^         vector_interface<T>* ivec_ptr_;$/;"	m	class:exprtk::details::exprtk_final
ivector_ptr	extern_libs/exprtk.h	/^         typedef vector_interface<T>* ivector_ptr;$/;"	t	struct:exprtk::details::vec_add_op
ivector_ptr	extern_libs/exprtk.h	/^         typedef vector_interface<T>* ivector_ptr;$/;"	t	struct:exprtk::details::vec_avg_op
ivector_ptr	extern_libs/exprtk.h	/^         typedef vector_interface<T>* ivector_ptr;$/;"	t	struct:exprtk::details::vec_max_op
ivector_ptr	extern_libs/exprtk.h	/^         typedef vector_interface<T>* ivector_ptr;$/;"	t	struct:exprtk::details::vec_min_op
ivector_ptr	extern_libs/exprtk.h	/^         typedef vector_interface<T>* ivector_ptr;$/;"	t	struct:exprtk::details::vec_mul_op
join	extern_libs/exprtk.h	/^            inline bool join(const lexer::token& t0, const lexer::token& t1, lexer::token& t)$/;"	f	class:exprtk::lexer::helper::operator_joiner
join	extern_libs/exprtk.h	/^            inline bool join(const lexer::token& t0,$/;"	f	class:exprtk::lexer::helper::operator_joiner
join	extern_libs/exprtk.h	/^         virtual bool join(const token&, const token&, const token&, token&) { return false; }$/;"	f	class:exprtk::lexer::token_joiner
join	extern_libs/exprtk.h	/^         virtual bool join(const token&, const token&, token&)               { return false; }$/;"	f	class:exprtk::lexer::token_joiner
joiner_enabled	extern_libs/exprtk.h	/^         bool joiner_enabled             () const { return enable_joiner_;             }$/;"	f	class:exprtk::parser::settings_store
kahan_sum	extern_libs/exprtk.h	/^      inline void kahan_sum(T& sum, T& error, const T v)$/;"	f	namespace:exprtk::rtl::vecops::details
key	utils/ParaReader.h	/^  const string& key() const { return start_key_; }$/;"	f	class:CppUtils::ParameterBase
key	utils/ParaReader.h	/^  string& key() { return start_key_; }$/;"	f	class:CppUtils::ParameterBase
laplace_smoothing	algorithm/MeshGenerator.h	/^  LaplaceSmoothing& laplace_smoothing(Mesh& mesh)$/;"	f	class:TQMesh::MeshGenerator
left	extern_libs/exprtk.h	/^         precedence_level left;$/;"	m	struct:exprtk::parser::state_t
length	algorithm/Edge.h	/^  double length() const { return length_; }$/;"	f	class:TQMesh::Edge
length	extern_libs/exprtk.h	/^         struct numeric_info { enum { length = 0, size = 32, bound_length = 0, min_exp = 0, max_exp = 0 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon1
length	extern_libs/exprtk.h	/^         template <> struct numeric_info<int        > { enum { length = 10, size = 16, bound_length = 9 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon2
level	utils/Log.h	/^  const LogLevel& level() const { return level_; }$/;"	f	class:CppUtils::LogProperties
level_	utils/Log.h	/^  LogLevel    level_         = INFO;$/;"	m	class:CppUtils::LogProperties
level_	utils/Log.h	/^  LogLevel level_  = DEBUG;$/;"	m	class:CppUtils::LOG
lexer	extern_libs/exprtk.h	/^         inline const generator_t& lexer() const$/;"	f	class:exprtk::lexer::parser_helper
lexer	extern_libs/exprtk.h	/^         inline generator_t& lexer()$/;"	f	class:exprtk::lexer::parser_helper
lexer	extern_libs/exprtk.h	/^   namespace lexer$/;"	n	namespace:exprtk
lexer_	extern_libs/exprtk.h	/^         generator_t lexer_;$/;"	m	class:exprtk::lexer::parser_helper
library	extern_libs/exprtk.h	/^      static const char* library = "Mathematical Expression Toolkit";$/;"	m	namespace:exprtk::information
like_op	extern_libs/exprtk.h	/^      struct like_op : public opr_base<T>$/;"	s	namespace:exprtk::details
limit_exceeded_	extern_libs/exprtk.h	/^         bool limit_exceeded_;$/;"	m	class:exprtk::parser::stack_limit_handler
line	utils/Testing.h	/^  int  line() const { return line_; }$/;"	f	class:CppUtils::TestData
line_line_crossing	utils/Geometry.h	/^static inline bool line_line_crossing(const Vec2<T>& p1,$/;"	f	namespace:CppUtils
line_line_intersection	utils/Geometry.h	/^static inline bool line_line_intersection(const Vec2<T>& p1,$/;"	f	namespace:CppUtils
line_no	extern_libs/exprtk.h	/^         std::size_t line_no;$/;"	m	struct:exprtk::parser_error::type
line_quad_intersection	utils/Geometry.h	/^static inline bool line_quad_intersection(const Vec2<T>& a,$/;"	f	namespace:CppUtils
line_tri_crossing	utils/Geometry.h	/^static inline bool line_tri_crossing(const Vec2<T>& a,$/;"	f	namespace:CppUtils
line_tri_intersection	utils/Geometry.h	/^static inline bool line_tri_intersection(const Vec2<T>& a,$/;"	f	namespace:CppUtils
literal_node	extern_libs/exprtk.h	/^         explicit literal_node(const T& v)$/;"	f	class:exprtk::details::exprtk_final
literal_node	extern_libs/exprtk.h	/^         literal_node(literal_node<T>&) {}$/;"	f	class:exprtk::details::exprtk_final
literal_node_t	extern_libs/exprtk.h	/^      typedef details::literal_node<T>                    literal_node_t;$/;"	t	class:exprtk::parser
load_binary_operations_map	extern_libs/exprtk.h	/^      inline void load_binary_operations_map(binary_op_map_t& m)$/;"	f	class:exprtk::parser
load_compile_options	extern_libs/exprtk.h	/^         void load_compile_options(const std::size_t compile_options)$/;"	f	class:exprtk::parser::settings_store
load_from	extern_libs/exprtk.h	/^      inline void load_from(const symbol_table<T>& st)$/;"	f	class:exprtk::symbol_table
load_inv_binary_operations_map	extern_libs/exprtk.h	/^      inline void load_inv_binary_operations_map(inv_binary_op_map_t& m)$/;"	f	class:exprtk::parser
load_operations_map	extern_libs/exprtk.h	/^      inline void load_operations_map(std::multimap<std::string,details::base_operation_t,details::ilesscompare>& m)$/;"	f	namespace:exprtk::details
load_sf3_map	extern_libs/exprtk.h	/^      inline void load_sf3_map(sf3_map_t& sf3_map)$/;"	f	class:exprtk::parser
load_sf4_map	extern_libs/exprtk.h	/^      inline void load_sf4_map(sf4_map_t& sf4_map)$/;"	f	class:exprtk::parser
load_unary_operations_map	extern_libs/exprtk.h	/^      inline void load_unary_operations_map(unary_op_map_t& m)$/;"	f	class:exprtk::parser
load_vector_range	extern_libs/exprtk.h	/^      struct load_vector_range$/;"	s	namespace:exprtk::rtl::vecops::helper
local_data	extern_libs/exprtk.h	/^         inline const local_data_t& local_data(const std::size_t& index = 0) const$/;"	f	struct:exprtk::parser::symtab_store
local_data	extern_libs/exprtk.h	/^         inline local_data_t& local_data(const std::size_t& index = 0)$/;"	f	struct:exprtk::parser::symtab_store
local_data	extern_libs/exprtk.h	/^      inline const local_data_t& local_data() const$/;"	f	class:exprtk::symbol_table
local_data	extern_libs/exprtk.h	/^      inline local_data_t& local_data()$/;"	f	class:exprtk::symbol_table
local_data_list	extern_libs/exprtk.h	/^         local_data_list_t local_data_list;$/;"	m	struct:exprtk::expression::control_block
local_data_list	extern_libs/exprtk.h	/^      inline const typename control_block::local_data_list_t& local_data_list()$/;"	f	class:exprtk::expression
local_data_list_t	extern_libs/exprtk.h	/^         typedef std::vector<data_pack> local_data_list_t;$/;"	t	struct:exprtk::expression::control_block
local_data_t	extern_libs/exprtk.h	/^         typedef typename symbol_table_t::local_data_t local_data_t;$/;"	t	struct:exprtk::parser::symtab_store
local_data_t	extern_libs/exprtk.h	/^      typedef typename control_block::st_data local_data_t;$/;"	t	class:exprtk::symbol_table
local_stack	extern_libs/exprtk.h	/^         std::deque<var_t> local_stack;$/;"	m	struct:exprtk::function_compositor::base_func
local_stringvar_list_	extern_libs/exprtk.h	/^            std::list<std::string>     local_stringvar_list_;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
local_symbol_list_	extern_libs/exprtk.h	/^            std::list<T>               local_symbol_list_;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
local_var_stack_size	extern_libs/exprtk.h	/^         std::size_t local_var_stack_size;$/;"	m	struct:exprtk::function_compositor::base_func
local_variable_is_shadowed	extern_libs/exprtk.h	/^      inline bool local_variable_is_shadowed(const std::string& symbol)$/;"	f	class:exprtk::parser
lodge_assignment	extern_libs/exprtk.h	/^         void lodge_assignment(symbol_type cst, expression_node_ptr node)$/;"	f	class:exprtk::parser::expression_generator
log10_impl	extern_libs/exprtk.h	/^            template <typename T> inline T log10_impl(const T v, int_type_tag) { return std::log10(v); }$/;"	f	namespace:exprtk::details::numeric::details
log10_impl	extern_libs/exprtk.h	/^            template <typename T> inline T log10_impl(const T v, real_type_tag) { return std::log10(v); }$/;"	f	namespace:exprtk::details::numeric::details
log1p_impl	extern_libs/exprtk.h	/^            inline T log1p_impl(const T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
log1p_impl	extern_libs/exprtk.h	/^            inline T log1p_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
log2	extern_libs/exprtk.h	/^            static const double log2    =  0.69314718055994530941723212145817656807550013436026;$/;"	m	namespace:exprtk::details::numeric::constant
log2_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  log2_impl(const T v, int_type_tag) { return std::log(v)\/T(numeric::constant::log2); }$/;"	f	namespace:exprtk::details::numeric::details
log2_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  log2_impl(const T v, real_type_tag) { return std::log(v)\/T(numeric::constant::log2); }$/;"	f	namespace:exprtk::details::numeric::details
log_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   log_impl(const T v, int_type_tag) { return std::log  (v); }$/;"	f	namespace:exprtk::details::numeric::details
log_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   log_impl(const T v, real_type_tag) { return std::log  (v); }$/;"	f	namespace:exprtk::details::numeric::details
logic_disabled	extern_libs/exprtk.h	/^         bool logic_disabled(const details::operator_type logic_operation) const$/;"	f	class:exprtk::parser::settings_store
logic_disabled	extern_libs/exprtk.h	/^         bool logic_disabled(const std::string& logic_operation) const$/;"	f	class:exprtk::parser::settings_store
logic_enabled	extern_libs/exprtk.h	/^         bool logic_enabled(const std::string& logic_operation) const$/;"	f	class:exprtk::parser::settings_store
logic_opr_to_string	extern_libs/exprtk.h	/^         std::string logic_opr_to_string(details::operator_type opr) const$/;"	f	class:exprtk::parser::settings_store
logic_ops_list	extern_libs/exprtk.h	/^      static const std::string logic_ops_list[] =$/;"	m	namespace:exprtk::details
logic_ops_list_size	extern_libs/exprtk.h	/^      static const std::size_t logic_ops_list_size = sizeof(logic_ops_list) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
logn	extern_libs/exprtk.h	/^         inline T logn(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
logn_impl	extern_libs/exprtk.h	/^            inline T logn_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
logn_impl	extern_libs/exprtk.h	/^            inline T logn_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
loop	extern_libs/exprtk.h	/^         loop_types loop;$/;"	m	struct:exprtk::loop_runtime_check::violation_context
loop_body_	extern_libs/exprtk.h	/^         branch_t loop_body_  ;$/;"	m	class:exprtk::details::for_loop_node
loop_body_	extern_libs/exprtk.h	/^         branch_t loop_body_;$/;"	m	class:exprtk::details::repeat_until_loop_node
loop_body_	extern_libs/exprtk.h	/^         branch_t loop_body_;$/;"	m	class:exprtk::details::while_loop_node
loop_runtime_check	extern_libs/exprtk.h	/^      loop_runtime_check()$/;"	f	struct:exprtk::loop_runtime_check
loop_runtime_check	extern_libs/exprtk.h	/^   struct loop_runtime_check$/;"	s	namespace:exprtk
loop_runtime_check_	extern_libs/exprtk.h	/^         mutable loop_runtime_check_ptr loop_runtime_check_;$/;"	m	struct:exprtk::details::loop_runtime_checker
loop_runtime_check_	extern_libs/exprtk.h	/^      loop_runtime_check_ptr loop_runtime_check_;$/;"	m	class:exprtk::parser
loop_runtime_check_ptr	extern_libs/exprtk.h	/^   typedef loop_runtime_check* loop_runtime_check_ptr;$/;"	t	namespace:exprtk
loop_runtime_checker	extern_libs/exprtk.h	/^         loop_runtime_checker(loop_runtime_check_ptr loop_runtime_check,$/;"	f	struct:exprtk::details::loop_runtime_checker
loop_runtime_checker	extern_libs/exprtk.h	/^      struct loop_runtime_checker$/;"	s	namespace:exprtk::details
loop_set	extern_libs/exprtk.h	/^      loop_types loop_set;$/;"	m	struct:exprtk::loop_runtime_check
loop_type_	extern_libs/exprtk.h	/^         loop_runtime_check::loop_types loop_type_;$/;"	m	struct:exprtk::details::loop_runtime_checker
loop_types	extern_libs/exprtk.h	/^      enum loop_types$/;"	g	struct:exprtk::loop_runtime_check
loop_unroll	extern_libs/exprtk.h	/^      namespace loop_unroll$/;"	n	namespace:exprtk::details
lowleft	utils/QuadTree.h	/^  const Vec2<V>& lowleft() const { return lowleft_; }$/;"	f	class:CppUtils::QuadTree
lt_op	extern_libs/exprtk.h	/^      struct lt_op : public opr_base<T>$/;"	s	namespace:exprtk::details
lte_op	extern_libs/exprtk.h	/^      struct lte_op : public opr_base<T>$/;"	s	namespace:exprtk::details
lut_size	extern_libs/exprtk.h	/^         enum { lut_size = 256 };$/;"	e	enum:exprtk::symbol_table::type_store::__anon14
lut_size	extern_libs/exprtk.h	/^      static const std::size_t lut_size = 256;$/;"	m	class:exprtk::symbol_table
lv	extern_libs/exprtk.h	/^         lvr_vec_t lv;$/;"	m	struct:exprtk::function_compositor::base_func
lvarref_t	extern_libs/exprtk.h	/^         typedef std::pair<T*,std::size_t> lvarref_t;$/;"	t	struct:exprtk::function_compositor::base_func
lvr_vec_t	extern_libs/exprtk.h	/^         typedef std::vector<lvarref_t>    lvr_vec_t;$/;"	t	struct:exprtk::function_compositor::base_func
main	app/main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	examples/main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	tests/main.cpp	/^int main(int argc, char* argv[])$/;"	f
make	extern_libs/exprtk.h	/^            static inline std::pair<bool,vector_t*> make(exprtk::vector_view<T>& v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store::tie_vecview
make	extern_libs/exprtk.h	/^            static inline std::pair<bool,vector_t*> make(std::deque<T,Allocator>& v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store::tie_stddeq
make	extern_libs/exprtk.h	/^            static inline std::pair<bool,vector_t*> make(std::pair<T*,std::size_t> v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store::tie_array
make	extern_libs/exprtk.h	/^            static inline std::pair<bool,vector_t*> make(std::vector<T,Allocator>& v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store::tie_stdvec
make_error	extern_libs/exprtk.h	/^      inline type make_error(const error_mode mode,$/;"	f	namespace:exprtk::parser_error
make_handle	extern_libs/exprtk.h	/^      file_descriptor* make_handle(T v)$/;"	f	namespace:exprtk::rtl::io::file::details
make_vector_view	extern_libs/exprtk.h	/^   inline vector_view<T> make_vector_view(T* data,$/;"	f	namespace:exprtk
make_vector_view	extern_libs/exprtk.h	/^   inline vector_view<T> make_vector_view(std::vector<T>& v,$/;"	f	namespace:exprtk
map	extern_libs/exprtk.h	/^         type_map_t  map;$/;"	m	struct:exprtk::symbol_table::type_store
mark_objects	algorithm/EdgeList.h	/^  virtual void mark_objects(Vertex& v1, Vertex& v2, Edge& e) $/;"	f	class:TQMesh::EdgeList
mark_twin_edges	algorithm/Front.h	/^  void mark_twin_edges(const EdgeVector& front_edges,$/;"	f	class:TQMesh::Front
match_impl	extern_libs/exprtk.h	/^      inline bool match_impl(const Iterator pattern_begin,$/;"	f	namespace:exprtk::details
match_sizes	extern_libs/exprtk.h	/^         static inline void match_sizes(type& vds0, type& vds1)$/;"	f	class:exprtk::details::vec_data_store
matrix	utils/ParaReader.h	/^{ scalar, vector, matrix, block };$/;"	m	class:CppUtils::ParaType
max	extern_libs/exprtk.h	/^         inline T max(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
max	utils/VecND.h	/^  T max() const { return *std::max_element(cbegin(), cend()); }$/;"	f	class:CppUtils::VecND
max_cell_angle	algorithm/FrontUpdate.h	/^  double max_cell_angle() const { return max_cell_angle_; }$/;"	f	class:TQMesh::FrontUpdate
max_cell_angle	algorithm/FrontUpdate.h	/^  void max_cell_angle(double v) { max_cell_angle_ = v; }$/;"	f	class:TQMesh::FrontUpdate
max_cell_angle	algorithm/Triangulation.h	/^  Triangulation& max_cell_angle(double v) $/;"	f	class:TQMesh::Triangulation
max_cell_angle	algorithm/Triangulation.h	/^  double max_cell_angle() const { return front_update_.max_cell_angle(); }$/;"	f	class:TQMesh::Triangulation
max_cell_angle_	algorithm/FrontUpdate.h	/^  double          max_cell_angle_   = M_PI;$/;"	m	class:TQMesh::FrontUpdate
max_depth	utils/QuadTree.h	/^  size_t max_depth() const { return max_depth_; }$/;"	f	class:CppUtils::QuadTree
max_depth	utils/QuadTree.h	/^  void max_depth(size_t v)  $/;"	f	class:CppUtils::QuadTree
max_exp	extern_libs/exprtk.h	/^         struct numeric_info { enum { length = 0, size = 32, bound_length = 0, min_exp = 0, max_exp = 0 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon1
max_exp	extern_libs/exprtk.h	/^         template <> struct numeric_info<double     > { enum { min_exp = -308, max_exp = +308 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon4
max_exp	extern_libs/exprtk.h	/^         template <> struct numeric_info<float      > { enum { min_exp =  -38, max_exp =  +38 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon3
max_exp	extern_libs/exprtk.h	/^         template <> struct numeric_info<long double> { enum { min_exp = -308, max_exp = +308 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon5
max_impl	extern_libs/exprtk.h	/^            inline T max_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
max_item	utils/QuadTree.h	/^  void max_item(size_t v)  $/;"	f	class:CppUtils::QuadTree
max_items	utils/QuadTree.h	/^  size_t max_items() const { return max_item_; }$/;"	f	class:CppUtils::QuadTree
max_loop_iterations	extern_libs/exprtk.h	/^      details::_uint64_t max_loop_iterations;$/;"	m	struct:exprtk::loop_runtime_check
max_loop_iterations_	extern_libs/exprtk.h	/^         const details::_uint64_t& max_loop_iterations_;$/;"	m	struct:exprtk::details::loop_runtime_checker
max_node_depth_	extern_libs/exprtk.h	/^         std::size_t max_node_depth_;$/;"	m	class:exprtk::parser::settings_store
max_num_args	extern_libs/exprtk.h	/^      std::size_t& max_num_args()$/;"	f	class:exprtk::function_traits
max_num_args_	extern_libs/exprtk.h	/^      std::size_t max_num_args_;$/;"	m	class:exprtk::function_traits
max_stack_depth_	extern_libs/exprtk.h	/^         std::size_t max_stack_depth_;$/;"	m	class:exprtk::parser::settings_store
merge	algorithm/MeshMerger.h	/^  bool merge()$/;"	f	class:TQMesh::MeshMerger
merge	utils/QuadTree.h	/^  bool merge()$/;"	f	class:CppUtils::QuadTree
merge_degenerate_triangles	algorithm/MeshCleanup.h	/^  static inline void merge_degenerate_triangles(Mesh& mesh, bool init=true)$/;"	f	class:TQMesh::MeshCleanup
merge_degenerate_triangles	tests/tests_MeshCleanup.cpp	/^void merge_degenerate_triangles()$/;"	f	namespace:CleanupTests
merge_meshes	algorithm/MeshGenerator.h	/^  bool merge_meshes(Mesh& receiver, Mesh& donor)$/;"	f	class:TQMesh::MeshGenerator
merge_meshes	examples/05_merge_meshes.cpp	/^bool merge_meshes()$/;"	f
merge_triangles_to_quads	algorithm/MeshCleanup.h	/^  static inline void merge_triangles_to_quads(Mesh& mesh, bool init=true)$/;"	f	class:TQMesh::MeshCleanup
merge_triangles_to_quads	algorithm/ModificationStrategy.h	/^  void merge_triangles_to_quads()$/;"	f	class:TQMesh::Tri2QuadModification
merge_triangles_to_quads	tests/tests_Mesh.cpp	/^void merge_triangles_to_quads()$/;"	f	namespace:MeshTests
mesh	algorithm/MeshChecker.h	/^  Mesh& mesh() { return *mesh_; }$/;"	f	class:TQMesh::MeshChecker
mesh	algorithm/MeshGenerator.h	/^  Mesh& mesh(std::size_t i_mesh)$/;"	f	class:TQMesh::MeshGenerator
mesh	algorithm/MeshingStrategy.h	/^  Mesh& mesh() { return mesh_; }$/;"	f	class:TQMesh::MeshingStrategy
mesh	algorithm/ModificationStrategy.h	/^  Mesh& mesh() { return *mesh_; }$/;"	f	class:TQMesh::ModificationStrategy
mesh	algorithm/RefinementStrategy.h	/^  Mesh& mesh() { return *mesh_; }$/;"	f	class:TQMesh::RefinementStrategy
mesh	algorithm/SmoothingStrategy.h	/^  Mesh& mesh() { return *mesh_; }$/;"	f	class:TQMesh::SmoothingStrategy
mesh_	algorithm/FrontUpdate.h	/^  Mesh&           mesh_;$/;"	m	class:TQMesh::FrontUpdate
mesh_	algorithm/MeshChecker.h	/^  Mesh*         mesh_;$/;"	m	class:TQMesh::MeshChecker
mesh_	algorithm/MeshWriter.h	/^  Mesh*         mesh_;$/;"	m	class:TQMesh::MeshWriter
mesh_	algorithm/MeshingStrategy.h	/^  Mesh&         mesh_;$/;"	m	class:TQMesh::MeshingStrategy
mesh_	algorithm/ModificationStrategy.h	/^  Mesh*         mesh_;$/;"	m	class:TQMesh::ModificationStrategy
mesh_	algorithm/RefinementStrategy.h	/^  Mesh*         mesh_;$/;"	m	class:TQMesh::RefinementStrategy
mesh_	algorithm/SmoothingStrategy.h	/^  Mesh*              mesh_;$/;"	m	class:TQMesh::SmoothingStrategy
mesh_id_	app/TQMeshApp.h	/^  int                     mesh_id_;$/;"	m	class:TQMesh::MeshConstruction
mesh_initializer	tests/tests_MeshGenerator.cpp	/^void mesh_initializer()$/;"	f	namespace:MeshGeneratorTests
mesh_range_factor	algorithm/Triangulation.h	/^  Triangulation& mesh_range_factor(double v) $/;"	f	class:TQMesh::Triangulation
mesh_range_factor	algorithm/Triangulation.h	/^  double mesh_range_factor() const { return mesh_range_factor_; }$/;"	f	class:TQMesh::Triangulation
mesh_range_factor_	algorithm/Triangulation.h	/^  double mesh_range_factor_  = 1.0;$/;"	m	class:TQMesh::Triangulation
mesh_size	algorithm/Vertex.h	/^  double       mesh_size() const { return mesh_size_; }$/;"	f	class:TQMesh::Vertex
mesh_size	algorithm/Vertex.h	/^  void mesh_size(double s) { mesh_size_ = s; }$/;"	f	class:TQMesh::Vertex
meshes	algorithm/MeshBuilder.h	/^  MeshVector& meshes() { return meshes_; }$/;"	f	class:TQMesh::MeshBuilder
meshes	algorithm/MeshBuilder.h	/^  const MeshVector& meshes() const { return meshes_; }$/;"	f	class:TQMesh::MeshBuilder
meshing_algorithm_	algorithm/MeshGenerator.h	/^  MeshingStrategyPtr      meshing_algorithm_;$/;"	m	class:TQMesh::MeshGenerator
message	utils/Timer.h	/^  const std::string& message(std::size_t i) const { return msg_[i]; }$/;"	f	class:CppUtils::Timer
message_	algorithm/Error.h	/^  std::string message_;$/;"	m	class:TQMesh::Error
message_	utils/ParaReader.h	/^    std::string message_;$/;"	m	class:CppUtils::ParaBlock::Invalid
messages	utils/Timer.h	/^  const Msgvector& messages() const { return msg_; }$/;"	f	class:CppUtils::Timer
min	extern_libs/exprtk.h	/^         inline T min(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
min	utils/VecND.h	/^  T min() const { return *std::min_element(cbegin(), cend()); }$/;"	f	class:CppUtils::VecND
min_cell_quality	algorithm/FrontUpdate.h	/^  double min_cell_quality() const { return min_cell_quality_; }$/;"	f	class:TQMesh::FrontUpdate
min_cell_quality	algorithm/FrontUpdate.h	/^  void min_cell_quality(double v) { min_cell_quality_ = v; }$/;"	f	class:TQMesh::FrontUpdate
min_cell_quality	algorithm/Triangulation.h	/^  Triangulation& min_cell_quality(double v) $/;"	f	class:TQMesh::Triangulation
min_cell_quality	algorithm/Triangulation.h	/^  double min_cell_quality() const { return front_update_.min_cell_quality(); }$/;"	f	class:TQMesh::Triangulation
min_cell_quality_	algorithm/FrontUpdate.h	/^  double          min_cell_quality_ = 0.0;$/;"	m	class:TQMesh::FrontUpdate
min_exp	extern_libs/exprtk.h	/^         struct numeric_info { enum { length = 0, size = 32, bound_length = 0, min_exp = 0, max_exp = 0 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon1
min_exp	extern_libs/exprtk.h	/^         template <> struct numeric_info<double     > { enum { min_exp = -308, max_exp = +308 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon4
min_exp	extern_libs/exprtk.h	/^         template <> struct numeric_info<float      > { enum { min_exp =  -38, max_exp =  +38 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon3
min_exp	extern_libs/exprtk.h	/^         template <> struct numeric_info<long double> { enum { min_exp = -308, max_exp = +308 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon5
min_impl	extern_libs/exprtk.h	/^            inline T min_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
min_num_args	extern_libs/exprtk.h	/^      std::size_t& min_num_args()$/;"	f	class:exprtk::function_traits
min_num_args_	extern_libs/exprtk.h	/^      std::size_t min_num_args_;$/;"	m	class:exprtk::function_traits
min_size	extern_libs/exprtk.h	/^         static inline std::size_t min_size(control_block* cb0, control_block* cb1)$/;"	f	class:exprtk::details::vec_data_store
mixed_smoothing	algorithm/MeshGenerator.h	/^  MixedSmoothing& mixed_smoothing(Mesh& mesh)$/;"	f	class:TQMesh::MeshGenerator
mod_op	extern_libs/exprtk.h	/^      struct mod_op : public opr_base<T>$/;"	s	namespace:exprtk::details
mode	extern_libs/exprtk.h	/^         error_mode mode;$/;"	m	struct:exprtk::parser_error::type
mode	extern_libs/exprtk.h	/^         file_mode   mode;$/;"	m	struct:exprtk::rtl::io::file::details::file_descriptor
mode	extern_libs/exprtk.h	/^         usr_mode mode;$/;"	m	struct:exprtk::parser::unknown_symbol_resolver
mode0	extern_libs/exprtk.h	/^         struct mode0$/;"	s	struct:exprtk::details::T0oT1oT20T3process
mode0	extern_libs/exprtk.h	/^         struct mode0$/;"	s	struct:exprtk::details::T0oT1oT2process
mode1	extern_libs/exprtk.h	/^         struct mode1$/;"	s	struct:exprtk::details::T0oT1oT20T3process
mode1	extern_libs/exprtk.h	/^         struct mode1$/;"	s	struct:exprtk::details::T0oT1oT2process
mode2	extern_libs/exprtk.h	/^         struct mode2$/;"	s	struct:exprtk::details::T0oT1oT20T3process
mode3	extern_libs/exprtk.h	/^         struct mode3$/;"	s	struct:exprtk::details::T0oT1oT20T3process
mode4	extern_libs/exprtk.h	/^         struct mode4$/;"	s	struct:exprtk::details::T0oT1oT20T3process
modification_algorithm_	algorithm/MeshGenerator.h	/^  ModificationStrategyPtr modification_algorithm_;$/;"	m	class:TQMesh::MeshGenerator
modify	extern_libs/exprtk.h	/^            bool modify(lexer::token& t)$/;"	f	class:exprtk::lexer::helper::symbol_replacer
modulus	extern_libs/exprtk.h	/^         inline T modulus(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
modulus_impl	extern_libs/exprtk.h	/^            inline T modulus_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
modulus_impl	extern_libs/exprtk.h	/^            inline T modulus_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
msg_	utils/Timer.h	/^  Msgvector  msg_;$/;"	m	class:CppUtils::Timer
mul_op	extern_libs/exprtk.h	/^      struct mul_op : public opr_base<T>$/;"	s	namespace:exprtk::details
multi_switch_node	extern_libs/exprtk.h	/^         explicit multi_switch_node(const Sequence<expression_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::details::exprtk_final
multi_switch_statement	extern_libs/exprtk.h	/^         inline expression_node_ptr multi_switch_statement(Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
multimode_genfunction_node	extern_libs/exprtk.h	/^         multimode_genfunction_node(GenericFunction* func,$/;"	f	class:exprtk::details::multimode_genfunction_node
multimode_genfunction_node	extern_libs/exprtk.h	/^      class multimode_genfunction_node : public generic_function_node<T,GenericFunction>$/;"	c	namespace:exprtk::details
multimode_strfunction_node	extern_libs/exprtk.h	/^         multimode_strfunction_node(StringFunction* func,$/;"	f	class:exprtk::details::exprtk_final
multiple_meshes	examples/07_multiple_meshes.cpp	/^bool multiple_meshes()$/;"	f
multiple_neighbors	tests/tests_MeshGenerator.cpp	/^void multiple_neighbors()$/;"	f	namespace:MeshGeneratorTests
must_delete	utils/Log.h	/^    bool must_delete;$/;"	m	struct:CppUtils::ConditionalDeleter
n0_c	extern_libs/exprtk.h	/^         std::pair<bool,std::size_t        > n0_c;$/;"	m	struct:exprtk::details::range_pack
n0_e	extern_libs/exprtk.h	/^         std::pair<bool,expression_node_ptr> n0_e;$/;"	m	struct:exprtk::details::range_pack
n1_c	extern_libs/exprtk.h	/^         std::pair<bool,std::size_t        > n1_c;$/;"	m	struct:exprtk::details::range_pack
n1_e	extern_libs/exprtk.h	/^         std::pair<bool,expression_node_ptr> n1_e;$/;"	m	struct:exprtk::details::range_pack
n_base_edges	algorithm/QuadLayering.h	/^  int n_base_edges() const $/;"	f	class:TQMesh::QuadLayerVertices
n_boundary_edges	algorithm/Mesh.h	/^  size_t n_boundary_edges() const { return bdry_edges_.size(); }$/;"	f	class:TQMesh::Mesh
n_domains	algorithm/MeshBuilder.h	/^  size_t n_domains() const { return domains_.size(); }$/;"	f	class:TQMesh::MeshBuilder
n_edges	algorithm/Mesh.h	/^  size_t n_edges()          const { return intr_edges_.size() + bdry_edges_.size(); }$/;"	f	class:TQMesh::Mesh
n_elements	algorithm/Mesh.h	/^  size_t n_elements()       const { return quads_.size() + tris_.size(); }$/;"	f	class:TQMesh::Mesh
n_elements	algorithm/Triangulation.h	/^  Triangulation& n_elements(size_t n) $/;"	f	class:TQMesh::Triangulation
n_elements	algorithm/Triangulation.h	/^  size_t n_elements() const { return n_elements_; }$/;"	f	class:TQMesh::Triangulation
n_elements_	algorithm/Triangulation.h	/^  size_t n_elements_         = 0;$/;"	m	class:TQMesh::Triangulation
n_generated_	algorithm/Triangulation.h	/^  int    n_generated_        = 0;$/;"	m	class:TQMesh::Triangulation
n_interior_edges	algorithm/Mesh.h	/^  size_t n_interior_edges() const { return intr_edges_.size(); }$/;"	f	class:TQMesh::Mesh
n_layers	algorithm/QuadLayering.h	/^  QuadLayering& n_layers(size_t n) $/;"	f	class:TQMesh::QuadLayering
n_layers	algorithm/QuadLayering.h	/^  size_t n_layers() const { return n_layers_; }$/;"	f	class:TQMesh::QuadLayering
n_leafs	utils/QuadTree.h	/^  int n_leafs( int n = 0 ) const $/;"	f	class:CppUtils::QuadTree
n_meshes	algorithm/MeshBuilder.h	/^  size_t n_meshes() const { return meshes_.size(); }$/;"	f	class:TQMesh::MeshBuilder
n_quads	algorithm/Mesh.h	/^  size_t n_quads()          const { return quads_.size(); }$/;"	f	class:TQMesh::Mesh
n_triangles	algorithm/Mesh.h	/^  size_t n_triangles()      const { return tris_.size(); }$/;"	f	class:TQMesh::Mesh
n_vertices	algorithm/Facet.h	/^  virtual size_t        n_vertices() const { return 0; }$/;"	f	class:TQMesh::Facet
n_vertices	algorithm/Mesh.h	/^  size_t n_vertices()       const { return verts_.size(); }$/;"	f	class:TQMesh::Mesh
name	extern_libs/exprtk.h	/^         inline function& name(const std::string& n)$/;"	f	struct:exprtk::function_compositor::function
name	extern_libs/exprtk.h	/^         std::string  name;$/;"	m	struct:exprtk::parser::scope_element
name	extern_libs/exprtk.h	/^      std::string name() const$/;"	f	class:exprtk::stringvar_base
name	utils/VtkIO.h	/^  const std::string& name() const { return name_; }$/;"	f	class:CppUtils::VtkIOData
name	utils/VtkIO.h	/^  static const char* name;$/;"	m	struct:CppUtils::VtkIOTypeTraits
name	utils/VtkIO.h	/^inline const char* VtkIOTypeTraits<double>::name = "Float64";$/;"	m	class:CppUtils::VtkIOTypeTraits
name	utils/VtkIO.h	/^inline const char* VtkIOTypeTraits<float>::name = "Float32";$/;"	m	class:CppUtils::VtkIOTypeTraits
name	utils/VtkIO.h	/^inline const char* VtkIOTypeTraits<int32_t>::name = "Int32";$/;"	m	class:CppUtils::VtkIOTypeTraits
name	utils/VtkIO.h	/^inline const char* VtkIOTypeTraits<int64_t>::name = "Int64";$/;"	m	class:CppUtils::VtkIOTypeTraits
name	utils/VtkIO.h	/^{ static const char* name; };$/;"	m	struct:CppUtils::VtkIOTypeTraits
name_	extern_libs/exprtk.h	/^         std::string name_;$/;"	m	struct:exprtk::function_compositor::function
name_	extern_libs/exprtk.h	/^      std::string name_;$/;"	m	class:exprtk::stringvar_base
name_	utils/VtkIO.h	/^  std::string    name_;$/;"	m	class:CppUtils::VtkIOData
nand_impl	extern_libs/exprtk.h	/^            inline T nand_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nand_impl	extern_libs/exprtk.h	/^            inline T nand_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nand_op	extern_libs/exprtk.h	/^      struct nand_op : public opr_base<T>$/;"	s	namespace:exprtk::details
nand_opr	extern_libs/exprtk.h	/^         inline T nand_opr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
nb_pair_t	extern_libs/exprtk.h	/^         typedef std::pair<node_ptr_t,bool> nb_pair_t;$/;"	t	struct:exprtk::details::node_depth_base
nb_pair_t	extern_libs/exprtk.h	/^         void collect(const nb_pair_t(&branch)[N],$/;"	m	struct:exprtk::details::node_depth_base
nbr1	algorithm/Quad.h	/^  Facet*        nbr1() { return facets_[0]; }$/;"	f	class:TQMesh::Quad
nbr1	algorithm/Quad.h	/^  const Facet*  nbr1() const { return facets_[0]; }$/;"	f	class:TQMesh::Quad
nbr1	algorithm/Quad.h	/^  void nbr1(Facet* f) { facets_[0] = f; }$/;"	f	class:TQMesh::Quad
nbr1	algorithm/Triangle.h	/^  Facet*        nbr1()       { return facets_[0]; }$/;"	f	class:TQMesh::Triangle
nbr1	algorithm/Triangle.h	/^  const Facet*  nbr1() const { return facets_[0]; }$/;"	f	class:TQMesh::Triangle
nbr1	algorithm/Triangle.h	/^  void nbr1(Facet* f) { facets_[0] = f; }$/;"	f	class:TQMesh::Triangle
nbr2	algorithm/Quad.h	/^  Facet*        nbr2() { return facets_[1]; }$/;"	f	class:TQMesh::Quad
nbr2	algorithm/Quad.h	/^  const Facet*  nbr2() const { return facets_[1]; }$/;"	f	class:TQMesh::Quad
nbr2	algorithm/Quad.h	/^  void nbr2(Facet* f) { facets_[1] = f; }$/;"	f	class:TQMesh::Quad
nbr2	algorithm/Triangle.h	/^  Facet*        nbr2()       { return facets_[1]; }$/;"	f	class:TQMesh::Triangle
nbr2	algorithm/Triangle.h	/^  const Facet*  nbr2() const { return facets_[1]; }$/;"	f	class:TQMesh::Triangle
nbr2	algorithm/Triangle.h	/^  void nbr2(Facet* f) { facets_[1] = f; }$/;"	f	class:TQMesh::Triangle
nbr3	algorithm/Quad.h	/^  Facet*        nbr3() { return facets_[2]; }$/;"	f	class:TQMesh::Quad
nbr3	algorithm/Quad.h	/^  const Facet*  nbr3() const { return facets_[2]; }$/;"	f	class:TQMesh::Quad
nbr3	algorithm/Quad.h	/^  void nbr3(Facet* f) { facets_[2] = f; }$/;"	f	class:TQMesh::Quad
nbr3	algorithm/Triangle.h	/^  Facet*        nbr3()       { return facets_[2]; }$/;"	f	class:TQMesh::Triangle
nbr3	algorithm/Triangle.h	/^  const Facet*  nbr3() const { return facets_[2]; }$/;"	f	class:TQMesh::Triangle
nbr3	algorithm/Triangle.h	/^  void nbr3(Facet* f) { facets_[2] = f; }$/;"	f	class:TQMesh::Triangle
nbr4	algorithm/Quad.h	/^  Facet*        nbr4() { return facets_[3]; }$/;"	f	class:TQMesh::Quad
nbr4	algorithm/Quad.h	/^  const Facet*  nbr4() const { return facets_[3]; }$/;"	f	class:TQMesh::Quad
nbr4	algorithm/Quad.h	/^  void nbr4(Facet* f) { facets_[3] = f; }$/;"	f	class:TQMesh::Quad
ncdf_impl	extern_libs/exprtk.h	/^            inline T ncdf_impl(T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
ncdf_impl	extern_libs/exprtk.h	/^            inline T ncdf_impl(T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nci_t	extern_libs/exprtk.h	/^         typedef node_collector_interface<Node> nci_t;$/;"	t	class:exprtk::details::node_collection_destructor
nci_t	extern_libs/exprtk.h	/^         typedef node_collector_interface<expression_node<T> > nci_t;$/;"	t	class:exprtk::details::expression_node
ncol_	utils/ParaReader.h	/^  size_t ncol_;$/;"	m	class:CppUtils::Parameter
ndb_t	extern_libs/exprtk.h	/^         typedef node_depth_base<expression_node<T> > ndb_t;$/;"	t	class:exprtk::details::expression_node
ne	extern_libs/exprtk.h	/^      nthelement <T> ne;$/;"	m	struct:exprtk::rtl::vecops::package
ne_op	extern_libs/exprtk.h	/^      struct ne_op : public opr_base<T>$/;"	s	namespace:exprtk::details
neg_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   neg_impl(const T v, int_type_tag) { return -v;            }$/;"	f	namespace:exprtk::details::numeric::details
neg_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   neg_impl(const T v, real_type_tag) { return -v;            }$/;"	f	namespace:exprtk::details::numeric::details
neighbor	algorithm/Quad.h	/^  Facet*        neighbor(size_t i) { return facets_[i]; }$/;"	f	class:TQMesh::Quad
neighbor	algorithm/Quad.h	/^  const Facet*  neighbor(size_t i) const { return facets_[i]; }$/;"	f	class:TQMesh::Quad
neighbor	algorithm/Triangle.h	/^  Facet*        neighbor(size_t i)       { return facets_[i]; }$/;"	f	class:TQMesh::Triangle
neighbor	algorithm/Triangle.h	/^  const Facet*  neighbor(size_t i) const { return facets_[i]; }$/;"	f	class:TQMesh::Triangle
nequal	extern_libs/exprtk.h	/^         inline T nequal(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
nequal_impl	extern_libs/exprtk.h	/^            inline T nequal_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nequal_impl	extern_libs/exprtk.h	/^            inline T nequal_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nequal_impl	extern_libs/exprtk.h	/^            inline float nequal_impl(const float v0, const float v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
new_block_parameter	utils/ParaReader.h	/^  void new_block_parameter(const string& name,$/;"	f	class:CppUtils::ParaBlock
new_matrix_parameter	utils/ParaReader.h	/^  void new_matrix_parameter(const string& name,$/;"	f	class:CppUtils::ParaBlock
new_mesh	algorithm/MeshGenerator.h	/^  Mesh& new_mesh(Domain& domain,$/;"	f	class:TQMesh::MeshGenerator
new_scalar_parameter	utils/ParaReader.h	/^  void new_scalar_parameter(const string& name, const string& key)$/;"	f	class:CppUtils::ParaBlock
new_vector_parameter	utils/ParaReader.h	/^  void new_vector_parameter(const string& name, $/;"	f	class:CppUtils::ParaBlock
new_vertex_position_is_valid	algorithm/SmoothingStrategy.h	/^  bool new_vertex_position_is_valid(const Vertex& v, double range) const$/;"	f	class:TQMesh::SmoothingStrategy
new_vertices_	algorithm/MeshMerger.h	/^  VertexVector  new_vertices_;$/;"	m	class:TQMesh::MeshMerger
next_ip_index	extern_libs/exprtk.h	/^         inline std::size_t next_ip_index()$/;"	f	class:exprtk::parser::scope_element_manager
next_token	extern_libs/exprtk.h	/^         inline token_t& next_token()$/;"	f	class:exprtk::lexer::generator
next_token	extern_libs/exprtk.h	/^         inline void next_token()$/;"	f	class:exprtk::lexer::parser_helper
next_token	extern_libs/exprtk.h	/^      inline void next_token()$/;"	f	class:exprtk::parser
nf	extern_libs/exprtk.h	/^      any_false  <T> nf;$/;"	m	struct:exprtk::rtl::vecops::package
no_property	algorithm/Edge.h	/^  no_property    = 0b00000000,$/;"	m	class:TQMesh::EdgeProperty
no_property	algorithm/Vertex.h	/^  no_property   = 0b00000000,$/;"	m	class:TQMesh::VertexProperty
node_allocator	extern_libs/exprtk.h	/^      class node_allocator$/;"	c	namespace:exprtk::details
node_allocator_	extern_libs/exprtk.h	/^         details::node_allocator* node_allocator_;$/;"	m	class:exprtk::parser::expression_generator
node_allocator_	extern_libs/exprtk.h	/^      details::node_allocator node_allocator_;$/;"	m	class:exprtk::parser
node_collection_destructor	extern_libs/exprtk.h	/^      class node_collection_destructor$/;"	c	namespace:exprtk::details
node_collector_interface	extern_libs/exprtk.h	/^      struct node_collector_interface$/;"	s	namespace:exprtk::details
node_depth	extern_libs/exprtk.h	/^         virtual std::size_t node_depth() const { return 1; }$/;"	f	struct:exprtk::details::node_depth_base
node_depth_base	extern_libs/exprtk.h	/^         node_depth_base()$/;"	f	struct:exprtk::details::node_depth_base
node_depth_base	extern_libs/exprtk.h	/^      struct node_depth_base$/;"	s	namespace:exprtk::details
node_pp_t	extern_libs/exprtk.h	/^         typedef Node** node_pp_t;$/;"	t	struct:exprtk::details::node_collector_interface
node_pp_t	extern_libs/exprtk.h	/^         typedef typename nci_t::node_pp_t      node_pp_t;$/;"	t	class:exprtk::details::node_collection_destructor
node_ptr_t	extern_libs/exprtk.h	/^         typedef Node* node_ptr_t;$/;"	t	struct:exprtk::details::node_collector_interface
node_ptr_t	extern_libs/exprtk.h	/^         typedef Node* node_ptr_t;$/;"	t	struct:exprtk::details::node_depth_base
node_ptr_t	extern_libs/exprtk.h	/^         typedef typename nci_t::node_ptr_t     node_ptr_t;$/;"	t	class:exprtk::details::node_collection_destructor
node_type	extern_libs/exprtk.h	/^            typedef typename cocov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_cocov_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename cocov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_cocov_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename covoc_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covoc_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename covoc_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covoc_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename covocov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename covocov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename covocov_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
node_type	extern_libs/exprtk.h	/^            typedef typename covocov_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
node_type	extern_libs/exprtk.h	/^            typedef typename covocov_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
node_type	extern_libs/exprtk.h	/^            typedef typename covov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covov_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename covov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covov_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename covovoc_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename covovoc_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename covovoc_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
node_type	extern_libs/exprtk.h	/^            typedef typename covovoc_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
node_type	extern_libs/exprtk.h	/^            typedef typename covovoc_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
node_type	extern_libs/exprtk.h	/^            typedef typename covovov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename covovov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename covovov_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
node_type	extern_libs/exprtk.h	/^            typedef typename covovov_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
node_type	extern_libs/exprtk.h	/^            typedef typename covovov_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
node_type	extern_libs/exprtk.h	/^            typedef typename vococ_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococ_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename vococ_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococ_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename vococov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename vococov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename vococov_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression2
node_type	extern_libs/exprtk.h	/^            typedef typename vococov_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
node_type	extern_libs/exprtk.h	/^            typedef typename vococov_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression4
node_type	extern_libs/exprtk.h	/^            typedef typename vocov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocov_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename vocov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocov_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename vocovoc_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename vocovoc_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename vocovoc_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
node_type	extern_libs/exprtk.h	/^            typedef typename vocovoc_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
node_type	extern_libs/exprtk.h	/^            typedef typename vocovoc_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
node_type	extern_libs/exprtk.h	/^            typedef typename vocovov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename vocovov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename vocovov_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
node_type	extern_libs/exprtk.h	/^            typedef typename vocovov_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
node_type	extern_libs/exprtk.h	/^            typedef typename vocovov_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
node_type	extern_libs/exprtk.h	/^            typedef typename vovoc_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename vovoc_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename vovocov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename vovocov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename vovocov_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
node_type	extern_libs/exprtk.h	/^            typedef typename vovocov_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
node_type	extern_libs/exprtk.h	/^            typedef typename vovocov_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
node_type	extern_libs/exprtk.h	/^            typedef typename vovov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovov_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename vovov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovov_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename vovovoc_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename vovovoc_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename vovovoc_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
node_type	extern_libs/exprtk.h	/^            typedef typename vovovoc_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
node_type	extern_libs/exprtk.h	/^            typedef typename vovovoc_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
node_type	extern_libs/exprtk.h	/^            typedef typename vovovov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
node_type	extern_libs/exprtk.h	/^            typedef typename vovovov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
node_type	extern_libs/exprtk.h	/^            typedef typename vovovov_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
node_type	extern_libs/exprtk.h	/^            typedef typename vovovov_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
node_type	extern_libs/exprtk.h	/^            typedef typename vovovov_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
node_type	extern_libs/exprtk.h	/^         enum node_type$/;"	g	class:exprtk::details::expression_node
node_type	extern_libs/exprtk.h	/^         typedef T0oT1<T,T0,T1> node_type;$/;"	t	class:exprtk::details::exprtk_final
node_type	extern_libs/exprtk.h	/^         typedef T0oT1oT2<T,T0,T1,T2,ProcessMode> node_type;$/;"	t	class:exprtk::details::exprtk_final
node_type	extern_libs/exprtk.h	/^         typedef T0oT1oT2_sf3<T,T0,T1,T2> node_type;$/;"	t	class:exprtk::details::exprtk_final
node_type	extern_libs/exprtk.h	/^         typedef T0oT1oT2_sf3ext<T,T0,T1,T2,SF3Operation> node_type;$/;"	t	class:exprtk::details::exprtk_final
node_type	extern_libs/exprtk.h	/^         typedef T0oT1oT2oT3<T,T0,T1,T2,T3,ProcessMode> node_type;$/;"	t	class:exprtk::details::exprtk_final
node_type	extern_libs/exprtk.h	/^         typedef T0oT1oT2oT3_sf4<T,T0,T1,T2,T3> node_type;$/;"	t	class:exprtk::details::exprtk_final
node_type	extern_libs/exprtk.h	/^         typedef T0oT1oT2oT3_sf4ext<T,T0,T1,T2,T3,SF4Operation> node_type;$/;"	t	class:exprtk::details::exprtk_final
noderef_list_t	extern_libs/exprtk.h	/^         typedef std::vector<node_pp_t> noderef_list_t;$/;"	t	struct:exprtk::details::node_collector_interface
noderef_list_t	extern_libs/exprtk.h	/^         typedef typename nci_t::noderef_list_t noderef_list_t;$/;"	t	class:exprtk::details::expression_node
noderef_list_t	extern_libs/exprtk.h	/^         typedef typename nci_t::noderef_list_t noderef_list_t;$/;"	t	class:exprtk::details::node_collection_destructor
nodetype_T0oT1	extern_libs/exprtk.h	/^      struct nodetype_T0oT1 { static const typename expression_node<T>::node_type result; };$/;"	s	namespace:exprtk::details
nodetype_T0oT1oT2	extern_libs/exprtk.h	/^      struct nodetype_T0oT1oT2 { static const typename expression_node<T>::node_type result; };$/;"	s	namespace:exprtk::details
nodetype_T0oT1oT2oT3	extern_libs/exprtk.h	/^      struct nodetype_T0oT1oT2oT3 { static const typename expression_node<T>::node_type result; };$/;"	s	namespace:exprtk::details
nor_impl	extern_libs/exprtk.h	/^            inline T nor_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nor_impl	extern_libs/exprtk.h	/^            inline T nor_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nor_op	extern_libs/exprtk.h	/^      struct nor_op : public opr_base<T>$/;"	s	namespace:exprtk::details
nor_opr	extern_libs/exprtk.h	/^         inline T nor_opr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
norm	utils/VecND.h	/^  T norm() const$/;"	f	class:CppUtils::VecND
norm_sqr	utils/VecND.h	/^  T norm_sqr() const$/;"	f	class:CppUtils::VecND
normal	algorithm/Edge.h	/^  const Vec2d& normal() const { return norm_;}$/;"	f	class:TQMesh::Edge
notl_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  notl_impl(const T v, int_type_tag) { return !v;            }$/;"	f	namespace:exprtk::details::numeric::details
notl_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  notl_impl(const T v, real_type_tag) { return (std::not_equal_to<T>()(T(0),v) ? T(0) : T(1)); }$/;"	f	namespace:exprtk::details::numeric::details
nrow_	utils/ParaReader.h	/^  size_t nrow_;$/;"	m	class:CppUtils::Parameter
nt	extern_libs/exprtk.h	/^      any_true   <T> nt;$/;"	m	struct:exprtk::rtl::vecops::package
nthelement	extern_libs/exprtk.h	/^      nthelement()$/;"	f	class:exprtk::rtl::vecops::nthelement
nthelement	extern_libs/exprtk.h	/^   class nthelement : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
null_element_	extern_libs/exprtk.h	/^         scope_element null_element_;$/;"	m	class:exprtk::parser::scope_element_manager
null_igenfunc	extern_libs/exprtk.h	/^      class null_igenfunc$/;"	c	namespace:exprtk::details
null_value	extern_libs/exprtk.h	/^         static T null_value;$/;"	m	class:exprtk::details::exprtk_final
null_value	extern_libs/exprtk.h	/^         static std::string null_value;$/;"	m	class:exprtk::details::exprtk_final
null_value	extern_libs/exprtk.h	/^      T variable_node<T>::null_value = T(std::numeric_limits<T>::quiet_NaN());$/;"	m	class:exprtk::details::variable_node
null_value	extern_libs/exprtk.h	/^      std::string string_range_node<T>::null_value = std::string("");$/;"	m	class:exprtk::details::string_range_node
null_value	extern_libs/exprtk.h	/^      std::string stringvar_node<T>::null_value = std::string("");$/;"	m	class:exprtk::details::stringvar_node
null_value	extern_libs/exprtk.h	/^      std::string stringvar_size_node<T>::null_value = std::string("");$/;"	m	class:exprtk::details::stringvar_size_node
num_params	extern_libs/exprtk.h	/^         unsigned int num_params;$/;"	m	struct:exprtk::details::base_operation_t
num_type	extern_libs/exprtk.h	/^         typedef typename exprtk::details::numeric::details::number_type<T>::type num_type;$/;"	t	struct:exprtk::rtl::io::details::print_impl
number_type	extern_libs/exprtk.h	/^               number_type() {}$/;"	f	struct:exprtk::details::numeric::details::number_type
number_type	extern_libs/exprtk.h	/^            struct number_type$/;"	s	namespace:exprtk::details::numeric::details
numeric	extern_libs/exprtk.h	/^      namespace numeric$/;"	n	namespace:exprtk::details
numeric_check_enabled	extern_libs/exprtk.h	/^         bool numeric_check_enabled      () const { return enable_numeric_check_;      }$/;"	f	class:exprtk::parser::settings_store
numeric_checker	extern_libs/exprtk.h	/^            numeric_checker()$/;"	f	class:exprtk::lexer::helper::numeric_checker
numeric_checker	extern_libs/exprtk.h	/^         class numeric_checker : public lexer::token_scanner$/;"	c	namespace:exprtk::lexer::helper
numeric_checker_	extern_libs/exprtk.h	/^      lexer::helper::numeric_checker            numeric_checker_;$/;"	m	class:exprtk::parser
numeric_info	extern_libs/exprtk.h	/^         struct numeric_info { enum { length = 0, size = 32, bound_length = 0, min_exp = 0, max_exp = 0 }; };$/;"	s	namespace:exprtk::details::numeric
numeric_info	extern_libs/exprtk.h	/^         template <> struct numeric_info<double     > { enum { min_exp = -308, max_exp = +308 }; };$/;"	s	namespace:exprtk::details::numeric
numeric_info	extern_libs/exprtk.h	/^         template <> struct numeric_info<float      > { enum { min_exp =  -38, max_exp =  +38 }; };$/;"	s	namespace:exprtk::details::numeric
numeric_info	extern_libs/exprtk.h	/^         template <> struct numeric_info<int        > { enum { length = 10, size = 16, bound_length = 9 }; };$/;"	s	namespace:exprtk::details::numeric
numeric_info	extern_libs/exprtk.h	/^         template <> struct numeric_info<long double> { enum { min_exp = -308, max_exp = +308 }; };$/;"	s	namespace:exprtk::details::numeric
o	extern_libs/exprtk.h	/^      open   <T> o;$/;"	m	struct:exprtk::rtl::io::file::package
offsets_	utils/VtkIO.h	/^  std::vector<size_t> offsets_;$/;"	m	class:CppUtils::VtuWriter
on_boundary	algorithm/Edge.h	/^  bool on_boundary() const $/;"	f	class:TQMesh::Edge
on_boundary	algorithm/Edge.h	/^  on_boundary    = 0b00000010,$/;"	m	class:TQMesh::EdgeProperty
on_boundary	algorithm/Vertex.h	/^  bool on_boundary() const { return has_property(VertexProperty::on_boundary); }$/;"	f	class:TQMesh::Vertex
on_boundary	algorithm/Vertex.h	/^  on_boundary   = 0b00001000,$/;"	m	class:TQMesh::VertexProperty
on_front	algorithm/Edge.h	/^  bool on_front() const { return has_property(EdgeProperty::on_front); }$/;"	f	class:TQMesh::Edge
on_front	algorithm/Edge.h	/^  on_front       = 0b00000001,$/;"	m	class:TQMesh::EdgeProperty
on_front	algorithm/Vertex.h	/^  bool on_front() const { return has_property(VertexProperty::on_front); }$/;"	f	class:TQMesh::Vertex
on_front	algorithm/Vertex.h	/^  on_front      = 0b00000001,$/;"	m	class:TQMesh::VertexProperty
open	extern_libs/exprtk.h	/^         bool open()$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
open	extern_libs/exprtk.h	/^      open()$/;"	f	class:exprtk::rtl::io::file::open
open	extern_libs/exprtk.h	/^   class open : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::io::file
opened_	utils/Log.h	/^  bool     opened_ = false;$/;"	m	class:CppUtils::LOG
operation	extern_libs/exprtk.h	/^         details::operator_type operation;$/;"	m	struct:exprtk::parser::state_t
operation	extern_libs/exprtk.h	/^         inline operator_type operation()$/;"	f	class:exprtk::details::binary_node
operation	extern_libs/exprtk.h	/^         inline operator_type operation()$/;"	f	class:exprtk::details::exprtk_final
operation	extern_libs/exprtk.h	/^         inline operator_type operation()$/;"	f	class:exprtk::details::unary_node
operation	extern_libs/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::boc_base_node
operation	extern_libs/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::cob_base_node
operation	extern_libs/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::cov_base_node
operation	extern_libs/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::sos_base_node
operation	extern_libs/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::sosos_base_node
operation	extern_libs/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::uv_base_node
operation	extern_libs/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::voc_base_node
operation	extern_libs/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::vov_base_node
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_add; }$/;"	f	struct:exprtk::details::add_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_and; }$/;"	f	struct:exprtk::details::and_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_div; }$/;"	f	struct:exprtk::details::div_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_eq; }$/;"	f	struct:exprtk::details::eq_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_equal; }$/;"	f	struct:exprtk::details::equal_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_gt; }$/;"	f	struct:exprtk::details::gt_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_gte; }$/;"	f	struct:exprtk::details::gte_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_ilike; }$/;"	f	struct:exprtk::details::ilike_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_in; }$/;"	f	struct:exprtk::details::in_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_inrange; }$/;"	f	struct:exprtk::details::inrange_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_like; }$/;"	f	struct:exprtk::details::like_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_lt; }$/;"	f	struct:exprtk::details::lt_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_lte; }$/;"	f	struct:exprtk::details::lte_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_mod; }$/;"	f	struct:exprtk::details::mod_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_mul; }$/;"	f	struct:exprtk::details::mul_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_nand; }$/;"	f	struct:exprtk::details::nand_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_ne; }$/;"	f	struct:exprtk::details::ne_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_nor; }$/;"	f	struct:exprtk::details::nor_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_or; }$/;"	f	struct:exprtk::details::or_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_pow; }$/;"	f	struct:exprtk::details::pow_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_sub; }$/;"	f	struct:exprtk::details::sub_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_xnor; }$/;"	f	struct:exprtk::details::xnor_op
operation	extern_libs/exprtk.h	/^         static inline details::operator_type operation() { return details::e_xor; }$/;"	f	struct:exprtk::details::xor_op
operation_	extern_libs/exprtk.h	/^         operator_type operation_;$/;"	m	class:exprtk::details::binary_node
operation_	extern_libs/exprtk.h	/^         operator_type operation_;$/;"	m	class:exprtk::details::quaternary_node
operation_	extern_libs/exprtk.h	/^         operator_type operation_;$/;"	m	class:exprtk::details::trinary_node
operation_	extern_libs/exprtk.h	/^         operator_type operation_;$/;"	m	class:exprtk::details::unary_node
operation_optimisable	extern_libs/exprtk.h	/^         inline bool operation_optimisable(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
operation_t	extern_libs/exprtk.h	/^         typedef Operation                      operation_t;$/;"	t	class:exprtk::details::exprtk_final
operation_t	extern_libs/exprtk.h	/^         typedef Operation operation_t;$/;"	t	class:exprtk::details::exprtk_final
operation_t	extern_libs/exprtk.h	/^         typedef PowOp operation_t;$/;"	t	class:exprtk::details::exprtk_final
operator !	extern_libs/exprtk.h	/^         bool operator!()$/;"	f	class:exprtk::parser::stack_limit_handler
operator !	extern_libs/exprtk.h	/^      inline bool operator!() const$/;"	f	class:exprtk::expression
operator !=	algorithm/Edge.h	/^static bool operator!=(const Edge& e1, const Edge& e2)$/;"	f	namespace:TQMesh
operator !=	algorithm/Quad.h	/^static bool operator!=(const Quad& q1, const Quad& q2)$/;"	f	namespace:TQMesh
operator !=	algorithm/Triangle.h	/^static bool operator!=(const Triangle& t1, const Triangle& t2)$/;"	f	namespace:TQMesh
operator !=	algorithm/Vertex.h	/^static bool operator!=(const Vertex& v1, const Vertex& v2)$/;"	f	namespace:TQMesh
operator !=	utils/VecND.h	/^inline bool operator!=(const VecND<T,N>& a, const VecND<T,N>& b)$/;"	f	namespace:CppUtils
operator &	algorithm/Edge.h	/^operator&(EdgeProperty lhs, EdgeProperty rhs) $/;"	f	namespace:TQMesh
operator &	algorithm/Vertex.h	/^operator&(VertexProperty lhs, VertexProperty rhs) $/;"	f	namespace:TQMesh
operator &=	algorithm/Edge.h	/^operator&=(EdgeProperty& lhs, EdgeProperty rhs) $/;"	f	namespace:TQMesh
operator &=	algorithm/Vertex.h	/^operator&=(VertexProperty& lhs, VertexProperty rhs) $/;"	f	namespace:TQMesh
operator ()	extern_libs/exprtk.h	/^            bool operator() (const lexer::token& t)$/;"	f	class:exprtk::lexer::helper::bracket_checker
operator ()	extern_libs/exprtk.h	/^            bool operator() (const lexer::token& t)$/;"	f	class:exprtk::lexer::helper::numeric_checker
operator ()	extern_libs/exprtk.h	/^            bool operator() (const lexer::token& t0, const lexer::token& t1)$/;"	f	class:exprtk::lexer::helper::sequence_validator
operator ()	extern_libs/exprtk.h	/^            bool operator() (const lexer::token& t0, const lexer::token& t1, const lexer::token& t2)$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
operator ()	extern_libs/exprtk.h	/^          inline T operator() ()$/;"	f	struct:exprtk::symbol_table::freefunc00
operator ()	extern_libs/exprtk.h	/^         bool operator() (std::size_t& r0, std::size_t& r1,$/;"	f	struct:exprtk::details::range_pack
operator ()	extern_libs/exprtk.h	/^         inline T operator() ()$/;"	f	struct:exprtk::function_compositor::func_0param
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v0)$/;"	f	struct:exprtk::symbol_table::freefunc01
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v0, const T& v1)$/;"	f	struct:exprtk::symbol_table::freefunc02
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2)$/;"	f	struct:exprtk::symbol_table::freefunc03
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3)$/;"	f	struct:exprtk::symbol_table::freefunc04
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4)$/;"	f	struct:exprtk::symbol_table::freefunc05
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4, const T& v5)$/;"	f	struct:exprtk::symbol_table::freefunc06
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4,$/;"	f	struct:exprtk::symbol_table::freefunc07
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4,$/;"	f	struct:exprtk::symbol_table::freefunc08
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4,$/;"	f	struct:exprtk::symbol_table::freefunc09
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4,$/;"	f	struct:exprtk::symbol_table::freefunc10
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4,$/;"	f	struct:exprtk::symbol_table::freefunc11
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v00, const T& v01, const T& v02, const T& v03, const T& v04,$/;"	f	struct:exprtk::symbol_table::freefunc12
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v00, const T& v01, const T& v02, const T& v03, const T& v04,$/;"	f	struct:exprtk::symbol_table::freefunc13
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v00, const T& v01, const T& v02, const T& v03, const T& v04,$/;"	f	struct:exprtk::symbol_table::freefunc14
operator ()	extern_libs/exprtk.h	/^         inline T operator() (const T& v00, const T& v01, const T& v02, const T& v03, const T& v04,$/;"	f	struct:exprtk::symbol_table::freefunc15
operator ()	extern_libs/exprtk.h	/^         inline T operator() (type v0)$/;"	f	struct:exprtk::function_compositor::func_1param
operator ()	extern_libs/exprtk.h	/^         inline T operator() (type v0, type v1)$/;"	f	struct:exprtk::function_compositor::func_2param
operator ()	extern_libs/exprtk.h	/^         inline T operator() (type v0, type v1, type v2)$/;"	f	struct:exprtk::function_compositor::func_3param
operator ()	extern_libs/exprtk.h	/^         inline T operator() (type v0, type v1, type v2, type v3)$/;"	f	struct:exprtk::function_compositor::func_4param
operator ()	extern_libs/exprtk.h	/^         inline T operator() (type v0, type v1, type v2, type v3, type v4)$/;"	f	struct:exprtk::function_compositor::func_5param
operator ()	extern_libs/exprtk.h	/^         inline T operator() (type v0, type v1, type v2, type v3, type v4, type v5)$/;"	f	struct:exprtk::function_compositor::func_6param
operator ()	extern_libs/exprtk.h	/^         inline bool operator() (const std::string& s1, const std::string& s2) const$/;"	f	struct:exprtk::details::ilesscompare
operator ()	extern_libs/exprtk.h	/^         inline const value_t& operator() () const$/;"	f	struct:exprtk::type_store::scalar_view
operator ()	extern_libs/exprtk.h	/^         inline expression_node_ptr operator() (const Type& v) const$/;"	f	class:exprtk::parser::expression_generator
operator ()	extern_libs/exprtk.h	/^         inline expression_node_ptr operator() (const details::operator_type& operation, expression_node_ptr (&branch)[1])$/;"	f	class:exprtk::parser::expression_generator
operator ()	extern_libs/exprtk.h	/^         inline expression_node_ptr operator() (const details::operator_type& operation, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
operator ()	extern_libs/exprtk.h	/^         inline expression_node_ptr operator() (const details::operator_type& operation, expression_node_ptr (&branch)[3])$/;"	f	class:exprtk::parser::expression_generator
operator ()	extern_libs/exprtk.h	/^         inline expression_node_ptr operator() (const details::operator_type& operation, expression_node_ptr (&branch)[4])$/;"	f	class:exprtk::parser::expression_generator
operator ()	extern_libs/exprtk.h	/^         inline expression_node_ptr operator() (const details::operator_type& operation, expression_node_ptr b0)$/;"	f	class:exprtk::parser::expression_generator
operator ()	extern_libs/exprtk.h	/^         inline expression_node_ptr operator() (const details::operator_type& operation, expression_node_ptr& b0, expression_node_ptr& b1)$/;"	f	class:exprtk::parser::expression_generator
operator ()	extern_libs/exprtk.h	/^         inline expression_node_ptr operator() (const std::string& s) const$/;"	f	class:exprtk::parser::expression_generator
operator ()	extern_libs/exprtk.h	/^         inline expression_node_ptr operator() (const std::string& s, range_t& rp) const$/;"	f	class:exprtk::parser::expression_generator
operator ()	extern_libs/exprtk.h	/^         inline expression_node_ptr operator() (expression_node_ptr branch, range_t& rp) const$/;"	f	class:exprtk::parser::expression_generator
operator ()	extern_libs/exprtk.h	/^         inline expression_node_ptr operator() (std::string& s, range_t& rp) const$/;"	f	class:exprtk::parser::expression_generator
operator ()	extern_libs/exprtk.h	/^         inline value_t& operator() ()$/;"	f	struct:exprtk::type_store::scalar_view
operator ()	extern_libs/exprtk.h	/^         inline virtual T operator() (parameter_list_t)$/;"	f	class:exprtk::details::null_igenfunc
operator ()	extern_libs/exprtk.h	/^         virtual bool operator() (const token&)$/;"	f	class:exprtk::lexer::token_scanner
operator ()	extern_libs/exprtk.h	/^         virtual bool operator() (const token&, const token&)$/;"	f	class:exprtk::lexer::token_scanner
operator ()	extern_libs/exprtk.h	/^         virtual bool operator() (const token&, const token&, const token&)$/;"	f	class:exprtk::lexer::token_scanner
operator ()	extern_libs/exprtk.h	/^         virtual bool operator() (const token&, const token&, const token&, const token&)$/;"	f	class:exprtk::lexer::token_scanner
operator ()	extern_libs/exprtk.h	/^      inline T operator() () const$/;"	f	class:exprtk::expression
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const T& v)$/;"	f	struct:exprtk::rtl::io::file::close
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const T& v)$/;"	f	struct:exprtk::rtl::io::file::eof
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::io::file::open
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::io::file::read
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::io::file::write
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::all_false
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::all_true
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::any_false
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::any_true
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::axpby
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::axpbyz
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::axpbz
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::axpy
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::axpyz
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::copy
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::count
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::dot
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::dotk
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::iota
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::nthelement
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::rol
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::ror
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::shift_left
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::shift_right
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::sort
operator ()	extern_libs/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::sumk
operator ()	extern_libs/exprtk.h	/^      inline T operator() (parameter_list_t parameters)$/;"	f	struct:exprtk::rtl::io::print
operator ()	extern_libs/exprtk.h	/^      inline T operator() (parameter_list_t parameters)$/;"	f	struct:exprtk::rtl::io::println
operator ()	extern_libs/exprtk.h	/^      inline T operator() (std::string& result,$/;"	f	class:exprtk::rtl::io::file::getline
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() ()$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c1, const T& c0)$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c10, const T& c9, const T& c8, const T& c7,$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c11, const T& c10, const T& c9, const T& c8,$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c12, const T& c11, const T& c10, const T& c9,$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c2, const T& c1, const T& c0)$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c3, const T& c2, const T& c1, const T& c0)$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c4, const T& c3, const T& c2, const T& c1,$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c5, const T& c4, const T& c3, const T& c2,$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c6, const T& c5, const T& c4, const T& c3,$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c7, const T& c6, const T& c5, const T& c4,$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c8, const T& c7, const T& c6, const T& c5,$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c9, const T& c8, const T& c7, const T& c6,$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T&)$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const T&, const T&)$/;"	f	class:exprtk::polynomial
operator ()	extern_libs/exprtk.h	/^      inline virtual T operator() (const std::vector<T>&)$/;"	f	class:exprtk::ivararg_function
operator ()	utils/Log.h	/^    void operator()(std::ostream* os) const $/;"	f	struct:CppUtils::ConditionalDeleter
operator *	utils/VecND.h	/^inline VecND<T,N> operator*(const T& b, const VecND<T,N>& a)$/;"	f	namespace:CppUtils
operator *	utils/VecND.h	/^inline VecND<T,N> operator*(const VecND<T,N>& a, const T& b)$/;"	f	namespace:CppUtils
operator *	utils/VecND.h	/^inline VecND<T,N> operator*(const VecND<T,N>& a, const VecND<T,N>& b)$/;"	f	namespace:CppUtils
operator *=	utils/VecND.h	/^  VecND<T,N> operator*=(const T &v) $/;"	f	class:CppUtils::VecND
operator *=	utils/VecND.h	/^  VecND<T,N> operator*=(const VecND<T,N> &v)  $/;"	f	class:CppUtils::VecND
operator +	utils/VecND.h	/^inline VecND<T,N> operator+(const T& b, const VecND<T,N>& a)$/;"	f	namespace:CppUtils
operator +	utils/VecND.h	/^inline VecND<T,N> operator+(const VecND<T,N>& a, const T& b)$/;"	f	namespace:CppUtils
operator +	utils/VecND.h	/^inline VecND<T,N> operator+(const VecND<T,N>& a, const VecND<T,N>& b)$/;"	f	namespace:CppUtils
operator +=	utils/VecND.h	/^  VecND<T,N> operator+=(const T &v) $/;"	f	class:CppUtils::VecND
operator +=	utils/VecND.h	/^  VecND<T,N> operator+=(const VecND<T,N> &v) $/;"	f	class:CppUtils::VecND
operator -	utils/VecND.h	/^  VecND<T,N> operator-() const $/;"	f	class:CppUtils::VecND
operator -	utils/VecND.h	/^inline VecND<T,N> operator-(const T& b, const VecND<T,N>& a)$/;"	f	namespace:CppUtils
operator -	utils/VecND.h	/^inline VecND<T,N> operator-(const VecND<T,N>& a, const T& b)$/;"	f	namespace:CppUtils
operator -	utils/VecND.h	/^inline VecND<T,N> operator-(const VecND<T,N>& a, const VecND<T,N>& b)$/;"	f	namespace:CppUtils
operator -=	utils/VecND.h	/^  VecND<T,N> operator-=(const T &v) $/;"	f	class:CppUtils::VecND
operator -=	utils/VecND.h	/^  VecND<T,N> operator-=(const VecND<T,N> &v)  $/;"	f	class:CppUtils::VecND
operator /	utils/VecND.h	/^inline VecND<T,N> operator\/(const T& b, const VecND<T,N>& a)$/;"	f	namespace:CppUtils
operator /	utils/VecND.h	/^inline VecND<T,N> operator\/(const VecND<T,N>& a, const T& b)$/;"	f	namespace:CppUtils
operator /	utils/VecND.h	/^inline VecND<T,N> operator\/(const VecND<T,N>& a, const VecND<T,N>& b)$/;"	f	namespace:CppUtils
operator /=	utils/VecND.h	/^  VecND<T,N> operator\/=(const T &v) $/;"	f	class:CppUtils::VecND
operator /=	utils/VecND.h	/^  VecND<T,N> operator\/=(const VecND<T,N> &v)  $/;"	f	class:CppUtils::VecND
operator <	extern_libs/exprtk.h	/^         bool operator < (const scope_element& se) const$/;"	f	struct:exprtk::parser::scope_element
operator <	extern_libs/exprtk.h	/^         inline bool operator <(const function_N_node<T,IFunction,0>& fn) const$/;"	f	class:exprtk::details::exprtk_final
operator <	extern_libs/exprtk.h	/^         inline bool operator <(const function_N_node<T,IFunction,N>& fn) const$/;"	f	class:exprtk::details::exprtk_final
operator <	extern_libs/exprtk.h	/^         inline bool operator <(const generic_function_node<T,GenericFunction>& fn) const$/;"	f	class:exprtk::details::generic_function_node
operator <	extern_libs/exprtk.h	/^         inline bool operator <(const string_function_node<T,StringFunction>& fn) const$/;"	f	class:exprtk::details::string_function_node
operator <	extern_libs/exprtk.h	/^         inline bool operator <(const string_range_node<T>& v) const$/;"	f	class:exprtk::details::exprtk_final
operator <	extern_libs/exprtk.h	/^         inline bool operator <(const stringvar_node<T>& v) const$/;"	f	class:exprtk::details::exprtk_final
operator <	extern_libs/exprtk.h	/^         inline bool operator <(const vararg_function_node<T,VarArgFunction>& fn) const$/;"	f	class:exprtk::details::exprtk_final
operator <	extern_libs/exprtk.h	/^         inline bool operator <(const variable_node<T>& v) const$/;"	f	class:exprtk::details::exprtk_final
operator <<	algorithm/Edge.h	/^static std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:TQMesh
operator <<	algorithm/EdgeList.h	/^static inline std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:TQMesh
operator <<	algorithm/Mesh.h	/^inline std::ostream& operator<<(std::ostream& os, const Mesh& mesh)$/;"	f	namespace:TQMesh
operator <<	algorithm/Quad.h	/^static std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:TQMesh
operator <<	algorithm/Triangle.h	/^static std::ostream& operator<<(std::ostream& os, const Triangle& t)$/;"	f	namespace:TQMesh
operator <<	algorithm/Vertex.h	/^static std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:TQMesh
operator <<	extern_libs/exprtk.h	/^         inline build_string& operator << (char_cptr s)$/;"	f	class:exprtk::details::build_string
operator <<	extern_libs/exprtk.h	/^         inline build_string& operator << (const std::string& s)$/;"	f	class:exprtk::details::build_string
operator <<	utils/Log.h	/^  LOG& operator<<(const T& msg)$/;"	f	class:CppUtils::LOG
operator <<	utils/ProgressBar.h	/^static inline std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:CppUtils
operator <<	utils/QuadTree.h	/^std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:CppUtils
operator <<	utils/Testing.h	/^static std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:CppUtils
operator <<	utils/VecND.h	/^inline std::ostream& operator<<(std::ostream &os, const VecND<T,N> &v)$/;"	f	namespace:CppUtils
operator =	algorithm/Front.h	/^  FrontInitData& operator=(FrontInitData&& f)$/;"	f	class:TQMesh::FrontInitData
operator =	extern_libs/exprtk.h	/^         T0oT1<T,T0,T1>& operator=(T0oT1<T,T0,T1>&) { return (*this); }$/;"	f	class:exprtk::details::exprtk_final
operator =	extern_libs/exprtk.h	/^         literal_node<T>& operator=(literal_node<T>&) { return (*this); }$/;"	f	class:exprtk::details::exprtk_final
operator =	extern_libs/exprtk.h	/^         node_type& operator=(node_type&) { return (*this); }$/;"	f	class:exprtk::details::exprtk_final
operator =	extern_libs/exprtk.h	/^         type& operator=(const type& vds)$/;"	f	class:exprtk::details::vec_data_store
operator =	extern_libs/exprtk.h	/^      inline expression<T>& operator=(const expression<T>& e)$/;"	f	class:exprtk::expression
operator =	extern_libs/exprtk.h	/^      inline symbol_table<T>& operator=(const symbol_table<T>& st)$/;"	f	class:exprtk::symbol_table
operator =	utils/Matrix.h	/^  inline Matrix& operator = (const Matrix& m)$/;"	f	class:CppUtils::Matrix
operator =	utils/VecND.h	/^  VecND<T,N>& operator=(VecND<T,N>&& v)$/;"	f	class:CppUtils::VecND
operator =	utils/VecND.h	/^  VecND<T,N>& operator=(const VecND<T,N>& v)$/;"	f	class:CppUtils::VecND
operator ==	algorithm/Edge.h	/^static bool operator==(const Edge& e1, const Edge& e2)$/;"	f	namespace:TQMesh
operator ==	algorithm/Quad.h	/^static bool operator==(const Quad& q1, const Quad& q2)$/;"	f	namespace:TQMesh
operator ==	algorithm/Triangle.h	/^static bool operator==(const Triangle& t1, const Triangle& t2)$/;"	f	namespace:TQMesh
operator ==	algorithm/Vertex.h	/^static bool operator==(const Vertex& v1, const Vertex& v2)$/;"	f	namespace:TQMesh
operator ==	extern_libs/exprtk.h	/^      inline bool operator==(const expression<T>& e) const$/;"	f	class:exprtk::expression
operator ==	extern_libs/exprtk.h	/^      inline bool operator==(const symbol_table<T>& st) const$/;"	f	class:exprtk::symbol_table
operator ==	utils/VecND.h	/^inline bool operator==(const VecND<T,N>& a, const VecND<T,N>& b)$/;"	f	namespace:CppUtils
operator T	extern_libs/exprtk.h	/^      inline operator T() const$/;"	f	class:exprtk::expression
operator T	utils/StringOps.h	/^  template <typename T> operator T() { return 0; }$/;"	f	struct:CppUtils::converter
operator []	algorithm/Domain.h	/^  Boundary& operator[](size_t i) const $/;"	f	class:TQMesh::Domain
operator []	algorithm/EdgeList.h	/^  Edge& operator[](int i) { return edges_[i]; }$/;"	f	class:TQMesh::EdgeList
operator []	algorithm/EdgeList.h	/^  const Edge& operator[](int i) const { return edges_[i]; }$/;"	f	class:TQMesh::EdgeList
operator []	extern_libs/exprtk.h	/^            inline value_ptr operator[](const std::size_t& index) const$/;"	f	class:exprtk::details::vector_holder::vector_holder_base
operator []	extern_libs/exprtk.h	/^         inline const type_store& operator[](const std::size_t& index) const$/;"	f	class:exprtk::type_store::parameter_list
operator []	extern_libs/exprtk.h	/^         inline const value_t& operator[](const std::size_t& i) const$/;"	f	struct:exprtk::type_store::type_view
operator []	extern_libs/exprtk.h	/^         inline token_t operator[](const std::size_t& index) const$/;"	f	class:exprtk::lexer::generator
operator []	extern_libs/exprtk.h	/^         inline token_t& operator[](const std::size_t& index)$/;"	f	class:exprtk::lexer::generator
operator []	extern_libs/exprtk.h	/^         inline type_store& operator[](const std::size_t& index)$/;"	f	class:exprtk::type_store::parameter_list
operator []	extern_libs/exprtk.h	/^         inline value_ptr operator[](const std::size_t& index) const$/;"	f	class:exprtk::details::vector_holder
operator []	extern_libs/exprtk.h	/^         inline value_t& operator[](const std::size_t& i)$/;"	f	struct:exprtk::type_store::type_view
operator []	extern_libs/exprtk.h	/^      inline T& operator[](const std::size_t index)$/;"	f	class:exprtk::vector_view
operator []	extern_libs/exprtk.h	/^      inline const T& operator[](const std::size_t index) const$/;"	f	class:exprtk::vector_view
operator []	extern_libs/exprtk.h	/^      inline const type_store_t& operator[](const std::size_t& index) const$/;"	f	class:exprtk::results_context
operator []	extern_libs/exprtk.h	/^      inline type_store_t& operator[](const std::size_t& index)$/;"	f	class:exprtk::results_context
operator []	utils/Container.h	/^  T& operator[](size_t i)$/;"	f	class:CppUtils::Container
operator []	utils/Container.h	/^  const T& operator[](size_t i) const$/;"	f	class:CppUtils::Container
operator []	utils/Matrix.h	/^  inline T* operator[](const int i)$/;"	f	class:CppUtils::Matrix
operator []	utils/Matrix.h	/^  inline const T* operator [](const int i) const$/;"	f	class:CppUtils::Matrix
operator []	utils/VecND.h	/^  T operator[](std::size_t i) const$/;"	f	class:CppUtils::VecND
operator []	utils/VecND.h	/^  T& operator[](std::size_t i)$/;"	f	class:CppUtils::VecND
operator bool	extern_libs/exprtk.h	/^      inline operator bool() const$/;"	f	class:exprtk::expression
operator double	utils/StringOps.h	/^template <> converter::operator double() { return std::stod(x); }$/;"	f	class:CppUtils::converter
operator float	utils/StringOps.h	/^template <> converter::operator float() { return std::stof(x); }$/;"	f	class:CppUtils::converter
operator int	utils/StringOps.h	/^template <> converter::operator int() { return std::stoi(x); }$/;"	f	class:CppUtils::converter
operator std::string	extern_libs/exprtk.h	/^         inline operator std::string () const$/;"	f	class:exprtk::details::build_string
operator |=	algorithm/Edge.h	/^operator|=(EdgeProperty& lhs, EdgeProperty rhs) $/;"	f	namespace:TQMesh
operator |=	algorithm/Vertex.h	/^operator|=(VertexProperty& lhs, VertexProperty rhs) $/;"	f	namespace:TQMesh
operator ~	algorithm/Edge.h	/^static inline EdgeProperty operator~(EdgeProperty prop) $/;"	f	namespace:TQMesh
operator ~	algorithm/Vertex.h	/^static inline VertexProperty operator~(VertexProperty prop) $/;"	f	namespace:TQMesh
operator_joiner	extern_libs/exprtk.h	/^            explicit operator_joiner(const std::size_t& stride)$/;"	f	class:exprtk::lexer::helper::operator_joiner
operator_joiner	extern_libs/exprtk.h	/^         class operator_joiner : public token_joiner$/;"	c	namespace:exprtk::lexer::helper
operator_joiner_2_	extern_libs/exprtk.h	/^      lexer::helper::operator_joiner            operator_joiner_2_;$/;"	m	class:exprtk::parser
operator_joiner_3_	extern_libs/exprtk.h	/^      lexer::helper::operator_joiner            operator_joiner_3_;$/;"	m	class:exprtk::parser
operator_t	extern_libs/exprtk.h	/^      typedef details::operator_type operator_t;$/;"	t	class:exprtk::parser
operator_type	extern_libs/exprtk.h	/^      enum operator_type$/;"	g	namespace:exprtk::details
opr_base	extern_libs/exprtk.h	/^      struct opr_base$/;"	s	namespace:exprtk::details
options_	extern_libs/exprtk.h	/^         std::size_t options_;$/;"	m	class:exprtk::parser::dependent_entity_collector
or_impl	extern_libs/exprtk.h	/^            inline T or_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
or_impl	extern_libs/exprtk.h	/^            inline T or_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
or_op	extern_libs/exprtk.h	/^      struct or_op : public opr_base<T>$/;"	s	namespace:exprtk::details
or_opr	extern_libs/exprtk.h	/^         inline T or_opr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
orient	algorithm/EdgeList.h	/^  Orientation orient() const { return orient_; }$/;"	f	class:TQMesh::EdgeList
orient_	algorithm/EdgeList.h	/^  Orientation         orient_;$/;"	m	class:TQMesh::EdgeList
orientation	utils/Geometry.h	/^static inline Orientation orientation(const Vec2<T>& p,$/;"	f	namespace:CppUtils
original_value_	extern_libs/exprtk.h	/^         bool original_value_;$/;"	m	struct:exprtk::parser::scoped_bool_or_restorer
os_precision	utils/VecND.h	/^  static inline std::size_t os_precision = 3;$/;"	m	class:CppUtils::VecND
os_width	utils/VecND.h	/^  static inline std::size_t os_width = 0; $/;"	m	class:CppUtils::VecND
output_format_	app/TQMeshApp.h	/^  std::string             output_format_;$/;"	m	class:TQMesh::MeshConstruction
output_prefix_	app/TQMeshApp.h	/^  std::string             output_prefix_;$/;"	m	class:TQMesh::MeshConstruction
overload_function_store	extern_libs/exprtk.h	/^            type_store<generic_function_t, generic_function_t> overload_function_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
p	extern_libs/exprtk.h	/^      print  <T> p;$/;"	m	struct:exprtk::rtl::io::package
p_	extern_libs/exprtk.h	/^         ptr_t* p_;$/;"	m	struct:exprtk::parser::scoped_delete
package	extern_libs/exprtk.h	/^   struct package$/;"	s	namespace:exprtk::rtl::io
package	extern_libs/exprtk.h	/^   struct package$/;"	s	namespace:exprtk::rtl::io::file
package	extern_libs/exprtk.h	/^   struct package$/;"	s	namespace:exprtk::rtl::vecops
pair	extern_libs/exprtk.h	/^      inline void construct_branch_pair(std::pair<expression_node<T>*,bool> (&branch)[N],$/;"	m	namespace:exprtk::details
pair	extern_libs/exprtk.h	/^      inline void init_branches(std::pair<expression_node<T>*,bool> (&branch)[N],$/;"	m	namespace:exprtk::details
para_list	utils/ParaReader.h	/^  ParameterList& para_list() { return para_list_; }$/;"	f	class:CppUtils::ParaBlock
para_list	utils/ParaReader.h	/^  const ParameterList& para_list() const { return para_list_; }$/;"	f	class:CppUtils::ParaBlock
para_list_	utils/ParaReader.h	/^  ParameterList   para_list_; $/;"	m	class:CppUtils::ParaBlock
para_map_	utils/ParaReader.h	/^  ParameterMap    para_map_;$/;"	m	class:CppUtils::ParaBlock
param_count	extern_libs/exprtk.h	/^      std::size_t param_count;$/;"	m	class:exprtk::ifunction
param_seq_index_	extern_libs/exprtk.h	/^         const std::size_t param_seq_index_;$/;"	m	class:exprtk::details::exprtk_final
param_seq_index_	extern_libs/exprtk.h	/^         std::size_t param_seq_index_;$/;"	m	class:exprtk::details::multimode_genfunction_node
param_stack	extern_libs/exprtk.h	/^         std::deque<var_t> param_stack;$/;"	m	struct:exprtk::function_compositor::base_func
param_to_str	extern_libs/exprtk.h	/^      struct param_to_str { static std::string result() { static const std::string r("v"); return r; } };$/;"	s	namespace:exprtk::details
param_to_str	extern_libs/exprtk.h	/^      struct param_to_str<0> { static std::string result() { static const std::string r("c"); return r; } };$/;"	s	namespace:exprtk::details
parameter_count_	extern_libs/exprtk.h	/^         std::size_t parameter_count_;$/;"	m	class:exprtk::details::exprtk_final
parameter_list	extern_libs/exprtk.h	/^         explicit parameter_list(std::vector<type_store>& pl)$/;"	f	class:exprtk::type_store::parameter_list
parameter_list	extern_libs/exprtk.h	/^      class parameter_list$/;"	c	struct:exprtk::type_store
parameter_list_	extern_libs/exprtk.h	/^         std::vector<type_store>& parameter_list_;$/;"	m	class:exprtk::type_store::parameter_list
parameter_list_	extern_libs/exprtk.h	/^      ts_list_t parameter_list_;$/;"	m	class:exprtk::results_context
parameter_list_t	extern_libs/exprtk.h	/^         typedef typename generic_type::parameter_list parameter_list_t;$/;"	t	class:exprtk::details::null_igenfunc
parameter_list_t	extern_libs/exprtk.h	/^         typedef typename igeneric_function<T>::parameter_list_t parameter_list_t;$/;"	t	struct:exprtk::rtl::io::details::print_impl
parameter_list_t	extern_libs/exprtk.h	/^         typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	struct:exprtk::rtl::vecops::helper::load_vector_range
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename generic_type::parameter_list parameter_list_t;$/;"	t	class:exprtk::igeneric_function
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igeneric_function<T>::parameter_list_t parameter_list_t;$/;"	t	struct:exprtk::rtl::io::print
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igeneric_function<T>::parameter_list_t parameter_list_t;$/;"	t	struct:exprtk::rtl::io::println
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::io::file::getline
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::io::file::open
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::io::file::read
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::io::file::write
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::all_false
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::all_true
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::any_false
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::any_true
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::axpby
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::axpbyz
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::axpbz
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::axpy
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::axpyz
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::copy
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::count
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::dot
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::dotk
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::iota
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::nthelement
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::rol
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::ror
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::shift_left
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::shift_right
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::sort
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::sumk
parameter_list_t	extern_libs/exprtk.h	/^      typedef typename type_store_t::parameter_list parameter_list_t;$/;"	t	class:exprtk::results_context
parameter_sequence	extern_libs/exprtk.h	/^      std::string parameter_sequence;$/;"	m	class:exprtk::igeneric_function
parent_t	extern_libs/exprtk.h	/^         typedef for_loop_bc_node<T> parent_t;$/;"	t	class:exprtk::details::exprtk_final
parent_t	extern_libs/exprtk.h	/^         typedef for_loop_node<T>    parent_t;$/;"	t	class:exprtk::details::exprtk_final
parent_t	extern_libs/exprtk.h	/^         typedef for_loop_node<T>    parent_t;$/;"	t	class:exprtk::details::for_loop_bc_node
parent_t	extern_libs/exprtk.h	/^         typedef repeat_until_loop_bc_node<T> parent_t;$/;"	t	class:exprtk::details::exprtk_final
parent_t	extern_libs/exprtk.h	/^         typedef repeat_until_loop_node<T> parent_t;$/;"	t	class:exprtk::details::exprtk_final
parent_t	extern_libs/exprtk.h	/^         typedef repeat_until_loop_node<T> parent_t;$/;"	t	class:exprtk::details::repeat_until_loop_bc_node
parent_t	extern_libs/exprtk.h	/^         typedef while_loop_bc_node<T> parent_t;$/;"	t	class:exprtk::details::exprtk_final
parent_t	extern_libs/exprtk.h	/^         typedef while_loop_node<T>  parent_t;$/;"	t	class:exprtk::details::exprtk_final
parent_t	extern_libs/exprtk.h	/^         typedef while_loop_node<T>  parent_t;$/;"	t	class:exprtk::details::while_loop_bc_node
parse_branch	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_branch(precedence_level precedence = e_level00)$/;"	f	class:exprtk::parser
parse_break_statement	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_break_statement()$/;"	f	class:exprtk::parser
parse_continue_statement	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_continue_statement()$/;"	f	class:exprtk::parser
parse_corpus	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_corpus()$/;"	f	class:exprtk::parser
parse_define_string_statement	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_define_string_statement(const std::string& str_name, expression_node_ptr initialisation_expression)$/;"	f	class:exprtk::parser
parse_define_string_statement	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_define_string_statement(const std::string&, expression_node_ptr)$/;"	f	class:exprtk::parser
parse_define_var_statement	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_define_var_statement()$/;"	f	class:exprtk::parser
parse_define_vector_statement	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_define_vector_statement(const std::string& vec_name)$/;"	f	class:exprtk::parser
parse_digit_1	extern_libs/exprtk.h	1869;"	d
parse_digit_1	extern_libs/exprtk.h	1929;"	d
parse_digit_2	extern_libs/exprtk.h	1876;"	d
parse_digit_2	extern_libs/exprtk.h	1930;"	d
parse_expression	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_expression(precedence_level precedence = e_level00)$/;"	f	class:exprtk::parser
parse_function_call	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_function_call(ifunction<T>* function, const std::string& function_name)$/;"	f	class:exprtk::parser
parse_function_call_0	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_function_call_0(ifunction<T>* function, const std::string& function_name)$/;"	f	class:exprtk::parser
parse_function_invocation	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_function_invocation(ifunction<T>* function, const std::string& function_name)$/;"	f	class:exprtk::parser
parse_generic_function_call	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_generic_function_call(igeneric_function<T>* function, const std::string& function_name)$/;"	f	class:exprtk::parser
parse_hex	extern_libs/exprtk.h	/^      inline bool parse_hex(Iterator& itr, Iterator end,$/;"	f	namespace:exprtk::details
parse_igeneric_function_params	extern_libs/exprtk.h	/^      inline bool parse_igeneric_function_params(std::string& param_type_list,$/;"	f	class:exprtk::parser
parse_inf	extern_libs/exprtk.h	/^      static inline bool parse_inf(Iterator& itr, const Iterator end, T& t, bool negative)$/;"	f	namespace:exprtk::details
parse_nan	extern_libs/exprtk.h	/^      static inline bool parse_nan(Iterator& itr, const Iterator end, T& t)$/;"	f	namespace:exprtk::details
parse_null_statement	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_null_statement()$/;"	f	class:exprtk::parser
parse_overload_function_call	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_overload_function_call(igeneric_function<T>* function, const std::string& function_name)$/;"	f	class:exprtk::parser
parse_return_statement	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_return_statement()$/;"	f	class:exprtk::parser
parse_special_function	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_special_function()$/;"	f	class:exprtk::parser
parse_special_function_impl	extern_libs/exprtk.h	/^      struct parse_special_function_impl$/;"	s	class:exprtk::parser
parse_string_function_call	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_string_function_call(igeneric_function<T>* function, const std::string& function_name)$/;"	f	class:exprtk::parser
parse_swap_statement	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_swap_statement()$/;"	f	class:exprtk::parser
parse_symbol	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_symbol()$/;"	f	class:exprtk::parser
parse_symtab_symbol	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_symtab_symbol()$/;"	f	class:exprtk::parser
parse_uninitialised_var_statement	extern_libs/exprtk.h	/^      inline expression_node_ptr parse_uninitialised_var_statement(const std::string& var_name)$/;"	f	class:exprtk::parser
parser	app/size_function.cpp	/^static exprtk::parser<double>       parser;$/;"	v	file:
parser	extern_libs/exprtk.h	/^      parser(const settings_t& settings = settings_t())$/;"	f	class:exprtk::parser
parser	extern_libs/exprtk.h	/^   class parser : public lexer::parser_helper$/;"	c	namespace:exprtk
parser_	extern_libs/exprtk.h	/^         parser<T>& parser_;$/;"	m	struct:exprtk::parser::scoped_delete
parser_	extern_libs/exprtk.h	/^         parser<T>& parser_;$/;"	m	struct:exprtk::parser::scoped_deq_delete
parser_	extern_libs/exprtk.h	/^         parser<T>& parser_;$/;"	m	struct:exprtk::parser::scoped_expression_delete
parser_	extern_libs/exprtk.h	/^         parser<T>& parser_;$/;"	m	struct:exprtk::parser::scoped_vec_delete
parser_	extern_libs/exprtk.h	/^         parser_t& parser_;$/;"	m	class:exprtk::parser::scope_element_manager
parser_	extern_libs/exprtk.h	/^         parser_t& parser_;$/;"	m	class:exprtk::parser::scope_handler
parser_	extern_libs/exprtk.h	/^         parser_t& parser_;$/;"	m	class:exprtk::parser::stack_limit_handler
parser_	extern_libs/exprtk.h	/^         parser_t*                parser_;$/;"	m	class:exprtk::parser::expression_generator
parser_	extern_libs/exprtk.h	/^      parser_t parser_;$/;"	m	class:exprtk::function_compositor
parser_error	extern_libs/exprtk.h	/^   namespace parser_error$/;"	n	namespace:exprtk
parser_helper	extern_libs/exprtk.h	/^      class parser_helper$/;"	c	namespace:exprtk::lexer
parser_state	extern_libs/exprtk.h	/^         parser_state()$/;"	f	struct:exprtk::parser::parser_state
parser_state	extern_libs/exprtk.h	/^      struct parser_state$/;"	s	class:exprtk::parser
parser_t	extern_libs/exprtk.h	/^            typedef exprtk::parser<T> parser_t;$/;"	t	struct:exprtk::details::collector_helper::resolve_as_vector
parser_t	extern_libs/exprtk.h	/^         typedef exprtk::parser<T>       parser_t;$/;"	t	struct:exprtk::details::collector_helper
parser_t	extern_libs/exprtk.h	/^         typedef parser<T>          parser_t;$/;"	t	class:exprtk::parser::scope_element_manager
parser_t	extern_libs/exprtk.h	/^         typedef parser<T> parser_t;$/;"	t	class:exprtk::parser::scope_handler
parser_t	extern_libs/exprtk.h	/^         typedef parser<T> parser_t;$/;"	t	class:exprtk::parser::stack_limit_handler
parser_t	extern_libs/exprtk.h	/^         typedef typename exprtk::parser<Type> parser_t;$/;"	t	class:exprtk::parser::expression_generator
parser_t	extern_libs/exprtk.h	/^      typedef exprtk::parser<T>                 parser_t;$/;"	t	class:exprtk::function_compositor
parser_t	extern_libs/exprtk.h	/^      typedef parser<T>               parser_t;$/;"	t	struct:exprtk::type_defs
parsing_break_stmt	extern_libs/exprtk.h	/^         bool parsing_break_stmt;$/;"	m	struct:exprtk::parser::parser_state
parsing_loop_stmt_count	extern_libs/exprtk.h	/^         std::size_t parsing_loop_stmt_count;$/;"	m	struct:exprtk::parser::parser_state
parsing_return_stmt	extern_libs/exprtk.h	/^         bool parsing_return_stmt;$/;"	m	struct:exprtk::parser::parser_state
pass_children	utils/QuadTree.h	/^  bool pass_children(T* item)$/;"	f	class:CppUtils::QuadTree
peek_next_token	extern_libs/exprtk.h	/^         inline token_t& peek_next_token()$/;"	f	class:exprtk::lexer::generator
peek_token_is	extern_libs/exprtk.h	/^         inline bool peek_token_is(const std::string& s)$/;"	f	class:exprtk::lexer::parser_helper
peek_token_is	extern_libs/exprtk.h	/^         inline bool peek_token_is(const token_t::token_type& ttype)$/;"	f	class:exprtk::lexer::parser_helper
perform_check	extern_libs/exprtk.h	/^      void perform_check()$/;"	f	namespace:exprtk::rtl::io::file::details
perform_mesh_cleanup	algorithm/MeshChecker.h	/^  void perform_mesh_cleanup() const$/;"	f	class:TQMesh::MeshChecker
pgo_primer	extern_libs/exprtk.h	/^   inline bool pgo_primer()$/;"	f	namespace:exprtk
pi	extern_libs/exprtk.h	/^            static const double pi      =  3.14159265358979323846264338327950288419716939937510;$/;"	m	namespace:exprtk::details::numeric::constant
pi_180	extern_libs/exprtk.h	/^            static const double pi_180  =  0.01745329251994329576923690768488612713442871888542;$/;"	m	namespace:exprtk::details::numeric::constant
pi_2	extern_libs/exprtk.h	/^            static const double pi_2    =  1.57079632679489661923132169163975144209858469968755;$/;"	m	namespace:exprtk::details::numeric::constant
pi_4	extern_libs/exprtk.h	/^            static const double pi_4    =  0.78539816339744830961566084581987572104929234984378;$/;"	m	namespace:exprtk::details::numeric::constant
pl	extern_libs/exprtk.h	/^      println<T> pl;$/;"	m	struct:exprtk::rtl::io::package
place_end_vertex	algorithm/QuadLayering.h	/^  void place_end_vertex(Vertices& verts, $/;"	f	class:TQMesh::QuadLayerVertices
place_start_vertex	algorithm/QuadLayering.h	/^  void place_start_vertex(Vertices& mesh_vertices, $/;"	f	class:TQMesh::QuadLayerVertices
point_data_	utils/VtkIO.h	/^  std::vector<std::unique_ptr<VtkIODataInterface>> point_data_;$/;"	m	class:CppUtils::VtuWriter
pointer	extern_libs/exprtk.h	/^            void*       pointer;$/;"	m	struct:exprtk::expression::control_block::data_pack
points_	utils/VtkIO.h	/^  std::vector<double> points_;$/;"	m	class:CppUtils::VtuWriter
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl <Type,10>$/;"	s	class:exprtk::polynomial
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl <Type,11>$/;"	s	class:exprtk::polynomial
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl <Type,12>$/;"	s	class:exprtk::polynomial
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl <Type,1>$/;"	s	class:exprtk::polynomial
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl <Type,2>$/;"	s	class:exprtk::polynomial
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl <Type,3>$/;"	s	class:exprtk::polynomial
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl <Type,4>$/;"	s	class:exprtk::polynomial
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl <Type,5>$/;"	s	class:exprtk::polynomial
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl <Type,6>$/;"	s	class:exprtk::polynomial
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl <Type,7>$/;"	s	class:exprtk::polynomial
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl <Type,8>$/;"	s	class:exprtk::polynomial
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl <Type,9>$/;"	s	class:exprtk::polynomial
poly_impl	extern_libs/exprtk.h	/^      struct poly_impl { };$/;"	s	class:exprtk::polynomial
poly_rtrn	extern_libs/exprtk.h	37684;"	d
poly_rtrn	extern_libs/exprtk.h	37760;"	d
polygon_area	utils/Geometry.h	/^inline T polygon_area(const std::vector<Vec2<T>>& vertices)$/;"	f	namespace:CppUtils
polynomial	extern_libs/exprtk.h	/^      polynomial()$/;"	f	class:exprtk::polynomial
polynomial	extern_libs/exprtk.h	/^   class polynomial : public ifunction<T>$/;"	c	namespace:exprtk
populate_value_list	extern_libs/exprtk.h	/^         inline virtual bool populate_value_list() const$/;"	f	class:exprtk::details::generic_function_node
populate_value_list	extern_libs/exprtk.h	/^         inline void populate_value_list() const$/;"	f	class:exprtk::details::exprtk_final
pos	utils/Container.h	/^  const Iterator& pos() const { return pos_; }$/;"	f	class:CppUtils::ContainerEntry
pos_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   pos_impl(const T v, int_type_tag) { return +v;            }$/;"	f	namespace:exprtk::details::numeric::details
pos_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   pos_impl(const T v, real_type_tag) { return +v;            }$/;"	f	namespace:exprtk::details::numeric::details
position	extern_libs/exprtk.h	/^         std::size_t position;$/;"	m	struct:exprtk::lexer::token
post	extern_libs/exprtk.h	/^         inline void post()$/;"	f	struct:exprtk::function_compositor::base_func
post_bracket_process	extern_libs/exprtk.h	/^      inline bool post_bracket_process(const typename token_t::token_type& token, expression_node_ptr& branch)$/;"	f	class:exprtk::parser
post_variable_process	extern_libs/exprtk.h	/^      inline bool post_variable_process(const std::string& symbol)$/;"	f	class:exprtk::parser
pow	extern_libs/exprtk.h	/^         inline T pow(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
pow10	extern_libs/exprtk.h	/^      static const double pow10[] = {$/;"	m	namespace:exprtk::details
pow10_size	extern_libs/exprtk.h	/^      static const std::size_t pow10_size = sizeof(pow10) \/ sizeof(double);$/;"	m	namespace:exprtk::details
pow_impl	extern_libs/exprtk.h	/^            inline T pow_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
pow_impl	extern_libs/exprtk.h	/^            inline T pow_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
pow_op	extern_libs/exprtk.h	/^      struct pow_op : public opr_base<T>$/;"	s	namespace:exprtk::details
pre	extern_libs/exprtk.h	/^         inline void pre()$/;"	f	struct:exprtk::function_compositor::base_func
precedence_level	extern_libs/exprtk.h	/^      enum precedence_level$/;"	g	class:exprtk::parser
prepare_mesh	algorithm/MeshBuilder.h	/^  bool prepare_mesh(Mesh& mesh, Domain& domain)$/;"	f	class:TQMesh::MeshBuilder
print	extern_libs/exprtk.h	/^         static inline void print(const std::string& scalar_format, const scalar_t& s)$/;"	f	struct:exprtk::rtl::io::details::print_impl
print	extern_libs/exprtk.h	/^         static inline void print(const std::string& scalar_format, const vector_t& v)$/;"	f	struct:exprtk::rtl::io::details::print_impl
print	extern_libs/exprtk.h	/^         static inline void print(const string_t& s)$/;"	f	struct:exprtk::rtl::io::details::print_impl
print	extern_libs/exprtk.h	/^      print(const std::string& scalar_format = "%10.5f")$/;"	f	struct:exprtk::rtl::io::print
print	extern_libs/exprtk.h	/^   struct print : public exprtk::igeneric_function<T>$/;"	s	namespace:exprtk::rtl::io
print_header	app/main.cpp	/^static void print_header()$/;"	f	file:
print_impl	extern_libs/exprtk.h	/^      struct print_impl$/;"	s	namespace:exprtk::rtl::io::details
print_parameter	app/TQMeshApp.h	/^  void print_parameter(ParaReader& reader, $/;"	f	class:TQMesh::MeshConstruction
print_parameter	tests/tests_ParaReader.cpp	/^void print_parameter(ParaReader& reader, const std::string& name)$/;"	f	namespace:ParaReaderTests
print_type	extern_libs/exprtk.h	/^      inline void print_type(const std::string& fmt,$/;"	f	namespace:exprtk::rtl::io::details
println	extern_libs/exprtk.h	/^      println(const std::string& scalar_format = "%10.5f")$/;"	f	struct:exprtk::rtl::io::println
println	extern_libs/exprtk.h	/^   struct println : public exprtk::igeneric_function<T>$/;"	s	namespace:exprtk::rtl::io
process	extern_libs/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_1
process	extern_libs/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_2
process	extern_libs/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_3
process	extern_libs/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_4
process	extern_libs/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_5
process	extern_libs/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_6
process	extern_libs/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_7
process	extern_libs/exprtk.h	/^            static inline T process(const T& t0, const T& t1, const T& t2, const bfunc_t bf0, const bfunc_t bf1)$/;"	f	struct:exprtk::details::T0oT1oT2process::mode0
process	extern_libs/exprtk.h	/^            static inline T process(const T& t0, const T& t1, const T& t2, const bfunc_t bf0, const bfunc_t bf1)$/;"	f	struct:exprtk::details::T0oT1oT2process::mode1
process	extern_libs/exprtk.h	/^            static inline T process(const T& t0, const T& t1,$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode0
process	extern_libs/exprtk.h	/^            static inline T process(const T& t0, const T& t1,$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode1
process	extern_libs/exprtk.h	/^            static inline T process(const T& t0, const T& t1,$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode2
process	extern_libs/exprtk.h	/^            static inline T process(const T& t0, const T& t1,$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode3
process	extern_libs/exprtk.h	/^            static inline T process(const T& t0, const T& t1,$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode4
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_binary_ext_expression
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_boc_expression
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_bov_expression
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_cob_expression
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_coboc_expression
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_cocob_expression
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_cocov_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_cov_expression
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covoc_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covoc_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covov_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covov_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf3ext_expression
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf4ext_expression
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vob_expression
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_voc_expression
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococ_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocov_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocov_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vov_expression
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovov_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovov_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>&,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_cocov_expression0
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>&,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococ_expression1
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>&,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression2
process	extern_libs/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>&,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression4
process	extern_libs/exprtk.h	/^            static inline void process(std::pair<bool,DeleteType*>&)$/;"	f	struct:exprtk::symbol_table::type_store::deleter
process	extern_libs/exprtk.h	/^            virtual bool process(const std::string& unknown_symbol,$/;"	f	struct:exprtk::details::collector_helper::resolve_as_vector
process	extern_libs/exprtk.h	/^         inline T process(const operator_type operation, const T arg)$/;"	f	namespace:exprtk::details::numeric
process	extern_libs/exprtk.h	/^         inline T process(const operator_type operation, const T arg0, const T arg1)$/;"	f	namespace:exprtk::details::numeric
process	extern_libs/exprtk.h	/^         inline bool process(const std::string& str)$/;"	f	class:exprtk::lexer::generator
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return ((t1 < t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::lt_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return ((t1 <= t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::lte_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return ((t1 > t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::gt_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return ((t1 >= t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::gte_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return (details::is_true(t1) && details::is_true(t2)) ? T(0) : T(1); }$/;"	f	struct:exprtk::details::nand_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return (details::is_true(t1) && details::is_true(t2)) ? T(1) : T(0); }$/;"	f	struct:exprtk::details::and_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return (details::is_true(t1) || details::is_true(t2)) ? T(0) : T(1); }$/;"	f	struct:exprtk::details::nor_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return (details::is_true(t1) || details::is_true(t2)) ? T(1) : T(0); }$/;"	f	struct:exprtk::details::or_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return (std::equal_to<T>()(t1,t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::eq_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return (std::not_equal_to<T>()(t1,t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::ne_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return numeric::equal(t1,t2); }$/;"	f	struct:exprtk::details::equal_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return numeric::modulus<T>(t1,t2); }$/;"	f	struct:exprtk::details::mod_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return numeric::pow<T>(t1,t2); }$/;"	f	struct:exprtk::details::pow_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return numeric::xnor_opr<T>(t1,t2); }$/;"	f	struct:exprtk::details::xnor_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return numeric::xor_opr<T>(t1,t2); }$/;"	f	struct:exprtk::details::xor_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return t1 * t2; }$/;"	f	struct:exprtk::details::mul_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return t1 + t2; }$/;"	f	struct:exprtk::details::add_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return t1 - t2; }$/;"	f	struct:exprtk::details::sub_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2) { return t1 \/ t2; }$/;"	f	struct:exprtk::details::div_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2, Type t3) { return t1 * t2 * t3; }$/;"	f	struct:exprtk::details::mul_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2, Type t3) { return t1 + t2 + t3; }$/;"	f	struct:exprtk::details::add_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2, Type t3) { return t1 - t2 - t3; }$/;"	f	struct:exprtk::details::sub_op
process	extern_libs/exprtk.h	/^         static inline T process(Type t1, Type t2, Type t3) { return t1 \/ t2 \/ t3; }$/;"	f	struct:exprtk::details::div_op
process	extern_libs/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_add_op
process	extern_libs/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_avg_op
process	extern_libs/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_mand_op
process	extern_libs/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_max_op
process	extern_libs/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_min_op
process	extern_libs/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_mor_op
process	extern_libs/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_mul_op
process	extern_libs/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process	extern_libs/exprtk.h	/^         static inline T process(const T& t0, const T& t1, const T& t2) { return ((t0 <= t1) && (t1 <= t2)) ? T(1) : T(0); }$/;"	f	struct:exprtk::details::inrange_op
process	extern_libs/exprtk.h	/^         static inline T process(const T&, const T&) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	struct:exprtk::details::ilike_op
process	extern_libs/exprtk.h	/^         static inline T process(const T&, const T&) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	struct:exprtk::details::in_op
process	extern_libs/exprtk.h	/^         static inline T process(const T&, const T&) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	struct:exprtk::details::like_op
process	extern_libs/exprtk.h	/^         static inline T process(const ivector_ptr v)$/;"	f	struct:exprtk::details::vec_add_op
process	extern_libs/exprtk.h	/^         static inline T process(const ivector_ptr v)$/;"	f	struct:exprtk::details::vec_avg_op
process	extern_libs/exprtk.h	/^         static inline T process(const ivector_ptr v)$/;"	f	struct:exprtk::details::vec_max_op
process	extern_libs/exprtk.h	/^         static inline T process(const ivector_ptr v)$/;"	f	struct:exprtk::details::vec_min_op
process	extern_libs/exprtk.h	/^         static inline T process(const ivector_ptr v)$/;"	f	struct:exprtk::details::vec_mul_op
process	extern_libs/exprtk.h	/^         static inline T process(const std::string& t0, const std::string& t1, const std::string& t2)$/;"	f	struct:exprtk::details::inrange_op
process	extern_libs/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((std::string::npos != t2.find(t1)) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::in_op
process	extern_libs/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 != t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::ne_op
process	extern_libs/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 < t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::lt_op
process	extern_libs/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 <= t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::lte_op
process	extern_libs/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 == t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::eq_op
process	extern_libs/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 == t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::equal_op
process	extern_libs/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 > t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::gt_op
process	extern_libs/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 >= t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::gte_op
process	extern_libs/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return (details::wc_imatch(t2,t1) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::ilike_op
process	extern_libs/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return (details::wc_match(t2,t1) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::like_op
process	extern_libs/exprtk.h	/^         static inline bool process(parameter_list_t& parameters,$/;"	f	struct:exprtk::rtl::vecops::helper::load_vector_range
process	extern_libs/exprtk.h	/^         static inline expression_node_ptr process(parser<Type>& p, const details::operator_type opt_type, const std::string& sf_name)$/;"	f	struct:exprtk::parser::parse_special_function_impl
process	extern_libs/exprtk.h	/^         static void process(const std::string& scalar_format, parameter_list_t parameters)$/;"	f	struct:exprtk::rtl::io::details::print_impl
process	extern_libs/exprtk.h	/^         virtual bool process(const std::string& \/* unknown_symbol *\/,$/;"	f	struct:exprtk::parser::unknown_symbol_resolver
process	extern_libs/exprtk.h	/^         virtual bool process(const std::string& \/*unknown_symbol*\/,$/;"	f	struct:exprtk::parser::unknown_symbol_resolver
process	extern_libs/exprtk.h	/^         virtual std::size_t process(generator&) { return 0;    }$/;"	f	class:exprtk::lexer::helper_interface
process_1	extern_libs/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_add_op
process_1	extern_libs/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_avg_op
process_1	extern_libs/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mand_op
process_1	extern_libs/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_max_op
process_1	extern_libs/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_min_op
process_1	extern_libs/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mor_op
process_1	extern_libs/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mul_op
process_1	extern_libs/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_2	extern_libs/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_add_op
process_2	extern_libs/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_avg_op
process_2	extern_libs/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mand_op
process_2	extern_libs/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_max_op
process_2	extern_libs/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_min_op
process_2	extern_libs/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mor_op
process_2	extern_libs/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mul_op
process_2	extern_libs/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_3	extern_libs/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_add_op
process_3	extern_libs/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_avg_op
process_3	extern_libs/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mand_op
process_3	extern_libs/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_max_op
process_3	extern_libs/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_min_op
process_3	extern_libs/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mor_op
process_3	extern_libs/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mul_op
process_3	extern_libs/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_4	extern_libs/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_add_op
process_4	extern_libs/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_avg_op
process_4	extern_libs/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mand_op
process_4	extern_libs/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_max_op
process_4	extern_libs/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_min_op
process_4	extern_libs/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mor_op
process_4	extern_libs/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mul_op
process_4	extern_libs/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_5	extern_libs/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_add_op
process_5	extern_libs/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_avg_op
process_5	extern_libs/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mand_op
process_5	extern_libs/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_max_op
process_5	extern_libs/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_min_op
process_5	extern_libs/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mor_op
process_5	extern_libs/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mul_op
process_5	extern_libs/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_6	extern_libs/exprtk.h	/^         static inline T process_6(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_7	extern_libs/exprtk.h	/^         static inline T process_7(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_8	extern_libs/exprtk.h	/^         static inline T process_8(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_impl	extern_libs/exprtk.h	/^            inline T process_impl(const operator_type operation, const T arg)$/;"	f	namespace:exprtk::details::numeric::details
process_impl	extern_libs/exprtk.h	/^            inline T process_impl(const operator_type operation, const T arg0, const T arg1)$/;"	f	namespace:exprtk::details::numeric::details
process_impl	extern_libs/exprtk.h	/^            inline T process_impl(const operator_type operation, const T arg0, const T arg1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
process_lexer_errors	extern_libs/exprtk.h	/^      void process_lexer_errors()$/;"	f	class:exprtk::parser
process_matrix_query	utils/ParaReader.h	/^  process_matrix_query(Parameter<T>& para, $/;"	f	class:CppUtils::ParaBlock
process_mode_t	extern_libs/exprtk.h	/^         typedef ProcessMode process_mode_t;$/;"	t	class:exprtk::details::exprtk_final
process_stride_2	extern_libs/exprtk.h	/^         inline std::size_t process_stride_2(generator& g)$/;"	f	class:exprtk::lexer::token_joiner
process_stride_3	extern_libs/exprtk.h	/^         inline std::size_t process_stride_3(generator& g)$/;"	f	class:exprtk::lexer::token_joiner
process_vector_query	utils/ParaReader.h	/^  process_vector_query(Parameter<T>& para, $/;"	f	class:CppUtils::ParaBlock
product	utils/VecND.h	/^  T product() const $/;"	f	class:CppUtils::VecND
properties	algorithm/Edge.h	/^  const EdgeProperty& properties() const { return properties_; }$/;"	f	class:TQMesh::Edge
properties	algorithm/Vertex.h	/^  const VertexProperty& properties() const { return properties_; }$/;"	f	class:TQMesh::Vertex
properties	tests/tests_Vertex.cpp	/^void properties()$/;"	f	namespace:VertexTests
prsrhlpr_t	extern_libs/exprtk.h	/^      typedef parser_helper prsrhlpr_t;$/;"	t	class:exprtk::parser
ptr_match	extern_libs/exprtk.h	/^         struct ptr_match$/;"	s	struct:exprtk::symbol_table::type_store
ptr_match	extern_libs/exprtk.h	/^         struct ptr_match<TType,TRawType,variable_node_t*>$/;"	s	struct:exprtk::symbol_table::type_store
ptr_t	extern_libs/exprtk.h	/^         typedef Type* ptr_t;$/;"	t	struct:exprtk::parser::scoped_delete
ptr_t	extern_libs/exprtk.h	/^         typedef Type* ptr_t;$/;"	t	struct:exprtk::parser::scoped_deq_delete
ptr_t	extern_libs/exprtk.h	/^         typedef Type* ptr_t;$/;"	t	struct:exprtk::parser::scoped_vec_delete
push_back	utils/Container.h	/^  T& push_back( Args&&... args )$/;"	f	class:CppUtils::Container
qfunc_t	extern_libs/exprtk.h	/^         typedef T (*qfunc_t)(Type t0, Type t1, Type t2, Type t3);$/;"	t	struct:exprtk::details::functor_t
qfunc_t	extern_libs/exprtk.h	/^         typedef typename functor_t::qfunc_t    qfunc_t;$/;"	t	class:exprtk::details::exprtk_final
qtree_	utils/Container.h	/^  QuadTree<T,double> qtree_;$/;"	m	class:CppUtils::Container
quad_layer	tests/tests_Mesh.cpp	/^void quad_layer()$/;"	f	namespace:MeshTests
quad_layer_generation	algorithm/MeshGenerator.h	/^  QuadLayering& quad_layer_generation(Mesh& mesh)$/;"	f	class:TQMesh::MeshGenerator
quad_layer_near_mesh_size	tests/tests_MeshGenerator.cpp	/^void quad_layer_near_mesh_size()$/;"	f	namespace:MeshGeneratorTests
quad_layer_smoothing	algorithm/SmoothingStrategy.h	/^  LaplaceSmoothing& quad_layer_smoothing(bool b) $/;"	f	class:TQMesh::LaplaceSmoothing
quad_layer_smoothing	algorithm/SmoothingStrategy.h	/^  MixedSmoothing& quad_layer_smoothing(bool b) $/;"	f	class:TQMesh::MixedSmoothing
quad_layer_smoothing	algorithm/SmoothingStrategy.h	/^  TorsionSmoothing& quad_layer_smoothing(bool b) $/;"	f	class:TQMesh::TorsionSmoothing
quad_layer_smoothing	algorithm/SmoothingStrategy.h	/^  bool quad_layer_smoothing() const { return quad_layer_smoothing_; }$/;"	f	class:TQMesh::LaplaceSmoothing
quad_layer_smoothing	algorithm/SmoothingStrategy.h	/^  bool quad_layer_smoothing() const { return quad_layer_smoothing_; }$/;"	f	class:TQMesh::MixedSmoothing
quad_layer_smoothing	algorithm/SmoothingStrategy.h	/^  bool quad_layer_smoothing() const { return quad_layer_smoothing_; }$/;"	f	class:TQMesh::TorsionSmoothing
quad_layer_smoothing_	algorithm/SmoothingStrategy.h	/^  bool               quad_layer_smoothing_ = false;$/;"	m	class:TQMesh::SmoothingStrategy
quad_quad_intersection	utils/Geometry.h	/^static inline bool quad_quad_intersection(const Vec2<T>& p1,$/;"	f	namespace:CppUtils
quad_refinement	algorithm/MeshGenerator.h	/^  QuadRefinement& quad_refinement(Mesh& mesh)$/;"	f	class:TQMesh::MeshGenerator
quad_refinement	tests/tests_MeshGenerator.cpp	/^void quad_refinement()$/;"	f	namespace:MeshGeneratorTests
quad_refinements_	app/TQMeshApp.h	/^  size_t                  quad_refinements_;$/;"	m	class:TQMesh::MeshConstruction
quad_tree	utils/Container.h	/^  QuadTree<T,double>& quad_tree() { return qtree_; }$/;"	f	class:CppUtils::Container
quad_tree	utils/Container.h	/^  const QuadTree<T,double>& quad_tree() const { return qtree_; }$/;"	f	class:CppUtils::Container
quad_tree_center	algorithm/Domain.h	/^  void quad_tree_center(const Vec2d& v) { verts_.quad_tree().center(v); }$/;"	f	class:TQMesh::Domain
quad_tree_max_depth	algorithm/Domain.h	/^  void quad_tree_max_depth(size_t v) { verts_.quad_tree().max_depth(v); }$/;"	f	class:TQMesh::Domain
quad_tree_max_item	algorithm/Domain.h	/^  void quad_tree_max_item(size_t v) { verts_.quad_tree().max_item(v); }$/;"	f	class:TQMesh::Domain
quad_tree_scale	algorithm/Domain.h	/^  void quad_tree_scale(double v) { verts_.quad_tree().scale(v); }$/;"	f	class:TQMesh::Domain
quads	algorithm/Mesh.h	/^  Quads& quads() { return quads_; }$/;"	f	class:TQMesh::Mesh
quads	algorithm/Mesh.h	/^  const Quads& quads() const { return quads_; }$/;"	f	class:TQMesh::Mesh
quads_	algorithm/Mesh.h	/^  Quads      quads_;$/;"	m	class:TQMesh::Mesh
quadtree_circ_query_fun	utils/QuadTree.h	/^static inline bool quadtree_circ_query_fun(T* item, $/;"	f	namespace:CppUtils
quadtree_nearest_query_fun	utils/QuadTree.h	/^static inline bool quadtree_nearest_query_fun(T* item, $/;"	f	namespace:CppUtils
quadtree_rect_query_fun	utils/QuadTree.h	/^static inline bool quadtree_rect_query_fun(T* item, $/;"	f	namespace:CppUtils
quality	algorithm/Quad.h	/^  double quality(const double h) const $/;"	f	class:TQMesh::Quad
quality	algorithm/Triangle.h	/^  double quality(const double h) const $/;"	f	class:TQMesh::Triangle
quaternary_functor_t	extern_libs/exprtk.h	/^         typedef typename functor_t::qfunc_t    quaternary_functor_t;$/;"	t	struct:exprtk::details::opr_base
quaternary_functor_t	extern_libs/exprtk.h	/^         typedef typename functor_t::qfunc_t quaternary_functor_t;$/;"	t	struct:exprtk::details::sf_base
quaternary_functor_t	extern_libs/exprtk.h	/^      typedef typename functor_t::qfunc_t    quaternary_functor_t;$/;"	t	class:exprtk::parser
quaternary_node	extern_libs/exprtk.h	/^         quaternary_node(const operator_type& opr,$/;"	f	class:exprtk::details::quaternary_node
quaternary_node	extern_libs/exprtk.h	/^      class quaternary_node : public expression_node<T>$/;"	c	namespace:exprtk::details
quaternary_node_t	extern_libs/exprtk.h	/^      typedef details::quaternary_node<T>                 quaternary_node_t;$/;"	t	class:exprtk::parser
query	utils/ParaReader.h	/^  bool query(const string& name)$/;"	f	class:CppUtils::ParaBlock
query	utils/ParaReader.h	/^  bool query(const string& name, bool use_default_value=false,$/;"	f	class:CppUtils::ParaBlock
query_mandatory_parameters	app/TQMeshApp.h	/^  void query_mandatory_parameters()$/;"	f	class:TQMesh::TQMeshApp
query_mandatory_parameters	app/TQMeshApp.h	/^  void query_mandatory_parameters(ParaReader& mesh_reader)$/;"	f	class:TQMesh::MeshConstruction
query_matrix	utils/ParaReader.h	/^  bool query_matrix(Parameter<T>& para, const strVec& content,$/;"	f	class:CppUtils::ParaBlock
query_scalar	utils/ParaReader.h	/^  bool query_scalar(Parameter<T>& para, const strVec& content)$/;"	f	class:CppUtils::ParaBlock
query_vector	utils/ParaReader.h	/^  bool query_vector(Parameter<T>& para, const strVec& content, $/;"	f	class:CppUtils::ParaBlock
r	extern_libs/exprtk.h	/^      read   <T> r;$/;"	m	struct:exprtk::rtl::io::file::package
r2d_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   r2d_impl(const T v, real_type_tag) { return (v * T(numeric::constant::_180_pi)); }$/;"	f	namespace:exprtk::details::numeric::details
range	extern_libs/exprtk.h	/^         inline range_t range() const$/;"	f	class:exprtk::details::exprtk_final
range	extern_libs/exprtk.h	/^         range_t range() const$/;"	f	class:exprtk::details::exprtk_final
range	extern_libs/exprtk.h	/^         range_t*      range;$/;"	m	struct:exprtk::details::range_data_type
range_	extern_libs/exprtk.h	/^         mutable range_t     range_;$/;"	m	class:exprtk::details::exprtk_final
range_	extern_libs/exprtk.h	/^         mutable range_t     range_;$/;"	m	class:exprtk::details::string_function_node
range_data_type	extern_libs/exprtk.h	/^         range_data_type()$/;"	f	struct:exprtk::details::range_data_type
range_data_type	extern_libs/exprtk.h	/^      struct range_data_type$/;"	s	namespace:exprtk::details
range_data_type_t	extern_libs/exprtk.h	/^         typedef range_data_type<T>  range_data_type_t;$/;"	t	class:exprtk::details::generic_function_node
range_data_type_t	extern_libs/exprtk.h	/^         typedef range_data_type<T> range_data_type_t;$/;"	t	class:exprtk::details::string_base_node
range_factor_	algorithm/QuadLayering.h	/^  double range_factor_ = 1.1;$/;"	m	class:TQMesh::QuadLayering
range_interface	extern_libs/exprtk.h	/^      class range_interface$/;"	c	namespace:exprtk::details
range_interface_t	extern_libs/exprtk.h	/^         typedef range_interface<T>  range_interface_t;$/;"	t	class:exprtk::details::generic_function_node
range_list_	extern_libs/exprtk.h	/^         mutable range_list_t      range_list_;$/;"	m	class:exprtk::details::generic_function_node
range_list_t	extern_libs/exprtk.h	/^         typedef std::vector<range_data_type_t> range_list_t;$/;"	t	class:exprtk::details::generic_function_node
range_pack	extern_libs/exprtk.h	/^         range_pack()$/;"	f	struct:exprtk::details::range_pack
range_pack	extern_libs/exprtk.h	/^      struct range_pack$/;"	s	namespace:exprtk::details
range_ptr	extern_libs/exprtk.h	/^         typedef range_t*              range_ptr;$/;"	t	class:exprtk::details::exprtk_final
range_ptr	extern_libs/exprtk.h	/^         typedef range_t*             range_ptr;$/;"	t	class:exprtk::details::exprtk_final
range_ref	extern_libs/exprtk.h	/^         const range_t& range_ref() const$/;"	f	class:exprtk::details::exprtk_final
range_ref	extern_libs/exprtk.h	/^         range_t& range_ref()$/;"	f	class:exprtk::details::exprtk_final
range_runtime_check	extern_libs/exprtk.h	/^         bool range_runtime_check(const std::size_t r0,$/;"	f	struct:exprtk::details::range_pack
range_t	extern_libs/exprtk.h	/^         typedef range_pack      <T>  range_t;$/;"	t	class:exprtk::details::exprtk_final
range_t	extern_libs/exprtk.h	/^         typedef range_pack<T> range_t;$/;"	t	class:exprtk::details::exprtk_final
range_t	extern_libs/exprtk.h	/^         typedef range_pack<T> range_t;$/;"	t	class:exprtk::details::range_interface
range_t	extern_libs/exprtk.h	/^         typedef range_pack<T> range_t;$/;"	t	struct:exprtk::details::range_data_type
range_t	extern_libs/exprtk.h	/^         typedef typename gen_function_t::range_t         range_t;$/;"	t	class:exprtk::details::multimode_genfunction_node
range_t	extern_libs/exprtk.h	/^         typedef typename range_interface<T>::range_t range_t;$/;"	t	class:exprtk::details::exprtk_final
range_t	extern_libs/exprtk.h	/^         typedef typename range_interface<T>::range_t range_t;$/;"	t	class:exprtk::details::generic_function_node
range_t	extern_libs/exprtk.h	/^         typedef typename range_interface<T>::range_t range_t;$/;"	t	class:exprtk::details::string_function_node
range_t	extern_libs/exprtk.h	/^         typedef typename str_function_t::range_t range_t;$/;"	t	class:exprtk::details::exprtk_final
range_t	extern_libs/exprtk.h	/^      typedef details::range_pack<T>                      range_t;$/;"	t	class:exprtk::parser
rbvec_node_ptr_	extern_libs/exprtk.h	/^         rebasevector_celem_node<T>* rbvec_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
rbvec_node_ptr_	extern_libs/exprtk.h	/^         rebasevector_elem_node<T>* rbvec_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
reached_end	utils/ParaReader.h	/^  bool reached_end() const { return block_index_ >= block_end_; }$/;"	f	class:CppUtils::ParameterBase
read	extern_libs/exprtk.h	/^         bool read(View& view, const std::size_t amount, const std::size_t offset = 0)$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
read	extern_libs/exprtk.h	/^      read()$/;"	f	class:exprtk::rtl::io::file::read
read	extern_libs/exprtk.h	/^   class read : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::io::file
read_content	utils/ParaReader.h	/^  strVec_ptr read_content(const string& file_path)$/;"	f	class:CppUtils::ParaBlock
read_csv_file	algorithm/Boundary.h	/^  void read_csv_file(const std::string& filename)$/;"	f	class:TQMesh::CSVBoundaryReader
read_parameters	tests/tests_ParaReader.cpp	/^void read_parameters()$/;"	f	namespace:ParaReaderTests
reader_	app/TQMeshApp.h	/^  ParaReader                 reader_;$/;"	m	class:TQMesh::TQMeshApp
real_type_tag	extern_libs/exprtk.h	/^            struct real_type_tag    { real_type_tag   () {} };$/;"	f	struct:exprtk::details::numeric::details::real_type_tag
real_type_tag	extern_libs/exprtk.h	/^            struct real_type_tag    { real_type_tag   () {} };$/;"	s	namespace:exprtk::details::numeric::details
rebase	extern_libs/exprtk.h	/^         void rebase(std::string& s)$/;"	f	class:exprtk::details::exprtk_final
rebase	extern_libs/exprtk.h	/^      inline void rebase(data_ptr_t data)$/;"	f	class:exprtk::vector_view
rebase	extern_libs/exprtk.h	/^      void rebase(std::string& s)$/;"	f	class:exprtk::stringvar_base
rebaseable	extern_libs/exprtk.h	/^            virtual inline bool rebaseable() const$/;"	f	class:exprtk::details::vector_holder::vector_holder_base
rebaseable	extern_libs/exprtk.h	/^            virtual inline bool rebaseable() const$/;"	f	class:exprtk::details::vector_holder::vector_view_impl
rebaseable	extern_libs/exprtk.h	/^         bool rebaseable() const$/;"	f	class:exprtk::details::vector_holder
rebasevector_celem_node	extern_libs/exprtk.h	/^         rebasevector_celem_node(const std::size_t index, vector_holder_ptr vec_holder)$/;"	f	class:exprtk::details::exprtk_final
rebasevector_celem_node_t	extern_libs/exprtk.h	/^      typedef details::rebasevector_celem_node<T>         rebasevector_celem_node_t;$/;"	t	class:exprtk::parser
rebasevector_elem_node	extern_libs/exprtk.h	/^         rebasevector_elem_node(expression_ptr index, vector_holder_ptr vec_holder)$/;"	f	class:exprtk::details::exprtk_final
rebasevector_elem_node_t	extern_libs/exprtk.h	/^      typedef details::rebasevector_elem_node<T>          rebasevector_elem_node_t;$/;"	t	class:exprtk::parser
receiver_	algorithm/MeshMerger.h	/^  Mesh*         receiver_;$/;"	m	class:TQMesh::MeshMerger
rect_overlap	utils/Geometry.h	/^inline bool rect_overlap(const Vec2<T>& a_lowleft, $/;"	f	namespace:CppUtils
ref	extern_libs/exprtk.h	/^         const std::string& ref() const$/;"	f	class:exprtk::details::exprtk_final
ref	extern_libs/exprtk.h	/^         inline data_t& ref()$/;"	f	class:exprtk::details::vec_data_store
ref	extern_libs/exprtk.h	/^         inline virtual const std::string& ref() const$/;"	f	class:exprtk::details::exprtk_final
ref	extern_libs/exprtk.h	/^         inline virtual std::string& ref()$/;"	f	class:exprtk::details::exprtk_final
ref	extern_libs/exprtk.h	/^         std::string& ref()$/;"	f	class:exprtk::details::exprtk_final
ref_count	extern_libs/exprtk.h	/^            std::size_t ref_count;$/;"	m	struct:exprtk::details::vec_data_store::control_block
ref_count	extern_libs/exprtk.h	/^         std::size_t  ref_count;$/;"	m	struct:exprtk::parser::scope_element
ref_count	extern_libs/exprtk.h	/^         std::size_t ref_count;$/;"	m	struct:exprtk::expression::control_block
ref_count	extern_libs/exprtk.h	/^         std::size_t ref_count;$/;"	m	struct:exprtk::symbol_table::control_block
refine_boundary_edges	algorithm/RefinementStrategy.h	/^  void refine_boundary_edges()$/;"	f	class:TQMesh::QuadRefinement
refine_edge	algorithm/Front.h	/^  bool refine_edge(const Domain& domain, Vertices& mesh_vertices, $/;"	f	class:TQMesh::Front
refine_front_edges	algorithm/Front.h	/^  int refine_front_edges(const Domain& domain, Vertices& mesh_vertices)$/;"	f	class:TQMesh::Front
refine_interior_edges	algorithm/RefinementStrategy.h	/^  void refine_interior_edges()$/;"	f	class:TQMesh::QuadRefinement
refine_quads	algorithm/RefinementStrategy.h	/^  void refine_quads()$/;"	f	class:TQMesh::QuadRefinement
refine_to_quads	tests/tests_Mesh.cpp	/^void refine_to_quads()$/;"	f	namespace:MeshTests
refine_triangles	algorithm/RefinementStrategy.h	/^  void refine_triangles()$/;"	f	class:TQMesh::QuadRefinement
refinement_algorithm_	algorithm/MeshGenerator.h	/^  RefinementStrategyPtr   refinement_algorithm_;$/;"	m	class:TQMesh::MeshGenerator
register_binary_op	extern_libs/exprtk.h	36829;"	d
register_binary_op	extern_libs/exprtk.h	36850;"	d
register_binary_op	extern_libs/exprtk.h	36857;"	d
register_binary_op	extern_libs/exprtk.h	36878;"	d
register_inserter	extern_libs/exprtk.h	/^            inline bool register_inserter(lexer::token_inserter* inserter)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
register_joiner	extern_libs/exprtk.h	/^            inline bool register_joiner(lexer::token_joiner* joiner)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
register_local_data	extern_libs/exprtk.h	/^      inline void register_local_data(void* data, const std::size_t& size = 0, const std::size_t data_mode = 0)$/;"	f	class:exprtk::expression
register_local_var	extern_libs/exprtk.h	/^      inline void register_local_var(expression_ptr expr)$/;"	f	class:exprtk::expression
register_local_var	extern_libs/exprtk.h	/^      inline void register_local_var(vector_holder_ptr vec_holder)$/;"	f	class:exprtk::expression
register_local_vars	extern_libs/exprtk.h	/^      inline void register_local_vars(expression<T>& e)$/;"	f	class:exprtk::parser
register_loop_runtime_check	extern_libs/exprtk.h	/^      inline void register_loop_runtime_check(loop_runtime_check& lrtchk)$/;"	f	class:exprtk::parser
register_modifier	extern_libs/exprtk.h	/^            inline bool register_modifier(lexer::token_modifier* modifier)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
register_op	extern_libs/exprtk.h	16940;"	d
register_op	extern_libs/exprtk.h	16995;"	d
register_package	extern_libs/exprtk.h	/^      bool register_package(exprtk::symbol_table<T>& symtab)$/;"	f	struct:exprtk::rtl::io::file::package
register_package	extern_libs/exprtk.h	/^      bool register_package(exprtk::symbol_table<T>& symtab)$/;"	f	struct:exprtk::rtl::io::package
register_package	extern_libs/exprtk.h	/^      bool register_package(exprtk::symbol_table<T>& symtab)$/;"	f	struct:exprtk::rtl::vecops::package
register_return_results	extern_libs/exprtk.h	/^      inline void register_return_results(expression<T>& e)$/;"	f	class:exprtk::parser
register_return_results	extern_libs/exprtk.h	/^      inline void register_return_results(results_context_t* rc)$/;"	f	class:exprtk::expression
register_scanner	extern_libs/exprtk.h	/^            inline bool register_scanner(lexer::token_scanner* scanner)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
register_sf3	extern_libs/exprtk.h	36885;"	d
register_sf3	extern_libs/exprtk.h	36896;"	d
register_sf3_extid	extern_libs/exprtk.h	36898;"	d
register_sf3_extid	extern_libs/exprtk.h	36902;"	d
register_sf4	extern_libs/exprtk.h	36909;"	d
register_sf4	extern_libs/exprtk.h	36921;"	d
register_sf4ext	extern_libs/exprtk.h	36923;"	d
register_sf4ext	extern_libs/exprtk.h	36942;"	d
register_symbol_table	extern_libs/exprtk.h	/^      inline void register_symbol_table(symbol_table<T>& st)$/;"	f	class:exprtk::expression
register_synthezier	extern_libs/exprtk.h	27365;"	d
register_unary_op	extern_libs/exprtk.h	36780;"	d
register_unary_op	extern_libs/exprtk.h	36822;"	d
release	extern_libs/exprtk.h	/^         inline void release()$/;"	f	class:exprtk::details::exprtk_final
release	extern_libs/exprtk.h	/^         inline void release()$/;"	f	class:exprtk::details::unary_node
release	extern_libs/exprtk.h	/^      inline expression<T>& release()$/;"	f	class:exprtk::expression
remainder	extern_libs/exprtk.h	/^            int remainder;$/;"	m	struct:exprtk::details::loop_unroll::details
remaining	extern_libs/exprtk.h	/^         inline std::string remaining() const$/;"	f	class:exprtk::lexer::generator
remove	algorithm/EdgeList.h	/^  bool remove(Edge& edge) { return edges_.remove( edge ); }$/;"	f	class:TQMesh::EdgeList
remove	extern_libs/exprtk.h	/^            bool remove(const std::string& target_symbol)$/;"	f	class:exprtk::lexer::helper::symbol_replacer
remove	extern_libs/exprtk.h	/^         inline bool remove(const std::string& symbol_name, const bool delete_node = true)$/;"	f	struct:exprtk::symbol_table::type_store
remove	extern_libs/exprtk.h	/^      inline void remove(const std::string& name, const std::size_t& arg_count)$/;"	f	class:exprtk::function_compositor
remove	utils/Container.h	/^  bool remove(T& item) $/;"	f	class:CppUtils::Container
remove	utils/QuadTree.h	/^  bool remove(T* item)$/;"	f	class:CppUtils::QuadTree
remove_boundary	algorithm/Domain.h	/^  void remove_boundary(size_t pos) $/;"	f	class:TQMesh::Domain
remove_boundary_edge	algorithm/Mesh.h	/^  void remove_boundary_edge(Edge& e)$/;"	f	class:TQMesh::Mesh
remove_edge	algorithm/Vertex.h	/^  void remove_edge(Edge& e) { edges_.remove(&e); }$/;"	f	class:TQMesh::Vertex
remove_facet	algorithm/Vertex.h	/^  void remove_facet(Facet& t) { facets_.remove(&t); }$/;"	f	class:TQMesh::Vertex
remove_fixed_vertex	algorithm/Domain.h	/^  void remove_fixed_vertex(Vertex& v) $/;"	f	class:TQMesh::Domain
remove_from_mesh_if_invalid	algorithm/FrontUpdate.h	/^  bool remove_from_mesh_if_invalid(Triangle& t)$/;"	f	class:TQMesh::FrontUpdate
remove_from_mesh_if_invalid	algorithm/FrontUpdate.h	/^  bool remove_from_mesh_if_invalid(Vertex& v)$/;"	f	class:TQMesh::FrontUpdate
remove_from_mesh_if_invalid	algorithm/FrontUpdate.h	/^  bool remove_from_mesh_if_invalid(Vertex& v, Triangle& t)$/;"	f	class:TQMesh::FrontUpdate
remove_from_mesh_if_invalid	algorithm/FrontUpdate.h	/^  bool remove_from_mesh_if_invalid(Vertex& v, Triangle& t1, Triangle& t2)$/;"	f	class:TQMesh::FrontUpdate
remove_function	extern_libs/exprtk.h	/^      inline bool remove_function(const std::string& function_name)$/;"	f	class:exprtk::symbol_table
remove_interior_edge	algorithm/Mesh.h	/^  void remove_interior_edge(Edge& e)$/;"	f	class:TQMesh::Mesh
remove_invalid_mesh_edges	algorithm/MeshingStrategy.h	/^  void remove_invalid_mesh_edges()$/;"	f	class:TQMesh::MeshingStrategy
remove_last_error	extern_libs/exprtk.h	/^      inline void remove_last_error()$/;"	f	class:exprtk::parser
remove_mesh_and_domain	algorithm/MeshBuilder.h	/^  bool remove_mesh_and_domain(Mesh& mesh)$/;"	f	class:TQMesh::MeshBuilder
remove_old_entities	algorithm/RefinementStrategy.h	/^  void remove_old_entities()$/;"	f	class:TQMesh::QuadRefinement
remove_property	algorithm/Edge.h	/^  void remove_property(EdgeProperty p) { properties_ &= ~p; }$/;"	f	class:TQMesh::Edge
remove_property	algorithm/Vertex.h	/^  void remove_property(VertexProperty p) { properties_ &= ~p; }$/;"	f	class:TQMesh::Vertex
remove_quad	algorithm/Mesh.h	/^  void remove_quad(Quad& q)$/;"	f	class:TQMesh::Mesh
remove_replace_symbol	extern_libs/exprtk.h	/^      inline bool remove_replace_symbol(const std::string& symbol)$/;"	f	class:exprtk::parser
remove_stringvar	extern_libs/exprtk.h	/^      inline bool remove_stringvar(const std::string& string_name)$/;"	f	class:exprtk::symbol_table
remove_triangle	algorithm/Mesh.h	/^  void remove_triangle(Triangle& t)$/;"	f	class:TQMesh::Mesh
remove_vararg_function	extern_libs/exprtk.h	/^      inline bool remove_vararg_function(const std::string& vararg_function_name)$/;"	f	class:exprtk::symbol_table
remove_variable	extern_libs/exprtk.h	/^      inline bool remove_variable(const std::string& variable_name, const bool delete_node = true)$/;"	f	class:exprtk::symbol_table
remove_vector	extern_libs/exprtk.h	/^      inline bool remove_vector(const std::string& vector_name)$/;"	f	class:exprtk::symbol_table
remove_vertex	algorithm/Domain.h	/^  void remove_vertex(Vertex& v) $/;"	f	class:TQMesh::Domain
remove_vertex	algorithm/Mesh.h	/^  void remove_vertex(Vertex& v)$/;"	f	class:TQMesh::Mesh
repeat_until_loop	extern_libs/exprtk.h	/^         inline expression_node_ptr repeat_until_loop(expression_node_ptr& condition,$/;"	f	class:exprtk::parser::expression_generator
repeat_until_loop_bc_node	extern_libs/exprtk.h	/^         repeat_until_loop_bc_node(expression_ptr condition,$/;"	f	class:exprtk::details::repeat_until_loop_bc_node
repeat_until_loop_bc_node	extern_libs/exprtk.h	/^      class repeat_until_loop_bc_node : public repeat_until_loop_node<T>$/;"	c	namespace:exprtk::details
repeat_until_loop_bc_node_t	extern_libs/exprtk.h	/^      typedef details::repeat_until_loop_bc_node<T>       repeat_until_loop_bc_node_t;$/;"	t	class:exprtk::parser
repeat_until_loop_bc_rtc_node	extern_libs/exprtk.h	/^         repeat_until_loop_bc_rtc_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
repeat_until_loop_bc_rtc_node_t	extern_libs/exprtk.h	/^      typedef details::repeat_until_loop_bc_rtc_node<T>   repeat_until_loop_bc_rtc_node_t;$/;"	t	class:exprtk::parser
repeat_until_loop_node	extern_libs/exprtk.h	/^         repeat_until_loop_node(expression_ptr condition,$/;"	f	class:exprtk::details::repeat_until_loop_node
repeat_until_loop_node	extern_libs/exprtk.h	/^      class repeat_until_loop_node : public expression_node<T>$/;"	c	namespace:exprtk::details
repeat_until_loop_node_t	extern_libs/exprtk.h	/^      typedef details::repeat_until_loop_node<T>          repeat_until_loop_node_t;$/;"	t	class:exprtk::parser
repeat_until_loop_rtc_node	extern_libs/exprtk.h	/^         repeat_until_loop_rtc_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
repeat_until_loop_rtc_node_t	extern_libs/exprtk.h	/^      typedef details::repeat_until_loop_rtc_node<T>      repeat_until_loop_rtc_node_t;$/;"	t	class:exprtk::parser
replace_map_	extern_libs/exprtk.h	/^            replace_map_t replace_map_;$/;"	m	class:exprtk::lexer::helper::symbol_replacer
replace_map_t	extern_libs/exprtk.h	/^            typedef std::map<std::string,std::pair<std::string,token::token_type>,details::ilesscompare> replace_map_t;$/;"	t	class:exprtk::lexer::helper::symbol_replacer
replace_symbol	extern_libs/exprtk.h	/^      inline bool replace_symbol(const std::string& old_symbol, const std::string& new_symbol)$/;"	f	class:exprtk::parser
replacer_enabled	extern_libs/exprtk.h	/^         bool replacer_enabled           () const { return enable_replacer_;           }$/;"	f	class:exprtk::parser::settings_store
reserved_symbol_table_	extern_libs/exprtk.h	/^            std::set<std::string>      reserved_symbol_table_;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
reserved_symbols	extern_libs/exprtk.h	/^      static const std::string reserved_symbols[] =$/;"	m	namespace:exprtk::details
reserved_symbols_size	extern_libs/exprtk.h	/^      static const std::size_t reserved_symbols_size = sizeof(reserved_symbols) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
reserved_words	extern_libs/exprtk.h	/^      static const std::string reserved_words[] =$/;"	m	namespace:exprtk::details
reserved_words_size	extern_libs/exprtk.h	/^      static const std::size_t reserved_words_size = sizeof(reserved_words) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
reset	extern_libs/exprtk.h	/^            void reset()$/;"	f	class:exprtk::lexer::helper::bracket_checker
reset	extern_libs/exprtk.h	/^            void reset()$/;"	f	class:exprtk::lexer::helper::numeric_checker
reset	extern_libs/exprtk.h	/^         inline void reset()$/;"	f	struct:exprtk::parser::state_t
reset	extern_libs/exprtk.h	/^         inline void reset(const _uint64_t initial_value = 0) const$/;"	f	struct:exprtk::details::loop_runtime_checker
reset	extern_libs/exprtk.h	/^         virtual void reset()                    {              }$/;"	f	class:exprtk::lexer::helper_interface
reset	extern_libs/exprtk.h	/^         void reset()$/;"	f	struct:exprtk::parser::parser_state
resize	utils/Matrix.h	/^  inline void resize(int r, int c)$/;"	f	class:CppUtils::Matrix
resize	utils/ParaReader.h	/^  void resize() $/;"	f	class:CppUtils::Parameter
resolve_as_vector	extern_libs/exprtk.h	/^            resolve_as_vector()$/;"	f	struct:exprtk::details::collector_helper::resolve_as_vector
resolve_as_vector	extern_libs/exprtk.h	/^         struct resolve_as_vector : public parser_t::unknown_symbol_resolver$/;"	s	struct:exprtk::details::collector_helper
resolve_unknown_symbol_	extern_libs/exprtk.h	/^      bool resolve_unknown_symbol_;$/;"	m	class:exprtk::parser
restore	extern_libs/exprtk.h	/^         inline void restore()$/;"	f	class:exprtk::lexer::generator
restore_token	extern_libs/exprtk.h	/^         inline void restore_token()$/;"	f	class:exprtk::lexer::parser_helper
result	extern_libs/exprtk.h	/^            bool result()$/;"	f	class:exprtk::lexer::helper::bracket_checker
result	extern_libs/exprtk.h	/^            bool result()$/;"	f	class:exprtk::lexer::helper::numeric_checker
result	extern_libs/exprtk.h	/^            bool result()$/;"	f	class:exprtk::lexer::helper::sequence_validator
result	extern_libs/exprtk.h	/^            bool result()$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
result	extern_libs/exprtk.h	/^            static inline T result(T v)$/;"	f	struct:exprtk::details::numeric::fast_exp
result	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 0> { static inline T result(const T  ) { return T(1);      } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 1> { static inline T result(const T v) { return v;         } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 2> { static inline T result(const T v) { return v * v;     } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 3> { static inline T result(const T v) { return v * v * v; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 4> { static inline T result(const T v) { T v_2 = v * v; return v_2 * v_2; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 5> { static inline T result(const T v) { return fast_exp<T,4>::result(v) * v; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 6> { static inline T result(const T v) { T v_3 = fast_exp<T,3>::result(v); return v_3 * v_3; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 7> { static inline T result(const T v) { return fast_exp<T,6>::result(v) * v; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 8> { static inline T result(const T v) { T v_4 = fast_exp<T,4>::result(v); return v_4 * v_4; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T, 9> { static inline T result(const T v) { return fast_exp<T,8>::result(v) * v; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	extern_libs/exprtk.h	/^         template <typename T> struct fast_exp<T,10> { static inline T result(const T v) { T v_5 = fast_exp<T,5>::result(v); return v_5 * v_5; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	extern_libs/exprtk.h	/^         virtual bool result()                   { return true; }$/;"	f	class:exprtk::lexer::helper_interface
result	extern_libs/exprtk.h	/^      const typename expression_node<T>::node_type nodetype_T0oT1<T,T0,T1>::result = expression_node<T>::e_none;$/;"	m	class:exprtk::details::nodetype_T0oT1
result	extern_libs/exprtk.h	/^      const typename expression_node<T>::node_type nodetype_T0oT1oT2<T,T0,T1,T2>::result = expression_node<T>::e_none;$/;"	m	class:exprtk::details::nodetype_T0oT1oT2
result	extern_libs/exprtk.h	/^      const typename expression_node<T>::node_type nodetype_T0oT1oT2oT3<T,T0,T1,T2,T3>::result = expression_node<T>::e_none;$/;"	m	class:exprtk::details::nodetype_T0oT1oT2oT3
result	extern_libs/exprtk.h	/^      struct nodetype_T0oT1 { static const typename expression_node<T>::node_type result; };$/;"	m	struct:exprtk::details::nodetype_T0oT1
result	extern_libs/exprtk.h	/^      struct nodetype_T0oT1oT2 { static const typename expression_node<T>::node_type result; };$/;"	m	struct:exprtk::details::nodetype_T0oT1oT2
result	extern_libs/exprtk.h	/^      struct nodetype_T0oT1oT2oT3 { static const typename expression_node<T>::node_type result; };$/;"	m	struct:exprtk::details::nodetype_T0oT1oT2oT3
result	extern_libs/exprtk.h	/^      struct param_to_str { static std::string result() { static const std::string r("v"); return r; } };$/;"	f	struct:exprtk::details::param_to_str
result	extern_libs/exprtk.h	/^      struct param_to_str<0> { static std::string result() { static const std::string r("c"); return r; } };$/;"	f	struct:exprtk::details::param_to_str
result	extern_libs/exprtk.h	/^      template <typename T> struct is_const                { enum {result = 0}; };$/;"	e	enum:exprtk::details::is_const::__anon7
result	extern_libs/exprtk.h	/^      template <typename T> struct is_const <const T>      { enum {result = 1}; };$/;"	e	enum:exprtk::details::is_const::__anon8
result	extern_libs/exprtk.h	/^      template <typename T> struct is_const_ref            { enum {result = 0}; };$/;"	e	enum:exprtk::details::is_const_ref::__anon9
result	extern_libs/exprtk.h	/^      template <typename T> struct is_const_ref <const T&> { enum {result = 1}; };$/;"	e	enum:exprtk::details::is_const_ref::__anon10
result	extern_libs/exprtk.h	/^      template <typename T> struct is_ref                  { enum {result = 0}; };$/;"	e	enum:exprtk::details::is_ref::__anon11
result	extern_libs/exprtk.h	/^      template <typename T> struct is_ref<T&>              { enum {result = 1}; };$/;"	e	enum:exprtk::details::is_ref::__anon12
result	extern_libs/exprtk.h	/^      template <typename T> struct is_ref<const T&>        { enum {result = 0}; };$/;"	e	enum:exprtk::details::is_ref::__anon13
results	extern_libs/exprtk.h	/^         results_context_t* results;$/;"	m	struct:exprtk::expression::control_block
results	extern_libs/exprtk.h	/^      inline const results_context_t& results() const$/;"	f	class:exprtk::expression
results_available_	extern_libs/exprtk.h	/^      bool results_available_;$/;"	m	class:exprtk::results_context
results_context	extern_libs/exprtk.h	/^      results_context()$/;"	f	class:exprtk::results_context
results_context	extern_libs/exprtk.h	/^   class results_context$/;"	c	namespace:exprtk
results_context_	extern_libs/exprtk.h	/^         results_context_t* results_context_;$/;"	m	class:exprtk::details::exprtk_final
results_context_	extern_libs/exprtk.h	/^      results_context_t* results_context_;$/;"	m	class:exprtk::parser
results_context_t	extern_libs/exprtk.h	/^         typedef results_context<T>     results_context_t;$/;"	t	struct:exprtk::expression::control_block
results_context_t	extern_libs/exprtk.h	/^         typedef results_context<T>   results_context_t;$/;"	t	class:exprtk::details::exprtk_final
results_context_t	extern_libs/exprtk.h	/^         typedef results_context<T>  results_context_t;$/;"	t	class:exprtk::details::exprtk_final
results_context_t	extern_libs/exprtk.h	/^      typedef results_context<T> results_context_t;$/;"	t	class:exprtk::expression
results_context_t	extern_libs/exprtk.h	/^      typedef results_context<T> results_context_t;$/;"	t	class:exprtk::parser
results_ctx	extern_libs/exprtk.h	/^      inline results_context_t& results_ctx()$/;"	f	class:exprtk::parser
ret_string_	extern_libs/exprtk.h	/^         mutable std::string ret_string_;$/;"	m	class:exprtk::details::string_function_node
retinv_null	extern_libs/exprtk.h	/^         bool  retinv_null;$/;"	m	struct:exprtk::expression::control_block
retinvk_ptr	extern_libs/exprtk.h	/^         inline bool* retinvk_ptr()$/;"	f	class:exprtk::details::exprtk_final
retparam_list_	extern_libs/exprtk.h	/^         retparam_list_t retparam_list_;$/;"	m	class:exprtk::parser::dependent_entity_collector
retparam_list_t	extern_libs/exprtk.h	/^         typedef std::vector<std::string> retparam_list_t;$/;"	t	class:exprtk::parser::dependent_entity_collector
return_	extern_libs/exprtk.h	/^         branch_t return_;$/;"	m	class:exprtk::details::exprtk_final
return_call	extern_libs/exprtk.h	/^         inline expression_node_ptr return_call(std::vector<expression_node_ptr>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
return_call	extern_libs/exprtk.h	/^         inline expression_node_ptr return_call(std::vector<expression_node_ptr>&)$/;"	f	class:exprtk::parser::expression_generator
return_cleanup	extern_libs/exprtk.h	/^      inline void return_cleanup()$/;"	f	class:exprtk::parser
return_envelope	extern_libs/exprtk.h	/^         inline expression_node_ptr return_envelope(expression_node_ptr body,$/;"	f	class:exprtk::parser::expression_generator
return_envelope	extern_libs/exprtk.h	/^         inline expression_node_ptr return_envelope(expression_node_ptr,$/;"	f	class:exprtk::parser::expression_generator
return_envelope_node	extern_libs/exprtk.h	/^         return_envelope_node(expression_ptr body, results_context_t& rc)$/;"	f	class:exprtk::details::exprtk_final
return_exception	extern_libs/exprtk.h	/^      class return_exception$/;"	c	namespace:exprtk::details
return_invoked	extern_libs/exprtk.h	/^         bool* return_invoked;$/;"	m	struct:exprtk::expression::control_block
return_invoked	extern_libs/exprtk.h	/^      inline bool return_invoked() const$/;"	f	class:exprtk::expression
return_invoked_	extern_libs/exprtk.h	/^         mutable bool        return_invoked_;$/;"	m	class:exprtk::details::exprtk_final
return_node	extern_libs/exprtk.h	/^         return_node(const std::vector<typename gen_function_t::expression_ptr>& arg_list,$/;"	f	class:exprtk::details::exprtk_final
return_param_type_list	extern_libs/exprtk.h	/^         retparam_list_t return_param_type_list() const$/;"	f	class:exprtk::parser::dependent_entity_collector
return_present	extern_libs/exprtk.h	/^         bool return_present() const$/;"	f	class:exprtk::parser::dependent_entity_collector
return_present_	extern_libs/exprtk.h	/^         bool return_present_;$/;"	m	class:exprtk::parser::dependent_entity_collector
return_stmt_present	extern_libs/exprtk.h	/^         bool return_stmt_present;$/;"	m	struct:exprtk::parser::parser_state
return_type	extern_libs/exprtk.h	/^      enum return_type$/;"	g	class:exprtk::igeneric_function
return_value	extern_libs/exprtk.h	/^      static T return_value(expression_t& e)$/;"	f	class:exprtk::function_compositor
right	extern_libs/exprtk.h	/^         precedence_level right;$/;"	m	struct:exprtk::parser::state_t
rl	extern_libs/exprtk.h	/^      rol        <T> rl;$/;"	m	struct:exprtk::rtl::vecops::package
rol	extern_libs/exprtk.h	/^      rol()$/;"	f	class:exprtk::rtl::vecops::rol
rol	extern_libs/exprtk.h	/^   class rol : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
root	extern_libs/exprtk.h	/^         inline T root(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
root_impl	extern_libs/exprtk.h	/^            inline T root_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
root_impl	extern_libs/exprtk.h	/^            inline T root_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
ror	extern_libs/exprtk.h	/^      ror()$/;"	f	class:exprtk::rtl::vecops::ror
ror	extern_libs/exprtk.h	/^   class ror : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
round_impl	extern_libs/exprtk.h	/^            inline T round_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
round_impl	extern_libs/exprtk.h	/^            template <typename T> inline T round_impl(const T v, int_type_tag) { return v;             }$/;"	f	namespace:exprtk::details::numeric::details
roundn	extern_libs/exprtk.h	/^         inline T roundn(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
roundn_impl	extern_libs/exprtk.h	/^            inline T roundn_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
roundn_impl	extern_libs/exprtk.h	/^            inline T roundn_impl(const T v0, const T, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
rows	utils/Matrix.h	/^  inline int rows() const { return rows_; }$/;"	f	class:CppUtils::Matrix
rows	utils/Matrix.h	/^  inline int rows() { return rows_; }$/;"	f	class:CppUtils::Matrix
rows	utils/ParaReader.h	/^  size_t rows() const { return nrow_; }$/;"	f	class:CppUtils::Parameter
rp0_	extern_libs/exprtk.h	/^         RangePack rp0_;$/;"	m	class:exprtk::details::exprtk_final
rp1_	extern_libs/exprtk.h	/^         RangePack rp1_;$/;"	m	class:exprtk::details::exprtk_final
rp_	extern_libs/exprtk.h	/^         mutable range_t rp_;$/;"	m	class:exprtk::details::exprtk_final
rp_	extern_libs/exprtk.h	/^         range_t      rp_;$/;"	m	class:exprtk::details::exprtk_final
rp_	extern_libs/exprtk.h	/^         range_t rp_;$/;"	m	class:exprtk::details::exprtk_final
rr	extern_libs/exprtk.h	/^      ror        <T> rr;$/;"	m	struct:exprtk::rtl::vecops::package
rsrvd_sym_usr_disabled	extern_libs/exprtk.h	/^         bool rsrvd_sym_usr_disabled     () const { return disable_rsrvd_sym_usr_;     }$/;"	f	class:exprtk::parser::settings_store
rtl	extern_libs/exprtk.h	/^   namespace rtl { namespace io { namespace details$/;"	n	namespace:exprtk
rtl	extern_libs/exprtk.h	/^   namespace rtl { namespace io { namespace file { namespace details$/;"	n	namespace:exprtk
rtl	extern_libs/exprtk.h	/^   namespace rtl { namespace vecops {$/;"	n	namespace:exprtk
rtrn_type	extern_libs/exprtk.h	/^      return_type rtrn_type;$/;"	m	class:exprtk::igeneric_function
run	app/TQMeshApp.h	/^  bool run()$/;"	f	class:TQMesh::TQMeshApp
run_assemblies	extern_libs/exprtk.h	/^      inline bool run_assemblies()$/;"	f	class:exprtk::parser
run_examples	examples/run_examples.cpp	/^int run_examples(const std::string& example)$/;"	f
run_inserters	extern_libs/exprtk.h	/^            inline bool run_inserters(lexer::generator& g)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
run_joiners	extern_libs/exprtk.h	/^            inline bool run_joiners(lexer::generator& g)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
run_modifiers	extern_libs/exprtk.h	/^            inline bool run_modifiers(lexer::generator& g)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
run_scanners	extern_libs/exprtk.h	/^            inline bool run_scanners(lexer::generator& g)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
run_tests	tests/tests.cpp	/^int run_tests(const std::string& test_case)$/;"	f
run_tests_Boundary	tests/tests_Boundary.cpp	/^void run_tests_Boundary()$/;"	f
run_tests_EdgeList	tests/tests_EdgeList.cpp	/^void run_tests_EdgeList()$/;"	f
run_tests_Front	tests/tests_Front.cpp	/^void run_tests_Front()$/;"	f
run_tests_Mesh	tests/tests_Mesh.cpp	/^void run_tests_Mesh()$/;"	f
run_tests_MeshChecker	tests/tests_MeshChecker.cpp	/^void run_tests_MeshChecker()$/;"	f
run_tests_MeshCleanup	tests/tests_MeshCleanup.cpp	/^void run_tests_MeshCleanup()$/;"	f
run_tests_MeshGenerator	tests/tests_MeshGenerator.cpp	/^void run_tests_MeshGenerator()$/;"	f
run_tests_ParaReader	tests/tests_ParaReader.cpp	/^void run_tests_ParaReader()$/;"	f
run_tests_Quad	tests/tests_Quad.cpp	/^void run_tests_Quad()$/;"	f
run_tests_SizeFunction	tests/tests_SizeFunction.cpp	/^void run_tests_SizeFunction()$/;"	f
run_tests_SmoothingStrategy	tests/tests_SmoothingStrategy.cpp	/^void run_tests_SmoothingStrategy()$/;"	f
run_tests_Triangle	tests/tests_Triangle.cpp	/^void run_tests_Triangle()$/;"	f
run_tests_Vertex	tests/tests_Vertex.cpp	/^void run_tests_Vertex()$/;"	f
s0	extern_libs/exprtk.h	/^         inline std::string& s0()$/;"	f	class:exprtk::details::exprtk_final
s0_	extern_libs/exprtk.h	/^         SType0    s0_;$/;"	m	class:exprtk::details::exprtk_final
s0_	extern_libs/exprtk.h	/^         SType0 s0_;$/;"	m	class:exprtk::details::exprtk_final
s1	extern_libs/exprtk.h	/^         inline std::string& s1()$/;"	f	class:exprtk::details::exprtk_final
s1_	extern_libs/exprtk.h	/^         SType1    s1_;$/;"	m	class:exprtk::details::exprtk_final
s1_	extern_libs/exprtk.h	/^         SType1 s1_;$/;"	m	class:exprtk::details::exprtk_final
s2	extern_libs/exprtk.h	/^         inline std::string& s2()$/;"	f	class:exprtk::details::exprtk_final
s2_	extern_libs/exprtk.h	/^         SType2 s2_;$/;"	m	class:exprtk::details::exprtk_final
s_end_	extern_libs/exprtk.h	/^         details::char_cptr s_end_;$/;"	m	class:exprtk::lexer::generator
s_itr_	extern_libs/exprtk.h	/^         details::char_cptr s_itr_;$/;"	m	class:exprtk::lexer::generator
scalar	utils/ParaReader.h	/^{ scalar, vector, matrix, block };$/;"	m	class:CppUtils::ParaType
scalar_format_	extern_libs/exprtk.h	/^      std::string scalar_format_;$/;"	m	struct:exprtk::rtl::io::print
scalar_format_	extern_libs/exprtk.h	/^      std::string scalar_format_;$/;"	m	struct:exprtk::rtl::io::println
scalar_t	extern_libs/exprtk.h	/^         typedef typename generic_type::scalar_view    scalar_t;$/;"	t	struct:exprtk::rtl::vecops::helper::load_vector_range
scalar_t	extern_libs/exprtk.h	/^         typedef typename generic_type::scalar_view scalar_t;$/;"	t	struct:exprtk::rtl::io::details::print_impl
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::io::file::getline
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::io::file::read
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::io::file::write
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::axpby
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::axpbyz
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::axpbz
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::axpy
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::axpyz
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::copy
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::dot
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::dotk
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::iota
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::nthelement
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::rol
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::ror
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::shift_left
scalar_t	extern_libs/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::shift_right
scalar_view	extern_libs/exprtk.h	/^         explicit scalar_view(const type_store_t& ts)$/;"	f	struct:exprtk::type_store::scalar_view
scalar_view	extern_libs/exprtk.h	/^         explicit scalar_view(type_store_t& ts)$/;"	f	struct:exprtk::type_store::scalar_view
scalar_view	extern_libs/exprtk.h	/^      struct scalar_view$/;"	s	struct:exprtk::type_store
scale	utils/QuadTree.h	/^  V scale() const { return scale_; }$/;"	f	class:CppUtils::QuadTree
scale	utils/QuadTree.h	/^  void scale(double v)  $/;"	f	class:CppUtils::QuadTree
scan_number	extern_libs/exprtk.h	/^         inline void scan_number()$/;"	f	class:exprtk::lexer::generator
scan_operator	extern_libs/exprtk.h	/^         inline void scan_operator()$/;"	f	class:exprtk::lexer::generator
scan_special_function	extern_libs/exprtk.h	/^         inline void scan_special_function()$/;"	f	class:exprtk::lexer::generator
scan_string	extern_libs/exprtk.h	/^         inline void scan_string()$/;"	f	class:exprtk::lexer::generator
scan_symbol	extern_libs/exprtk.h	/^         inline void scan_symbol()$/;"	f	class:exprtk::lexer::generator
scan_token	extern_libs/exprtk.h	/^         inline void scan_token()$/;"	f	class:exprtk::lexer::generator
scand_node	extern_libs/exprtk.h	/^         scand_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
scand_node_t	extern_libs/exprtk.h	/^      typedef details::scand_node<T>                      scand_node_t;$/;"	t	class:exprtk::parser
scope_depth	extern_libs/exprtk.h	/^         std::size_t scope_depth;$/;"	m	struct:exprtk::parser::parser_state
scope_element	extern_libs/exprtk.h	/^         scope_element()$/;"	f	struct:exprtk::parser::scope_element
scope_element	extern_libs/exprtk.h	/^      struct scope_element$/;"	s	class:exprtk::parser
scope_element_manager	extern_libs/exprtk.h	/^         explicit scope_element_manager(parser<T>& p)$/;"	f	class:exprtk::parser::scope_element_manager
scope_element_manager	extern_libs/exprtk.h	/^      class scope_element_manager$/;"	c	class:exprtk::parser
scope_handler	extern_libs/exprtk.h	/^         explicit scope_handler(parser<T>& p)$/;"	f	class:exprtk::parser::scope_handler
scope_handler	extern_libs/exprtk.h	/^      class scope_handler$/;"	c	class:exprtk::parser
scoped_bft	extern_libs/exprtk.h	/^         explicit scoped_bft(BaseFuncType& bft)$/;"	f	struct:exprtk::function_compositor::scoped_bft
scoped_bft	extern_libs/exprtk.h	/^      struct scoped_bft$/;"	s	class:exprtk::function_compositor
scoped_bool_negator	extern_libs/exprtk.h	/^         explicit scoped_bool_negator(bool& bb)$/;"	f	struct:exprtk::parser::scoped_bool_negator
scoped_bool_negator	extern_libs/exprtk.h	/^      struct scoped_bool_negator$/;"	s	class:exprtk::parser
scoped_bool_or_restorer	extern_libs/exprtk.h	/^         explicit scoped_bool_or_restorer(bool& bb)$/;"	f	struct:exprtk::parser::scoped_bool_or_restorer
scoped_bool_or_restorer	extern_libs/exprtk.h	/^      struct scoped_bool_or_restorer$/;"	s	class:exprtk::parser
scoped_delete	extern_libs/exprtk.h	/^         scoped_delete(parser<T>& pr, ptr_t (&p)[N])$/;"	f	struct:exprtk::parser::scoped_delete
scoped_delete	extern_libs/exprtk.h	/^         scoped_delete(parser<T>& pr, ptr_t& p)$/;"	f	struct:exprtk::parser::scoped_delete
scoped_delete	extern_libs/exprtk.h	/^      struct scoped_delete$/;"	s	class:exprtk::parser
scoped_deq_delete	extern_libs/exprtk.h	/^         scoped_deq_delete(parser<T>& pr, std::deque<ptr_t>& deq)$/;"	f	struct:exprtk::parser::scoped_deq_delete
scoped_deq_delete	extern_libs/exprtk.h	/^      struct scoped_deq_delete$/;"	s	class:exprtk::parser
scoped_expression_delete	extern_libs/exprtk.h	/^         scoped_expression_delete(parser<T>& pr, expression_node_ptr& expression)$/;"	f	struct:exprtk::parser::scoped_expression_delete
scoped_expression_delete	extern_libs/exprtk.h	/^      struct scoped_expression_delete$/;"	s	class:exprtk::parser
scoped_inc_dec	extern_libs/exprtk.h	/^         explicit scoped_inc_dec(std::size_t& v)$/;"	f	struct:exprtk::parser::scoped_inc_dec
scoped_inc_dec	extern_libs/exprtk.h	/^      struct scoped_inc_dec$/;"	s	class:exprtk::parser
scoped_vec_delete	extern_libs/exprtk.h	/^         scoped_vec_delete(parser<T>& pr, std::vector<ptr_t>& vec)$/;"	f	struct:exprtk::parser::scoped_vec_delete
scoped_vec_delete	extern_libs/exprtk.h	/^      struct scoped_vec_delete$/;"	s	class:exprtk::parser
scor_node	extern_libs/exprtk.h	/^         scor_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
scor_node_t	extern_libs/exprtk.h	/^      typedef details::scor_node<T>                       scor_node_t;$/;"	t	class:exprtk::parser
sec_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   sec_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
sec_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   sec_impl(const T v, real_type_tag) { return T(1) \/ std::cos(v); }$/;"	f	namespace:exprtk::details::numeric::details
second_derivative	extern_libs/exprtk.h	/^   inline T second_derivative(const expression<T>& e,$/;"	f	namespace:exprtk
segment_overlap	utils/Geometry.h	/^inline bool segment_overlap(const Vec2<T>& v1, const Vec2<T> w1,$/;"	f	namespace:CppUtils
sem_	extern_libs/exprtk.h	/^      scope_element_manager sem_;$/;"	m	class:exprtk::parser
sequence_	extern_libs/exprtk.h	/^            sequence_t& sequence_;$/;"	m	class:exprtk::details::vector_holder::sequence_vector_impl
sequence_check_enabled	extern_libs/exprtk.h	/^         bool sequence_check_enabled     () const { return enable_sequence_check_;     }$/;"	f	class:exprtk::parser::settings_store
sequence_match	extern_libs/exprtk.h	/^      inline bool sequence_match(const std::string& pattern,$/;"	f	namespace:exprtk::details
sequence_t	extern_libs/exprtk.h	/^            typedef Sequence<Type,Allocator> sequence_t;$/;"	t	class:exprtk::details::vector_holder::sequence_vector_impl
sequence_validator	extern_libs/exprtk.h	/^            sequence_validator()$/;"	f	class:exprtk::lexer::helper::sequence_validator
sequence_validator	extern_libs/exprtk.h	/^         class sequence_validator : public lexer::token_scanner$/;"	c	namespace:exprtk::lexer::helper
sequence_validator_	extern_libs/exprtk.h	/^      lexer::helper::sequence_validator         sequence_validator_;$/;"	m	class:exprtk::parser
sequence_validator_3tkns_	extern_libs/exprtk.h	/^      lexer::helper::sequence_validator_3tokens sequence_validator_3tkns_;$/;"	m	class:exprtk::parser
sequence_validator_3tokens	extern_libs/exprtk.h	/^            sequence_validator_3tokens()$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
sequence_validator_3tokens	extern_libs/exprtk.h	/^         class sequence_validator_3tokens : public lexer::token_scanner$/;"	c	namespace:exprtk::lexer::helper
sequence_vector_impl	extern_libs/exprtk.h	/^            sequence_vector_impl(sequence_t& seq)$/;"	f	class:exprtk::details::vector_holder::sequence_vector_impl
sequence_vector_impl	extern_libs/exprtk.h	/^         class sequence_vector_impl : public vector_holder_base$/;"	c	class:exprtk::details::vector_holder
set	extern_libs/exprtk.h	/^         inline void set(const precedence_level& l,$/;"	f	struct:exprtk::parser::state_t
set_algorithm	algorithm/MeshGenerator.h	/^  bool set_algorithm(Mesh& mesh, MeshingAlgorithm algorithm_type)$/;"	f	class:TQMesh::MeshGenerator
set_algorithm	algorithm/MeshGenerator.h	/^  bool set_algorithm(Mesh& mesh, ModificationAlgorithm algorithm_type)$/;"	f	class:TQMesh::MeshGenerator
set_algorithm	algorithm/MeshGenerator.h	/^  bool set_algorithm(Mesh& mesh, RefinementAlgorithm algorithm_type)$/;"	f	class:TQMesh::MeshGenerator
set_algorithm	algorithm/MeshGenerator.h	/^  bool set_algorithm(Mesh& mesh, SmoothingAlgorithm algorithm_type)$/;"	f	class:TQMesh::MeshGenerator
set_allocator	extern_libs/exprtk.h	/^         inline void set_allocator(details::node_allocator& na)$/;"	f	class:exprtk::parser::expression_generator
set_base_first	algorithm/Front.h	/^  Edge* set_base_first()$/;"	f	class:TQMesh::Front
set_base_next	algorithm/Front.h	/^  Edge* set_base_next()$/;"	f	class:TQMesh::Front
set_bom	extern_libs/exprtk.h	/^         inline void set_bom(binary_op_map_t& binary_op_map)$/;"	f	class:exprtk::parser::expression_generator
set_content	utils/ParaReader.h	/^  void set_content(strVec_ptr c) { content_ = c; }$/;"	f	class:CppUtils::ParaBlock
set_debug_header	utils/Log.h	/^  void set_debug_header(const std::string& msg) { debug_header_ = msg; }$/;"	f	class:CppUtils::LogProperties
set_debug_ostream	utils/Log.h	/^  void set_debug_ostream(OStreamType type, const std::string& f="")$/;"	f	class:CppUtils::LogProperties
set_error	extern_libs/exprtk.h	/^         inline token& set_error(const token_type et,$/;"	f	struct:exprtk::lexer::token
set_error	extern_libs/exprtk.h	/^      inline void set_error(const parser_error::type& error_type)$/;"	f	class:exprtk::parser
set_error_header	utils/Log.h	/^  void set_error_header(const std::string& msg) { error_header_ = msg; }$/;"	f	class:CppUtils::LogProperties
set_error_ostream	utils/Log.h	/^  void set_error_ostream(OStreamType type, const std::string& f="")$/;"	f	class:CppUtils::LogProperties
set_expression	extern_libs/exprtk.h	/^      inline void set_expression(const expression_ptr expr)$/;"	f	class:exprtk::expression
set_ibom	extern_libs/exprtk.h	/^         inline void set_ibom(inv_binary_op_map_t& inv_binary_op_map)$/;"	f	class:exprtk::parser::expression_generator
set_info_header	utils/Log.h	/^  void set_info_header(const std::string& msg) { info_header_ = msg; }$/;"	f	class:CppUtils::LogProperties
set_info_ostream	utils/Log.h	/^  void set_info_ostream(OStreamType type, const std::string& f="")$/;"	f	class:CppUtils::LogProperties
set_level	utils/Log.h	/^  void set_level(LogLevel level) { level_ = level; }$/;"	f	class:CppUtils::LogProperties
set_max_node_depth	extern_libs/exprtk.h	/^         void set_max_node_depth(const std::size_t max_node_depth)$/;"	f	class:exprtk::parser::settings_store
set_max_num_args	extern_libs/exprtk.h	/^   void set_max_num_args(FunctionType& func, const std::size_t& num_args)$/;"	f	namespace:exprtk
set_max_stack_depth	extern_libs/exprtk.h	/^         void set_max_stack_depth(const std::size_t max_stack_depth)$/;"	f	class:exprtk::parser::settings_store
set_min_num_args	extern_libs/exprtk.h	/^   void set_min_num_args(FunctionType& func, const std::size_t& num_args)$/;"	f	namespace:exprtk
set_numeric	extern_libs/exprtk.h	/^         inline token& set_numeric(const Iterator begin, const Iterator end, const Iterator base_begin = Iterator(0))$/;"	f	struct:exprtk::lexer::token
set_operator	extern_libs/exprtk.h	/^         inline token& set_operator(const token_type tt,$/;"	f	struct:exprtk::lexer::token
set_parser	extern_libs/exprtk.h	/^         inline void set_parser(parser_t& p)$/;"	f	class:exprtk::parser::expression_generator
set_property	algorithm/Edge.h	/^  void set_property(EdgeProperty p) { properties_ = p; }$/;"	f	class:TQMesh::Edge
set_property	algorithm/Vertex.h	/^  void set_property(VertexProperty p) { properties_ = p; }$/;"	f	class:TQMesh::Vertex
set_ref	extern_libs/exprtk.h	/^            virtual void set_ref(value_ptr*) {}$/;"	f	class:exprtk::details::vector_holder::vector_holder_base
set_ref	extern_libs/exprtk.h	/^            void set_ref(value_ptr* ref)$/;"	f	class:exprtk::details::vector_holder::vector_view_impl
set_ref	extern_libs/exprtk.h	/^         void set_ref(value_ptr* ref)$/;"	f	class:exprtk::details::vector_holder
set_ref	extern_libs/exprtk.h	/^      void set_ref(data_ptr_t* data_ref)$/;"	f	class:exprtk::vector_view
set_retinvk	extern_libs/exprtk.h	/^      inline void set_retinvk(bool* retinvk_ptr)$/;"	f	class:exprtk::expression
set_sf3m	extern_libs/exprtk.h	/^         inline void set_sf3m(sf3_map_t& sf3_map)$/;"	f	class:exprtk::parser::expression_generator
set_sf4m	extern_libs/exprtk.h	/^         inline void set_sf4m(sf4_map_t& sf4_map)$/;"	f	class:exprtk::parser::expression_generator
set_shape_circle	algorithm/Boundary.h	/^  void set_shape_circle(int color,$/;"	f	class:TQMesh::Boundary
set_shape_from_coordinates	algorithm/Boundary.h	/^  void set_shape_from_coordinates(const std::vector<Vec2d>& v_coords,$/;"	f	class:TQMesh::Boundary
set_shape_from_csv	algorithm/Boundary.h	/^  void set_shape_from_csv(const std::string& filename)$/;"	f	class:TQMesh::Boundary
set_shape_rectangle	algorithm/Boundary.h	/^  void set_shape_rectangle(int color,$/;"	f	class:TQMesh::Boundary
set_shape_square	algorithm/Boundary.h	/^  void set_shape_square(int color, $/;"	f	class:TQMesh::Boundary
set_shape_triangle	algorithm/Boundary.h	/^  void set_shape_triangle(int color,$/;"	f	class:TQMesh::Boundary
set_strength_reduction_state	extern_libs/exprtk.h	/^         inline void set_strength_reduction_state(const bool enabled)$/;"	f	class:exprtk::parser::expression_generator
set_string	extern_libs/exprtk.h	/^         inline token& set_string(const Iterator begin, const Iterator end, const Iterator base_begin = Iterator(0))$/;"	f	struct:exprtk::lexer::token
set_string	extern_libs/exprtk.h	/^         inline token& set_string(const std::string& s, const std::size_t p)$/;"	f	struct:exprtk::lexer::token
set_symbol	extern_libs/exprtk.h	/^         inline token& set_symbol(const Iterator begin, const Iterator end, const Iterator base_begin = Iterator(0))$/;"	f	struct:exprtk::lexer::token
set_synthesis_error	extern_libs/exprtk.h	/^      inline void set_synthesis_error(const std::string& synthesis_error_message)$/;"	f	class:exprtk::parser
set_t	extern_libs/exprtk.h	/^            typedef std::set<token_pair_t> set_t;$/;"	t	class:exprtk::lexer::helper::sequence_validator
set_t	extern_libs/exprtk.h	/^            typedef std::set<token_triplet_t> set_t;$/;"	t	class:exprtk::lexer::helper::sequence_validator_3tokens
set_uom	extern_libs/exprtk.h	/^         inline void set_uom(unary_op_map_t& unary_op_map)$/;"	f	class:exprtk::parser::expression_generator
set_value	utils/ParaReader.h	/^  void set_value(size_t i, T val) $/;"	f	class:CppUtils::Parameter
set_value	utils/ParaReader.h	/^  void set_value(size_t i, size_t j, T val) $/;"	f	class:CppUtils::Parameter
set_vertex_coordinates	algorithm/MeshCleanup.h	/^  static inline void set_vertex_coordinates(Vertex& v, const Vec2d& xy)$/;"	f	class:TQMesh::MeshCleanup
set_warn_header	utils/Log.h	/^  void set_warn_header(const std::string& msg) { warn_header_ = msg; }$/;"	f	class:CppUtils::LogProperties
set_warn_ostream	utils/Log.h	/^  void set_warn_ostream(OStreamType type, const std::string& f="")$/;"	f	class:CppUtils::LogProperties
settings	extern_libs/exprtk.h	/^      inline settings_store& settings()$/;"	f	class:exprtk::parser
settings_	extern_libs/exprtk.h	/^      settings_store settings_;$/;"	m	class:exprtk::parser
settings_arithmetic_opr	extern_libs/exprtk.h	/^         enum settings_arithmetic_opr$/;"	g	class:exprtk::parser::settings_store
settings_assignment_opr	extern_libs/exprtk.h	/^         enum settings_assignment_opr$/;"	g	class:exprtk::parser::settings_store
settings_base_funcs	extern_libs/exprtk.h	/^         enum settings_base_funcs$/;"	g	class:exprtk::parser::settings_store
settings_compilation_options	extern_libs/exprtk.h	/^         enum settings_compilation_options$/;"	g	class:exprtk::parser::settings_store
settings_control_structs	extern_libs/exprtk.h	/^         enum settings_control_structs$/;"	g	class:exprtk::parser::settings_store
settings_inequality_opr	extern_libs/exprtk.h	/^         enum settings_inequality_opr$/;"	g	class:exprtk::parser::settings_store
settings_logic_opr	extern_libs/exprtk.h	/^         enum settings_logic_opr$/;"	g	class:exprtk::parser::settings_store
settings_store	extern_libs/exprtk.h	/^         settings_store(const std::size_t compile_options = compile_all_opts)$/;"	f	class:exprtk::parser::settings_store
settings_store	extern_libs/exprtk.h	/^      class settings_store$/;"	c	class:exprtk::parser
settings_t	extern_libs/exprtk.h	/^      typedef settings_store settings_t;$/;"	t	class:exprtk::parser
settings_t	extern_libs/exprtk.h	/^      typedef typename parser_t::settings_store settings_t;$/;"	t	class:exprtk::function_compositor
setup	extern_libs/exprtk.h	/^         inline function_t& setup(expression_t& expr)$/;"	f	struct:exprtk::function_compositor::base_func
setup_facet_connectivity	algorithm/MeshCleanup.h	/^  static inline void setup_facet_connectivity(Mesh& mesh)$/;"	f	class:TQMesh::MeshCleanup
setup_vertex_projection	algorithm/QuadLayering.h	/^  void setup_vertex_projection(Mesh& mesh, Front& front)$/;"	f	class:TQMesh::QuadLayerVertices
sf3_map_	extern_libs/exprtk.h	/^         sf3_map_t*               sf3_map_;$/;"	m	class:exprtk::parser::expression_generator
sf3_map_	extern_libs/exprtk.h	/^      sf3_map_t sf3_map_;$/;"	m	class:exprtk::parser
sf3_map_t	extern_libs/exprtk.h	/^      typedef std::map<std::string,std::pair<trinary_functor_t   ,operator_t> > sf3_map_t;$/;"	t	class:exprtk::parser
sf3_node	extern_libs/exprtk.h	/^         sf3_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
sf3_optimisable	extern_libs/exprtk.h	/^         inline bool sf3_optimisable(const std::string& sf3id, details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
sf3_optimisable	extern_libs/exprtk.h	/^         inline bool sf3_optimisable(const std::string& sf3id, trinary_functor_t& tfunc) const$/;"	f	class:exprtk::parser::expression_generator
sf3_type	extern_libs/exprtk.h	/^            typedef typename cocov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_cocov_expression1
sf3_type	extern_libs/exprtk.h	/^            typedef typename covoc_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covoc_expression0
sf3_type	extern_libs/exprtk.h	/^            typedef typename covoc_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covoc_expression1
sf3_type	extern_libs/exprtk.h	/^            typedef typename covov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covov_expression0
sf3_type	extern_libs/exprtk.h	/^            typedef typename covov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covov_expression1
sf3_type	extern_libs/exprtk.h	/^            typedef typename vococ_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococ_expression0
sf3_type	extern_libs/exprtk.h	/^            typedef typename vocov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocov_expression0
sf3_type	extern_libs/exprtk.h	/^            typedef typename vocov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocov_expression1
sf3_type	extern_libs/exprtk.h	/^            typedef typename vovoc_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression0
sf3_type	extern_libs/exprtk.h	/^            typedef typename vovoc_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression1
sf3_type	extern_libs/exprtk.h	/^            typedef typename vovov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovov_expression0
sf3_type	extern_libs/exprtk.h	/^            typedef typename vovov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovov_expression1
sf3_type	extern_libs/exprtk.h	/^         typedef details::T0oT1oT2_sf3<T, T0, T1, T2> sf3_type;$/;"	t	struct:exprtk::details::T0oT1oT2_define
sf3_type_node	extern_libs/exprtk.h	/^         typedef details::sf3ext_type_node<T, T0, T1, T2> sf3_type_node;$/;"	t	struct:exprtk::details::T0oT1oT2_define
sf3_var_node	extern_libs/exprtk.h	/^         sf3_var_node(const T& v0, const T& v1, const T& v2)$/;"	f	class:exprtk::details::exprtk_final
sf3ext_type_node	extern_libs/exprtk.h	/^      class sf3ext_type_node : public T0oT1oT2_base_node<T>$/;"	c	namespace:exprtk::details
sf4_map_	extern_libs/exprtk.h	/^         sf4_map_t*               sf4_map_;$/;"	m	class:exprtk::parser::expression_generator
sf4_map_	extern_libs/exprtk.h	/^      sf4_map_t sf4_map_;$/;"	m	class:exprtk::parser
sf4_map_t	extern_libs/exprtk.h	/^      typedef std::map<std::string,std::pair<quaternary_functor_t,operator_t> > sf4_map_t;$/;"	t	class:exprtk::parser
sf4_node	extern_libs/exprtk.h	/^         sf4_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
sf4_optimisable	extern_libs/exprtk.h	/^         inline bool sf4_optimisable(const std::string& sf4id, details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
sf4_optimisable	extern_libs/exprtk.h	/^         inline bool sf4_optimisable(const std::string& sf4id, quaternary_functor_t& qfunc) const$/;"	f	class:exprtk::parser::expression_generator
sf4_type	extern_libs/exprtk.h	/^            typedef typename covocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
sf4_type	extern_libs/exprtk.h	/^            typedef typename covocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
sf4_type	extern_libs/exprtk.h	/^            typedef typename covocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
sf4_type	extern_libs/exprtk.h	/^            typedef typename covocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
sf4_type	extern_libs/exprtk.h	/^            typedef typename covocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
sf4_type	extern_libs/exprtk.h	/^            typedef typename covovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
sf4_type	extern_libs/exprtk.h	/^            typedef typename covovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
sf4_type	extern_libs/exprtk.h	/^            typedef typename covovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
sf4_type	extern_libs/exprtk.h	/^            typedef typename covovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
sf4_type	extern_libs/exprtk.h	/^            typedef typename covovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
sf4_type	extern_libs/exprtk.h	/^            typedef typename covovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
sf4_type	extern_libs/exprtk.h	/^            typedef typename covovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
sf4_type	extern_libs/exprtk.h	/^            typedef typename covovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
sf4_type	extern_libs/exprtk.h	/^            typedef typename covovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
sf4_type	extern_libs/exprtk.h	/^            typedef typename covovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
sf4_type	extern_libs/exprtk.h	/^            typedef typename vococov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
sf4_type	extern_libs/exprtk.h	/^            typedef typename vococov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
sf4_type	extern_libs/exprtk.h	/^            typedef typename vococov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
sf4_type	extern_libs/exprtk.h	/^            typedef typename vocovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
sf4_type	extern_libs/exprtk.h	/^            typedef typename vocovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
sf4_type	extern_libs/exprtk.h	/^            typedef typename vocovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
sf4_type	extern_libs/exprtk.h	/^            typedef typename vocovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
sf4_type	extern_libs/exprtk.h	/^            typedef typename vocovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
sf4_type	extern_libs/exprtk.h	/^            typedef typename vocovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
sf4_type	extern_libs/exprtk.h	/^            typedef typename vocovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
sf4_type	extern_libs/exprtk.h	/^            typedef typename vocovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
sf4_type	extern_libs/exprtk.h	/^            typedef typename vocovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
sf4_type	extern_libs/exprtk.h	/^            typedef typename vocovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
sf4_type	extern_libs/exprtk.h	/^            typedef typename vovovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
sf4_type	extern_libs/exprtk.h	/^         typedef details::T0oT1oT2oT3_sf4<T, T0, T1, T2, T3> sf4_type;$/;"	t	struct:exprtk::details::T0oT1oT2oT3_define
sf4_var_node	extern_libs/exprtk.h	/^         sf4_var_node(const T& v0, const T& v1, const T& v2, const T& v3)$/;"	f	class:exprtk::details::exprtk_final
sf_base	extern_libs/exprtk.h	/^      struct sf_base$/;"	s	namespace:exprtk::details
sgn_impl	extern_libs/exprtk.h	/^            inline T sgn_impl(const T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
sgn_impl	extern_libs/exprtk.h	/^            inline T sgn_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
shapes	tests/tests_Boundary.cpp	/^void shapes()$/;"	f	namespace:BoundaryTests
shift_left	extern_libs/exprtk.h	/^      shift_left()$/;"	f	class:exprtk::rtl::vecops::shift_left
shift_left	extern_libs/exprtk.h	/^   class shift_left : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
shift_right	extern_libs/exprtk.h	/^      shift_right()$/;"	f	class:exprtk::rtl::vecops::shift_right
shift_right	extern_libs/exprtk.h	/^   class shift_right : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
shl	extern_libs/exprtk.h	/^         inline T shl(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
shl_impl	extern_libs/exprtk.h	/^            inline T shl_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
shl_impl	extern_libs/exprtk.h	/^            inline T shl_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
show	utils/ProgressBar.h	/^  void show(std::ostream& os) const$/;"	f	class:CppUtils::ProgressBar
show_header	utils/Log.h	/^  bool show_header() const { return show_header_; }$/;"	f	class:CppUtils::LogProperties
show_header	utils/Log.h	/^  void show_header(bool show) { show_header_ = show; }$/;"	f	class:CppUtils::LogProperties
show_header_	utils/Log.h	/^  bool        show_header_   = true;$/;"	m	class:CppUtils::LogProperties
show_progress	algorithm/MeshingStrategy.h	/^  bool show_progress() const { return show_progress_; }$/;"	f	class:TQMesh::MeshingStrategy
show_progress	algorithm/QuadLayering.h	/^  QuadLayering& show_progress(bool s)$/;"	f	class:TQMesh::QuadLayering
show_progress	algorithm/Triangulation.h	/^  Triangulation& show_progress(bool s) $/;"	f	class:TQMesh::Triangulation
shr	extern_libs/exprtk.h	/^         inline T shr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
shr_impl	extern_libs/exprtk.h	/^            inline T shr_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
shr_impl	extern_libs/exprtk.h	/^            inline T shr_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
side_effect	extern_libs/exprtk.h	/^         virtual bool side_effect   () const { return false; }$/;"	f	class:exprtk::details::vector_interface
side_effect_present	extern_libs/exprtk.h	/^         bool side_effect_present;$/;"	m	struct:exprtk::parser::parser_state
simple_triangular_mesh	examples/01_simple_triangular_mesh.cpp	/^bool simple_triangular_mesh()$/;"	f
simplify_unary_negation_branch	extern_libs/exprtk.h	/^      bool simplify_unary_negation_branch(expression_node_ptr& node)$/;"	f	class:exprtk::parser
sin_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   sin_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
sin_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   sin_impl(const T v, real_type_tag) { return std::sin  (v); }$/;"	f	namespace:exprtk::details::numeric::details
sinc_impl	extern_libs/exprtk.h	/^            inline T sinc_impl(T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
sinc_impl	extern_libs/exprtk.h	/^            inline T sinc_impl(T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
single_value_initialse_	extern_libs/exprtk.h	/^         const bool single_value_initialse_;$/;"	m	class:exprtk::details::exprtk_final
sinh_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  sinh_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
sinh_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  sinh_impl(const T v, real_type_tag) { return std::sinh (v); }$/;"	f	namespace:exprtk::details::numeric::details
size	algorithm/Domain.h	/^  size_type size() const { return boundaries_.size(); }$/;"	f	class:TQMesh::Domain
size	algorithm/EdgeList.h	/^  size_t size() const { return edges_.size(); }$/;"	f	class:TQMesh::EdgeList
size	algorithm/MeshGenerator.h	/^  std::size_t size() const { return meshes_.size(); }$/;"	f	class:TQMesh::MeshGenerator
size	extern_libs/exprtk.h	/^            inline std::size_t size() const$/;"	f	class:exprtk::details::vector_holder::vector_holder_base
size	extern_libs/exprtk.h	/^            std::size_t size;$/;"	m	struct:exprtk::details::vec_data_store::control_block
size	extern_libs/exprtk.h	/^            std::size_t size;$/;"	m	struct:exprtk::expression::control_block::data_pack
size	extern_libs/exprtk.h	/^         inline std::size_t size() const$/;"	f	class:exprtk::details::vec_data_store
size	extern_libs/exprtk.h	/^         inline std::size_t size() const$/;"	f	class:exprtk::details::vector_holder
size	extern_libs/exprtk.h	/^         inline std::size_t size() const$/;"	f	class:exprtk::lexer::generator
size	extern_libs/exprtk.h	/^         inline std::size_t size() const$/;"	f	class:exprtk::parser::scope_element_manager
size	extern_libs/exprtk.h	/^         inline std::size_t size() const$/;"	f	class:exprtk::type_store::parameter_list
size	extern_libs/exprtk.h	/^         inline std::size_t size() const$/;"	f	struct:exprtk::type_store::type_view
size	extern_libs/exprtk.h	/^         inline std::size_t size()$/;"	f	class:exprtk::details::vec_data_store
size	extern_libs/exprtk.h	/^         std::size_t   size;$/;"	m	struct:exprtk::details::range_data_type
size	extern_libs/exprtk.h	/^         std::size_t  size;$/;"	m	struct:exprtk::parser::scope_element
size	extern_libs/exprtk.h	/^         std::size_t size() const$/;"	f	class:exprtk::details::exprtk_final
size	extern_libs/exprtk.h	/^         std::size_t size;$/;"	m	struct:exprtk::symbol_table::type_store
size	extern_libs/exprtk.h	/^         struct numeric_info { enum { length = 0, size = 32, bound_length = 0, min_exp = 0, max_exp = 0 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon1
size	extern_libs/exprtk.h	/^         template <> struct numeric_info<int        > { enum { length = 10, size = 16, bound_length = 9 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon2
size	extern_libs/exprtk.h	/^      inline std::size_t size() const$/;"	f	class:exprtk::vector_view
size	extern_libs/exprtk.h	/^      std::size_t size;$/;"	m	struct:exprtk::type_store
size	utils/Container.h	/^  size_type size() const { return items_.size(); }$/;"	f	class:CppUtils::Container
size	utils/Matrix.h	/^  inline std::size_t size() const { return data_.size(); }$/;"	f	class:CppUtils::Matrix
size	utils/Matrix.h	/^  inline std::size_t size() { return data_.size(); }$/;"	f	class:CppUtils::Matrix
size	utils/QuadTree.h	/^  size_t size() const { return n_items_; }$/;"	f	class:CppUtils::QuadTree
size	utils/Timer.h	/^  std::size_t size() const { return tv_.size(); }$/;"	f	class:CppUtils::Timer
size_	extern_libs/exprtk.h	/^            const std::size_t size_;$/;"	m	class:exprtk::details::vector_holder::array_vector_impl
size_	extern_libs/exprtk.h	/^         const std::size_t size_;$/;"	m	class:exprtk::details::exprtk_final
size_	extern_libs/exprtk.h	/^      const std::size_t size_;$/;"	m	class:exprtk::vector_view
size_fun_	algorithm/Domain.h	/^  SizeFunction     size_fun_;$/;"	m	class:TQMesh::Domain
size_function	algorithm/Domain.h	/^  inline double size_function(const Vec2d& xy) const$/;"	f	class:TQMesh::Domain
size_range	algorithm/Vertex.h	/^  double       size_range() const { return size_range_; }$/;"	f	class:TQMesh::Vertex
size_range	algorithm/Vertex.h	/^  void size_range(double r) { size_range_ = r; }$/;"	f	class:TQMesh::Vertex
sk	extern_libs/exprtk.h	/^      sumk       <T> sk;$/;"	m	struct:exprtk::rtl::vecops::package
skip_comments	extern_libs/exprtk.h	/^         inline void skip_comments()$/;"	f	class:exprtk::lexer::generator
skip_whitespace	extern_libs/exprtk.h	/^         inline void skip_whitespace()$/;"	f	class:exprtk::lexer::generator
sl	extern_libs/exprtk.h	/^      shift_left <T> sl;$/;"	m	struct:exprtk::rtl::vecops::package
small_refinement	tests/tests_Mesh.cpp	/^void small_refinement()$/;"	f	namespace:MeshTests
smooth_heights	algorithm/QuadLayering.h	/^  void smooth_heights(const Domain& domain)$/;"	f	class:TQMesh::QuadLayerVertices
smooth_quad_layers_	app/TQMeshApp.h	/^  bool                    smooth_quad_layers_;$/;"	m	class:TQMesh::MeshConstruction
smoothing_algorithm_	algorithm/MeshGenerator.h	/^  SmoothingStrategyPtr    smoothing_algorithm_;$/;"	m	class:TQMesh::MeshGenerator
smoothing_iteration	algorithm/SmoothingStrategy.h	/^  void smoothing_iteration() const$/;"	f	class:TQMesh::SmoothingStrategy
smoothing_iterations_	app/TQMeshApp.h	/^  size_t                  smoothing_iterations_;$/;"	m	class:TQMesh::MeshConstruction
smoothing_loop	algorithm/SmoothingStrategy.h	/^  void smoothing_loop(int iterations) $/;"	f	class:TQMesh::SmoothingStrategy
sort	extern_libs/exprtk.h	/^      sort()$/;"	f	class:exprtk::rtl::vecops::sort
sort	extern_libs/exprtk.h	/^   class sort : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
sort	utils/Container.h	/^  void sort(Compare comp)$/;"	f	class:CppUtils::Container
sort_edges	algorithm/Front.h	/^  void sort_edges(bool ascending = true)$/;"	f	class:TQMesh::Front
sort_edges	algorithm/Front.h	/^  void sort_edges(const Vec2d& xy, bool ascending = true)$/;"	f	class:TQMesh::Front
sort_edges	tests/tests_Front.cpp	/^void sort_edges()$/;"	f	namespace:FrontTests
sos_base_node	extern_libs/exprtk.h	/^      class sos_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
sos_node	extern_libs/exprtk.h	/^         explicit sos_node(SType0 p0, SType1 p1)$/;"	f	class:exprtk::details::exprtk_final
sosos_base_node	extern_libs/exprtk.h	/^      class sosos_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
sosos_node	extern_libs/exprtk.h	/^         explicit sosos_node(SType0 p0, SType1 p1, SType2 p2)$/;"	f	class:exprtk::details::exprtk_final
special_function	extern_libs/exprtk.h	/^         inline expression_node_ptr special_function(const details::operator_type& operation, expression_node_ptr (&branch)[3])$/;"	f	class:exprtk::parser::expression_generator
special_function	extern_libs/exprtk.h	/^         inline expression_node_ptr special_function(const details::operator_type& operation, expression_node_ptr (&branch)[4])$/;"	f	class:exprtk::parser::expression_generator
special_one_parameter_vararg	extern_libs/exprtk.h	/^         inline bool special_one_parameter_vararg(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
split	utils/QuadTree.h	/^  bool split() const { return split_; }$/;"	f	class:CppUtils::QuadTree
split	utils/StringOps.h	/^std::vector<std::string> split(const std::string& s, char delim,$/;"	f	namespace:CppUtils
split	utils/StringOps.h	/^void split(const std::string& s, char delim, Out result, $/;"	f	namespace:CppUtils
split_edge	algorithm/EdgeList.h	/^  split_edge(Edge& edge, Vertices& vertices, const double s) $/;"	f	class:TQMesh::EdgeList
split_edge	tests/tests_EdgeList.cpp	/^void split_edge()$/;"	f	namespace:EdgeListTests
split_qtree	utils/QuadTree.h	/^  void split_qtree() $/;"	f	class:CppUtils::QuadTree
sqrt2	extern_libs/exprtk.h	/^            static const double sqrt2   =  1.41421356237309504880168872420969807856967187537695;$/;"	m	namespace:exprtk::details::numeric::constant
sqrt_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  sqrt_impl(const T v, int_type_tag) { return std::sqrt (v); }$/;"	f	namespace:exprtk::details::numeric::details
sqrt_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  sqrt_impl(const T v, real_type_tag) { return std::sqrt (v); }$/;"	f	namespace:exprtk::details::numeric::details
square_in_channel	examples/02_square_in_channel.cpp	/^bool square_in_channel()$/;"	f
sr	extern_libs/exprtk.h	/^      shift_right<T> sr;$/;"	m	struct:exprtk::rtl::vecops::package
src_is_ivec_	extern_libs/exprtk.h	/^         bool            src_is_ivec_;$/;"	m	class:exprtk::details::exprtk_final
src_location	extern_libs/exprtk.h	/^         std::string src_location;$/;"	m	struct:exprtk::parser_error::type
st	extern_libs/exprtk.h	/^      sort       <T> st;$/;"	m	struct:exprtk::rtl::vecops::package
st_data	extern_libs/exprtk.h	/^            st_data()$/;"	f	struct:exprtk::symbol_table::control_block::st_data
st_data	extern_libs/exprtk.h	/^         struct st_data$/;"	s	struct:exprtk::symbol_table::control_block
stack_	extern_libs/exprtk.h	/^            std::stack<std::pair<char,std::size_t> > stack_;$/;"	m	class:exprtk::lexer::helper::bracket_checker
stack_depth	extern_libs/exprtk.h	/^         std::size_t stack_depth;$/;"	m	struct:exprtk::function_compositor::base_func
stack_depth	extern_libs/exprtk.h	/^         std::size_t stack_depth;$/;"	m	struct:exprtk::parser::parser_state
stack_limit_handler	extern_libs/exprtk.h	/^         explicit stack_limit_handler(parser<T>& p)$/;"	f	class:exprtk::parser::stack_limit_handler
stack_limit_handler	extern_libs/exprtk.h	/^      class stack_limit_handler$/;"	c	class:exprtk::parser
start	extern_libs/exprtk.h	/^      inline void start()$/;"	f	class:exprtk::timer
start_key	utils/ParaReader.h	/^  const string& start_key() const { return start_key_; }$/;"	f	class:CppUtils::ParameterBase
start_key	utils/ParaReader.h	/^  string& start_key() { return start_key_; }$/;"	f	class:CppUtils::ParameterBase
start_key_	utils/ParaReader.h	/^  string   start_key_;$/;"	m	class:CppUtils::ParameterBase
start_time_	extern_libs/exprtk.h	/^         LARGE_INTEGER start_time_;$/;"	m	class:exprtk::timer
start_time_	extern_libs/exprtk.h	/^         struct timeval start_time_;$/;"	m	class:exprtk::timer	typeref:struct:exprtk::timer::timeval
starting_position	algorithm/QuadLayering.h	/^  QuadLayering& starting_position(const Vec2d& v) $/;"	f	class:TQMesh::QuadLayering
starting_position	algorithm/QuadLayering.h	/^  QuadLayering& starting_position(double x, double y) $/;"	f	class:TQMesh::QuadLayering
starting_position	algorithm/QuadLayering.h	/^  const Vec2d& starting_position() const { return xy_start_; }$/;"	f	class:TQMesh::QuadLayering
state	utils/Testing.h	/^  bool state() const { return state_; }$/;"	f	class:CppUtils::TestData
state	utils/Testing.h	/^  void state(bool s) { state_ = s; }$/;"	f	class:CppUtils::TestData
state_	extern_libs/exprtk.h	/^            bool state_;$/;"	m	class:exprtk::lexer::helper::bracket_checker
state_	extern_libs/exprtk.h	/^      parser_state state_;$/;"	m	class:exprtk::parser
state_t	extern_libs/exprtk.h	/^      struct state_t$/;"	s	class:exprtk::parser
sto	utils/StringOps.h	/^converter sto(const std::string& x) { return {x}; }$/;"	f	namespace:CppUtils
stop	extern_libs/exprtk.h	/^      inline void stop()$/;"	f	class:exprtk::timer
stop_time_	extern_libs/exprtk.h	/^         LARGE_INTEGER stop_time_;$/;"	m	class:exprtk::timer
stop_time_	extern_libs/exprtk.h	/^         struct timeval stop_time_;$/;"	m	class:exprtk::timer	typeref:struct:exprtk::timer::timeval
store	extern_libs/exprtk.h	/^         inline void store()$/;"	f	class:exprtk::lexer::generator
store_current_token_	extern_libs/exprtk.h	/^         token_t     store_current_token_;$/;"	m	class:exprtk::lexer::parser_helper
store_token	extern_libs/exprtk.h	/^         inline void store_token()$/;"	f	class:exprtk::lexer::parser_helper
store_token_itr_	extern_libs/exprtk.h	/^         token_list_itr_t   store_token_itr_;$/;"	m	class:exprtk::lexer::generator
store_type	extern_libs/exprtk.h	/^      enum store_type$/;"	g	struct:exprtk::type_store
str	extern_libs/exprtk.h	/^         std::string str() const$/;"	f	class:exprtk::details::exprtk_final
str0_base_ptr_	extern_libs/exprtk.h	/^         str_base_ptr        str0_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_base_ptr_	extern_libs/exprtk.h	/^         str_base_ptr     str0_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_base_ptr_	extern_libs/exprtk.h	/^         str_base_ptr    str0_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_base_ptr_	extern_libs/exprtk.h	/^         str_base_ptr str0_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_node_ptr_	extern_libs/exprtk.h	/^         strvar_node_ptr str0_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_range_ptr_	extern_libs/exprtk.h	/^         irange_ptr          str0_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_range_ptr_	extern_libs/exprtk.h	/^         irange_ptr   str0_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_range_ptr_	extern_libs/exprtk.h	/^         range_ptr        str0_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_range_ptr_	extern_libs/exprtk.h	/^         range_ptr    str0_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_rng_node_ptr_	extern_libs/exprtk.h	/^         str_rng_node_ptr str0_rng_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_base_ptr_	extern_libs/exprtk.h	/^         str_base_ptr        str1_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_base_ptr_	extern_libs/exprtk.h	/^         str_base_ptr     str1_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_base_ptr_	extern_libs/exprtk.h	/^         str_base_ptr    str1_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_base_ptr_	extern_libs/exprtk.h	/^         str_base_ptr str1_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_node_ptr_	extern_libs/exprtk.h	/^         strvar_node_ptr str1_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_range_ptr_	extern_libs/exprtk.h	/^         irange_ptr          str1_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_range_ptr_	extern_libs/exprtk.h	/^         irange_ptr   str1_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_range_ptr_	extern_libs/exprtk.h	/^         range_ptr        str1_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_range_ptr_	extern_libs/exprtk.h	/^         range_ptr       str1_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_range_ptr_	extern_libs/exprtk.h	/^         range_ptr    str1_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str_base_ptr	extern_libs/exprtk.h	/^         typedef string_base_node <T>* str_base_ptr;$/;"	t	class:exprtk::details::exprtk_final
str_base_ptr	extern_libs/exprtk.h	/^         typedef string_base_node<T>* str_base_ptr;$/;"	t	class:exprtk::details::exprtk_final
str_base_ptr_	extern_libs/exprtk.h	/^         str_base_ptr          str_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str_base_ptr_	extern_libs/exprtk.h	/^         str_base_ptr        str_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str_base_ptr_	extern_libs/exprtk.h	/^         str_base_ptr str_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str_function_t	extern_libs/exprtk.h	/^         typedef string_function_node<T,StringFunction> str_function_t;$/;"	t	class:exprtk::details::exprtk_final
str_node	extern_libs/exprtk.h	/^         strbase_ptr_t str_node;$/;"	m	struct:exprtk::details::range_data_type
str_node	extern_libs/exprtk.h	/^         stringvar_node_ptr str_node;$/;"	m	struct:exprtk::parser::scope_element
str_range_ptr_	extern_libs/exprtk.h	/^         irange_ptr            str_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str_range_ptr_	extern_libs/exprtk.h	/^         irange_ptr          str_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str_rng_node_ptr	extern_libs/exprtk.h	/^         typedef string_range_node<T>* str_rng_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
str_sogens_node	extern_libs/exprtk.h	/^         str_sogens_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
str_vararg_node	extern_libs/exprtk.h	/^         explicit str_vararg_node(const Sequence<expression_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::details::exprtk_final
str_xoxr_node	extern_libs/exprtk.h	/^         explicit str_xoxr_node(SType0 p0, SType1 p1, RangePack rp1)$/;"	f	class:exprtk::details::exprtk_final
str_xrox_node	extern_libs/exprtk.h	/^         explicit str_xrox_node(SType0 p0, SType1 p1, RangePack rp0)$/;"	f	class:exprtk::details::exprtk_final
str_xroxr_node	extern_libs/exprtk.h	/^         explicit str_xroxr_node(SType0 p0, SType1 p1, RangePack rp0, RangePack rp1)$/;"	f	class:exprtk::details::exprtk_final
strbase_ptr_t	extern_libs/exprtk.h	/^         typedef string_base_node<T>* strbase_ptr_t;$/;"	t	struct:exprtk::details::range_data_type
stream_ptr	extern_libs/exprtk.h	/^         void*       stream_ptr;$/;"	m	struct:exprtk::rtl::io::file::details::file_descriptor
strength_reduction_enabled	extern_libs/exprtk.h	/^         bool strength_reduction_enabled () const { return enable_strength_reduction_; }$/;"	f	class:exprtk::parser::settings_store
strength_reduction_enabled	extern_libs/exprtk.h	/^         inline bool strength_reduction_enabled() const$/;"	f	class:exprtk::parser::expression_generator
strength_reduction_enabled_	extern_libs/exprtk.h	/^         bool                     strength_reduction_enabled_;$/;"	m	class:exprtk::parser::expression_generator
stride_	extern_libs/exprtk.h	/^         const std::size_t stride_;$/;"	m	class:exprtk::lexer::token_inserter
stride_	extern_libs/exprtk.h	/^         const std::size_t stride_;$/;"	m	class:exprtk::lexer::token_joiner
stride_	extern_libs/exprtk.h	/^         const std::size_t stride_;$/;"	m	class:exprtk::lexer::token_scanner
string_base_node	extern_libs/exprtk.h	/^      class string_base_node$/;"	c	namespace:exprtk::details
string_concat_node	extern_libs/exprtk.h	/^         string_concat_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
string_concat_node_t	extern_libs/exprtk.h	/^      typedef details::string_concat_node<T>              string_concat_node_t;$/;"	t	class:exprtk::parser
string_function_call	extern_libs/exprtk.h	/^         inline expression_node_ptr string_function_call(igeneric_function_t* gf,$/;"	f	class:exprtk::parser::expression_generator
string_function_node	extern_libs/exprtk.h	/^         string_function_node(StringFunction* func,$/;"	f	class:exprtk::details::string_function_node
string_function_node	extern_libs/exprtk.h	/^      class string_function_node : public generic_function_node<T,StringFunction>,$/;"	c	namespace:exprtk::details
string_function_store	extern_libs/exprtk.h	/^            type_store<generic_function_t, generic_function_t> string_function_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
string_literal_node	extern_libs/exprtk.h	/^         explicit string_literal_node(const std::string& v)$/;"	f	class:exprtk::details::exprtk_final
string_literal_node_t	extern_libs/exprtk.h	/^      typedef details::string_literal_node<T>             string_literal_node_t;$/;"	t	class:exprtk::parser
string_opr_switch_statements	extern_libs/exprtk.h	35979;"	d
string_range_node	extern_libs/exprtk.h	/^         explicit string_range_node(std::string& v, const range_t& rp)$/;"	f	class:exprtk::details::exprtk_final
string_range_node_t	extern_libs/exprtk.h	/^      typedef details::string_range_node<T>               string_range_node_t;$/;"	t	class:exprtk::parser
string_size_node	extern_libs/exprtk.h	/^         explicit string_size_node(expression_ptr branch)$/;"	f	class:exprtk::details::exprtk_final
string_t	extern_libs/exprtk.h	/^         typedef typename generic_type::string_view string_t;$/;"	t	struct:exprtk::rtl::io::details::print_impl
string_t	extern_libs/exprtk.h	/^      typedef typename generic_type::string_view    string_t;$/;"	t	class:exprtk::rtl::io::file::getline
string_t	extern_libs/exprtk.h	/^      typedef typename generic_type::string_view    string_t;$/;"	t	class:exprtk::rtl::io::file::open
string_t	extern_libs/exprtk.h	/^      typedef typename generic_type::string_view    string_t;$/;"	t	class:exprtk::rtl::io::file::read
string_t	extern_libs/exprtk.h	/^      typedef typename generic_type::string_view    string_t;$/;"	t	class:exprtk::rtl::io::file::write
string_t	extern_libs/exprtk.h	/^      typedef typename generic_type::string_view    string_t;$/;"	t	class:exprtk::rtl::vecops::sort
string_to_real	extern_libs/exprtk.h	/^      inline bool string_to_real(Iterator& itr_external, const Iterator end, T& t, numeric::details::real_type_tag)$/;"	f	namespace:exprtk::details
string_to_real	extern_libs/exprtk.h	/^      inline bool string_to_real(const std::string& s, T& t)$/;"	f	namespace:exprtk::details
string_to_single_value	utils/ParaReader.h	/^  T string_to_single_value (const string &str) const$/;"	f	class:CppUtils::ParaBlock
string_to_type_converter_impl_ref	extern_libs/exprtk.h	/^      inline bool string_to_type_converter_impl_ref(Iterator& itr, const Iterator end, T& result)$/;"	f	namespace:exprtk::details
string_varnode_	extern_libs/exprtk.h	/^      stringvar_node_t* string_varnode_;$/;"	m	class:exprtk::stringvar_base
string_view	extern_libs/exprtk.h	/^      typedef type_view<char> string_view;$/;"	t	struct:exprtk::type_store
stringvar_base	extern_libs/exprtk.h	/^      stringvar_base(const std::string& name, stringvar_node_t* svn)$/;"	f	class:exprtk::stringvar_base
stringvar_base	extern_libs/exprtk.h	/^   class stringvar_base$/;"	c	namespace:exprtk
stringvar_count	extern_libs/exprtk.h	/^      inline std::size_t stringvar_count() const$/;"	f	class:exprtk::symbol_table
stringvar_node	extern_libs/exprtk.h	/^         explicit stringvar_node()$/;"	f	class:exprtk::details::exprtk_final
stringvar_node	extern_libs/exprtk.h	/^         explicit stringvar_node(std::string& v)$/;"	f	class:exprtk::details::exprtk_final
stringvar_node_ptr	extern_libs/exprtk.h	/^         typedef stringvar_node_t*         stringvar_node_ptr;$/;"	t	struct:exprtk::parser::scope_element
stringvar_node_t	extern_libs/exprtk.h	/^         typedef typename details::stringvar_node<T> stringvar_node_t;$/;"	t	struct:exprtk::symbol_table::type_store
stringvar_node_t	extern_libs/exprtk.h	/^      typedef details::stringvar_node<T>                  stringvar_node_t;$/;"	t	class:exprtk::parser
stringvar_node_t	extern_libs/exprtk.h	/^      typedef typename details::stringvar_node<T> stringvar_node_t;$/;"	t	class:exprtk::stringvar_base
stringvar_ptr	extern_libs/exprtk.h	/^         typedef typename symbol_table_t::stringvar_ptr stringvar_ptr;$/;"	t	struct:exprtk::parser::symtab_store
stringvar_ptr	extern_libs/exprtk.h	/^      typedef stringvar_t*                        stringvar_ptr;$/;"	t	class:exprtk::symbol_table
stringvar_ref	extern_libs/exprtk.h	/^      inline std::string& stringvar_ref(const std::string& symbol_name)$/;"	f	class:exprtk::symbol_table
stringvar_size_node	extern_libs/exprtk.h	/^         explicit stringvar_size_node()$/;"	f	class:exprtk::details::exprtk_final
stringvar_size_node	extern_libs/exprtk.h	/^         explicit stringvar_size_node(std::string& v)$/;"	f	class:exprtk::details::exprtk_final
stringvar_store	extern_libs/exprtk.h	/^            type_store<stringvar_t       , std::string       > stringvar_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
stringvar_t	extern_libs/exprtk.h	/^      typedef typename details::stringvar_node<T> stringvar_t;$/;"	t	class:exprtk::symbol_table
strvar_node_ptr	extern_libs/exprtk.h	/^         typedef stringvar_node   <T>* strvar_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
strvar_node_ptr	extern_libs/exprtk.h	/^         typedef stringvar_node  <T>* strvar_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
sub_op	extern_libs/exprtk.h	/^      struct sub_op : public opr_base<T>$/;"	s	namespace:exprtk::details
sub_vertex	algorithm/Edge.h	/^  Vertex* sub_vertex() const { return sub_vertex_; }$/;"	f	class:TQMesh::Edge
sub_vertex	algorithm/Edge.h	/^  void sub_vertex(Vertex* v) { sub_vertex_ = v; }$/;"	f	class:TQMesh::Edge
substr	extern_libs/exprtk.h	/^         inline std::string substr(const std::size_t& begin, const std::size_t& end)$/;"	f	class:exprtk::lexer::generator
sum	utils/VecND.h	/^  T sum() const$/;"	f	class:CppUtils::VecND
sumk	extern_libs/exprtk.h	/^      sumk()$/;"	f	class:exprtk::rtl::vecops::sumk
sumk	extern_libs/exprtk.h	/^   class sumk : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
swap	utils/Matrix.h	/^  inline Matrix& swap(Matrix& m)$/;"	f	class:CppUtils::Matrix
swap_generic_node	extern_libs/exprtk.h	/^         swap_generic_node(expression_ptr var0, expression_ptr var1)$/;"	f	class:exprtk::details::exprtk_final
swap_genstrings_node	extern_libs/exprtk.h	/^         swap_genstrings_node(expression_ptr branch0,$/;"	f	class:exprtk::details::exprtk_final
swap_node	extern_libs/exprtk.h	/^         swap_node(variable_node_ptr var0, variable_node_ptr var1)$/;"	f	class:exprtk::details::exprtk_final
swap_string_node	extern_libs/exprtk.h	/^         swap_string_node(expression_ptr branch0, expression_ptr branch1)$/;"	f	class:exprtk::details::exprtk_final
swap_vecvec_node	extern_libs/exprtk.h	/^         swap_vecvec_node(expression_ptr branch0,$/;"	f	class:exprtk::details::exprtk_final
switch_impl_1	extern_libs/exprtk.h	/^            struct switch_impl_1$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_impl_2	extern_libs/exprtk.h	/^            struct switch_impl_2$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_impl_3	extern_libs/exprtk.h	/^            struct switch_impl_3$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_impl_4	extern_libs/exprtk.h	/^            struct switch_impl_4$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_impl_5	extern_libs/exprtk.h	/^            struct switch_impl_5$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_impl_6	extern_libs/exprtk.h	/^            struct switch_impl_6$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_impl_7	extern_libs/exprtk.h	/^            struct switch_impl_7$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_n_node	extern_libs/exprtk.h	/^         explicit switch_n_node(const Sequence<expression_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::details::exprtk_final
switch_node	extern_libs/exprtk.h	/^         explicit switch_node(const Sequence<expression_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::details::switch_node
switch_node	extern_libs/exprtk.h	/^      class switch_node : public expression_node<T>$/;"	c	namespace:exprtk::details
switch_node_t	extern_libs/exprtk.h	/^      typedef details::switch_node<T>                     switch_node_t;$/;"	t	class:exprtk::parser
switch_nodes	extern_libs/exprtk.h	/^         struct switch_nodes$/;"	s	class:exprtk::parser::expression_generator
switch_statement	extern_libs/exprtk.h	/^         inline expression_node_ptr switch_statement(Sequence<expression_node_ptr,Allocator>& arg_list, const bool default_statement_present)$/;"	f	class:exprtk::parser::expression_generator
symbol_exists	extern_libs/exprtk.h	/^         inline bool symbol_exists(const std::string& symbol) const$/;"	f	struct:exprtk::parser::symtab_store
symbol_exists	extern_libs/exprtk.h	/^         inline bool symbol_exists(const std::string& symbol_name) const$/;"	f	struct:exprtk::symbol_table::type_store
symbol_exists	extern_libs/exprtk.h	/^      inline bool symbol_exists(const std::string& symbol_name, const bool check_reserved_symb = true) const$/;"	f	class:exprtk::symbol_table
symbol_list_t	extern_libs/exprtk.h	/^         typedef std::vector<symbol_t> symbol_list_t;$/;"	t	class:exprtk::parser::dependent_entity_collector
symbol_name_list_	extern_libs/exprtk.h	/^         symbol_list_t symbol_name_list_;$/;"	m	class:exprtk::parser::dependent_entity_collector
symbol_replacer	extern_libs/exprtk.h	/^         class symbol_replacer : public lexer::token_modifier$/;"	c	namespace:exprtk::lexer::helper
symbol_replacer_	extern_libs/exprtk.h	/^      lexer::helper::symbol_replacer            symbol_replacer_;$/;"	m	class:exprtk::parser
symbol_t	extern_libs/exprtk.h	/^         typedef std::pair<std::string,symbol_type> symbol_t;$/;"	t	class:exprtk::parser::dependent_entity_collector
symbol_t	extern_libs/exprtk.h	/^         typedef typename parser_t::dependent_entity_collector::symbol_t symbol_t;$/;"	t	struct:exprtk::details::collector_helper
symbol_table	app/size_function.cpp	/^static exprtk::symbol_table<double> symbol_table;$/;"	v	file:
symbol_table	extern_libs/exprtk.h	/^      inline const symbol_table_t& symbol_table() const$/;"	f	class:exprtk::function_compositor
symbol_table	extern_libs/exprtk.h	/^      inline symbol_table_t& symbol_table()$/;"	f	class:exprtk::function_compositor
symbol_table	extern_libs/exprtk.h	/^      symbol_table()$/;"	f	class:exprtk::symbol_table
symbol_table	extern_libs/exprtk.h	/^      symbol_table(const symbol_table<T>& st)$/;"	f	class:exprtk::symbol_table
symbol_table	extern_libs/exprtk.h	/^   class symbol_table$/;"	c	namespace:exprtk
symbol_table_	extern_libs/exprtk.h	/^      symbol_table_t symbol_table_;$/;"	m	class:exprtk::function_compositor
symbol_table_list_	extern_libs/exprtk.h	/^      symtab_list_t  symbol_table_list_;$/;"	m	class:exprtk::expression
symbol_table_list_t	extern_libs/exprtk.h	/^      typedef typename expression<T>::symtab_list_t       symbol_table_list_t;$/;"	t	class:exprtk::parser
symbol_table_t	extern_libs/exprtk.h	/^         typedef exprtk::symbol_table<T> symbol_table_t;$/;"	t	struct:exprtk::details::collector_helper
symbol_table_t	extern_libs/exprtk.h	/^      typedef exprtk::symbol_table<T>           symbol_table_t;$/;"	t	class:exprtk::function_compositor
symbol_table_t	extern_libs/exprtk.h	/^      typedef symbol_table<T>                             symbol_table_t;$/;"	t	class:exprtk::parser
symbol_table_t	extern_libs/exprtk.h	/^      typedef symbol_table<T>         symbol_table_t;$/;"	t	struct:exprtk::type_defs
symbol_type	extern_libs/exprtk.h	/^      enum symbol_type$/;"	g	class:exprtk::parser
symbol_used	extern_libs/exprtk.h	/^      inline bool symbol_used(const std::string& symbol) const$/;"	f	class:exprtk::function_compositor
symbols	extern_libs/exprtk.h	/^         inline std::size_t symbols(Sequence<symbol_t,Allocator>& symbols_list)$/;"	f	class:exprtk::parser::dependent_entity_collector
symtab_list_	extern_libs/exprtk.h	/^         symbol_table_list_t symtab_list_;$/;"	m	struct:exprtk::parser::symtab_store
symtab_list_t	extern_libs/exprtk.h	/^      typedef std::vector<symbol_table<T> > symtab_list_t;$/;"	t	class:exprtk::expression
symtab_store	extern_libs/exprtk.h	/^      struct symtab_store$/;"	s	class:exprtk::parser
symtab_store_	extern_libs/exprtk.h	/^      symtab_store symtab_store_;$/;"	m	class:exprtk::parser
synthesis_error_	extern_libs/exprtk.h	/^      std::string synthesis_error_;$/;"	m	class:exprtk::parser
synthesis_node_type_define	extern_libs/exprtk.h	14752;"	d
synthesis_node_type_define	extern_libs/exprtk.h	14767;"	d
synthesis_node_type_define	extern_libs/exprtk.h	14774;"	d
synthesis_node_type_define	extern_libs/exprtk.h	14789;"	d
synthesis_node_type_define	extern_libs/exprtk.h	14796;"	d
synthesis_node_type_define	extern_libs/exprtk.h	14818;"	d
synthesize_assignment_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_assignment_expression(const details::operator_type& operation, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_assignment_operation_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_assignment_operation_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_binary_ext_expression	extern_libs/exprtk.h	/^         struct synthesize_binary_ext_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_boc_expression	extern_libs/exprtk.h	/^         struct synthesize_boc_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_bov_expression	extern_libs/exprtk.h	/^         struct synthesize_bov_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_cob_expression	extern_libs/exprtk.h	/^         struct synthesize_cob_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_coboc_expression	extern_libs/exprtk.h	/^         struct synthesize_coboc_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_cocob_expression	extern_libs/exprtk.h	/^         struct synthesize_cocob_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_cocov_expression0	extern_libs/exprtk.h	/^         struct synthesize_cocov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_cocov_expression1	extern_libs/exprtk.h	/^         struct synthesize_cocov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_cov_expression	extern_libs/exprtk.h	/^         struct synthesize_cov_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_covoc_expression0	extern_libs/exprtk.h	/^         struct synthesize_covoc_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_covoc_expression1	extern_libs/exprtk.h	/^         struct synthesize_covoc_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_covocov_expression0	extern_libs/exprtk.h	/^         struct synthesize_covocov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_covocov_expression1	extern_libs/exprtk.h	/^         struct synthesize_covocov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_covocov_expression2	extern_libs/exprtk.h	/^         struct synthesize_covocov_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_covocov_expression3	extern_libs/exprtk.h	/^         struct synthesize_covocov_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_covocov_expression4	extern_libs/exprtk.h	/^         struct synthesize_covocov_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_covov_expression0	extern_libs/exprtk.h	/^         struct synthesize_covov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_covov_expression1	extern_libs/exprtk.h	/^         struct synthesize_covov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovoc_expression0	extern_libs/exprtk.h	/^         struct synthesize_covovoc_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovoc_expression1	extern_libs/exprtk.h	/^         struct synthesize_covovoc_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovoc_expression2	extern_libs/exprtk.h	/^         struct synthesize_covovoc_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovoc_expression3	extern_libs/exprtk.h	/^         struct synthesize_covovoc_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovoc_expression4	extern_libs/exprtk.h	/^         struct synthesize_covovoc_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovov_expression0	extern_libs/exprtk.h	/^         struct synthesize_covovov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovov_expression1	extern_libs/exprtk.h	/^         struct synthesize_covovov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovov_expression2	extern_libs/exprtk.h	/^         struct synthesize_covovov_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovov_expression3	extern_libs/exprtk.h	/^         struct synthesize_covovov_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovov_expression4	extern_libs/exprtk.h	/^         struct synthesize_covovov_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_csocs_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_csocs_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csocsr_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_csocsr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csos_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_csos_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csosr_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_csosr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csrocs_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_csrocs_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csrocsr_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_csrocsr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csros_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_csros_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csrosr_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_csrosr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_expression	extern_libs/exprtk.h	/^         inline bool synthesize_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_expression(F* f, expression_node_ptr (&branch)[N])$/;"	f	class:exprtk::parser::expression_generator
synthesize_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_expression(const details::operator_type& operation, expression_node_ptr (&branch)[N])$/;"	f	class:exprtk::parser::expression_generator
synthesize_functor_t	extern_libs/exprtk.h	/^         typedef expression_node_ptr (*synthesize_functor_t)(expression_generator<T>&, const details::operator_type& operation, expression_node_ptr (&branch)[2]);$/;"	t	class:exprtk::parser::expression_generator
synthesize_map_	extern_libs/exprtk.h	/^         synthesize_map_t         synthesize_map_;$/;"	m	class:exprtk::parser::expression_generator
synthesize_map_t	extern_libs/exprtk.h	/^         typedef std::map<std::string,synthesize_functor_t> synthesize_map_t;$/;"	t	class:exprtk::parser::expression_generator
synthesize_null_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_null_expression(const details::operator_type& operation, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_sf3ext_expression	extern_libs/exprtk.h	/^         struct synthesize_sf3ext_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_sf4ext_expression	extern_libs/exprtk.h	/^         struct synthesize_sf4ext_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_shortcircuit_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_shortcircuit_expression(const details::operator_type& operation, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_shortcircuit_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_shortcircuit_expression(const details::operator_type&, expression_node_ptr (&)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_socs_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_socs_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_socsr_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_socsr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_sos_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_sos_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_sos_expression_impl	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_sos_expression_impl(const details::operator_type& opr, T0 s0, T1 s1)$/;"	f	class:exprtk::parser::expression_generator
synthesize_sosr_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_sosr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_srocs_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_srocs_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_srocsr_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_srocsr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_sros_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_sros_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_srosr_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_srosr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_str_xoxr_expression_impl	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_str_xoxr_expression_impl(const details::operator_type& opr,$/;"	f	class:exprtk::parser::expression_generator
synthesize_str_xrox_expression_impl	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_str_xrox_expression_impl(const details::operator_type& opr,$/;"	f	class:exprtk::parser::expression_generator
synthesize_str_xroxr_expression_impl	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_str_xroxr_expression_impl(const details::operator_type& opr,$/;"	f	class:exprtk::parser::expression_generator
synthesize_string_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_string_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_string_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_string_expression(const details::operator_type& opr, expression_node_ptr (&branch)[3])$/;"	f	class:exprtk::parser::expression_generator
synthesize_string_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_string_expression(const details::operator_type&, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_string_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_string_expression(const details::operator_type&, expression_node_ptr (&branch)[3])$/;"	f	class:exprtk::parser::expression_generator
synthesize_strogen_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_strogen_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_unary_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_unary_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_uv_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_uv_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_uvec_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_uvec_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_uvouv_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_uvouv_expression(const details::operator_type& operation, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_vecarithmetic_operation_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_vecarithmetic_operation_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_veceqineqlogic_operation_expression	extern_libs/exprtk.h	/^         inline expression_node_ptr synthesize_veceqineqlogic_operation_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_vob_expression	extern_libs/exprtk.h	/^         struct synthesize_vob_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_voc_expression	extern_libs/exprtk.h	/^         struct synthesize_voc_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococ_expression0	extern_libs/exprtk.h	/^         struct synthesize_vococ_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococ_expression1	extern_libs/exprtk.h	/^         struct synthesize_vococ_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococov_expression0	extern_libs/exprtk.h	/^         struct synthesize_vococov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococov_expression1	extern_libs/exprtk.h	/^         struct synthesize_vococov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococov_expression2	extern_libs/exprtk.h	/^         struct synthesize_vococov_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococov_expression3	extern_libs/exprtk.h	/^         struct synthesize_vococov_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococov_expression4	extern_libs/exprtk.h	/^         struct synthesize_vococov_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocov_expression0	extern_libs/exprtk.h	/^         struct synthesize_vocov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocov_expression1	extern_libs/exprtk.h	/^         struct synthesize_vocov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovoc_expression0	extern_libs/exprtk.h	/^         struct synthesize_vocovoc_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovoc_expression1	extern_libs/exprtk.h	/^         struct synthesize_vocovoc_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovoc_expression2	extern_libs/exprtk.h	/^         struct synthesize_vocovoc_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovoc_expression3	extern_libs/exprtk.h	/^         struct synthesize_vocovoc_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovoc_expression4	extern_libs/exprtk.h	/^         struct synthesize_vocovoc_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovov_expression0	extern_libs/exprtk.h	/^         struct synthesize_vocovov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovov_expression1	extern_libs/exprtk.h	/^         struct synthesize_vocovov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovov_expression2	extern_libs/exprtk.h	/^         struct synthesize_vocovov_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovov_expression3	extern_libs/exprtk.h	/^         struct synthesize_vocovov_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovov_expression4	extern_libs/exprtk.h	/^         struct synthesize_vocovov_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_vov_expression	extern_libs/exprtk.h	/^         struct synthesize_vov_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovoc_expression0	extern_libs/exprtk.h	/^         struct synthesize_vovoc_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovoc_expression1	extern_libs/exprtk.h	/^         struct synthesize_vovoc_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovocov_expression0	extern_libs/exprtk.h	/^         struct synthesize_vovocov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovocov_expression1	extern_libs/exprtk.h	/^         struct synthesize_vovocov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovocov_expression2	extern_libs/exprtk.h	/^         struct synthesize_vovocov_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovocov_expression3	extern_libs/exprtk.h	/^         struct synthesize_vovocov_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovocov_expression4	extern_libs/exprtk.h	/^         struct synthesize_vovocov_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovov_expression0	extern_libs/exprtk.h	/^         struct synthesize_vovov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovov_expression1	extern_libs/exprtk.h	/^         struct synthesize_vovov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovoc_expression0	extern_libs/exprtk.h	/^         struct synthesize_vovovoc_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovoc_expression1	extern_libs/exprtk.h	/^         struct synthesize_vovovoc_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovoc_expression2	extern_libs/exprtk.h	/^         struct synthesize_vovovoc_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovoc_expression3	extern_libs/exprtk.h	/^         struct synthesize_vovovoc_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovoc_expression4	extern_libs/exprtk.h	/^         struct synthesize_vovovoc_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovov_expression0	extern_libs/exprtk.h	/^         struct synthesize_vovovov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovov_expression1	extern_libs/exprtk.h	/^         struct synthesize_vovovov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovov_expression2	extern_libs/exprtk.h	/^         struct synthesize_vovovov_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovov_expression3	extern_libs/exprtk.h	/^         struct synthesize_vovovov_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovov_expression4	extern_libs/exprtk.h	/^         struct synthesize_vovovov_expression4$/;"	s	class:exprtk::parser::expression_generator
t0	extern_libs/exprtk.h	/^         inline T0 t0() const$/;"	f	class:exprtk::details::exprtk_final
t0_	extern_libs/exprtk.h	/^         T0 t0_;$/;"	m	class:exprtk::details::exprtk_final
t1	extern_libs/exprtk.h	/^         inline T1 t1() const$/;"	f	class:exprtk::details::exprtk_final
t1_	extern_libs/exprtk.h	/^         T1 t1_;$/;"	m	class:exprtk::details::exprtk_final
t2	extern_libs/exprtk.h	/^         inline T2 t2() const$/;"	f	class:exprtk::details::exprtk_final
t2_	extern_libs/exprtk.h	/^         T2 t2_;$/;"	m	class:exprtk::details::exprtk_final
t3	extern_libs/exprtk.h	/^         inline T3 t3() const$/;"	f	class:exprtk::details::exprtk_final
t3_	extern_libs/exprtk.h	/^         T3 t3_;$/;"	m	class:exprtk::details::exprtk_final
tan_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   tan_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
tan_impl	extern_libs/exprtk.h	/^            template <typename T> inline T   tan_impl(const T v, real_type_tag) { return std::tan  (v); }$/;"	f	namespace:exprtk::details::numeric::details
tangent	algorithm/Edge.h	/^  const Vec2d& tangent() const { return tang_;}$/;"	f	class:TQMesh::Edge
tanh_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  tanh_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
tanh_impl	extern_libs/exprtk.h	/^            template <typename T> inline T  tanh_impl(const T v, real_type_tag) { return std::tanh (v); }$/;"	f	namespace:exprtk::details::numeric::details
temp_	extern_libs/exprtk.h	/^         vector_holder_ptr temp_;$/;"	m	class:exprtk::details::exprtk_final
temp_vec_node_	extern_libs/exprtk.h	/^         vector_node_ptr   temp_vec_node_;$/;"	m	class:exprtk::details::exprtk_final
test	extern_libs/exprtk.h	/^            static inline bool test(const PtrType, const void*)$/;"	f	struct:exprtk::symbol_table::type_store::ptr_match
test	extern_libs/exprtk.h	/^            static inline bool test(const variable_node_t* p, const void* ptr)$/;"	f	struct:exprtk::symbol_table::type_store::ptr_match
test_FixedVertices	tests/tests_Front.cpp	/^void test_FixedVertices()$/;"	f	namespace:FrontTests
test_LakeSuperior	tests/tests_Front.cpp	/^void test_LakeSuperior()$/;"	f	namespace:FrontTests
test_RefinedTriangle	tests/tests_Front.cpp	/^void test_RefinedTriangle()$/;"	f	namespace:FrontTests
test_TriangleSquareCircle	tests/tests_Front.cpp	/^void test_TriangleSquareCircle()$/;"	f	namespace:FrontTests
test_UnitCircle	tests/tests_Front.cpp	/^void test_UnitCircle()$/;"	f	namespace:FrontTests
test_UnitSquare	tests/tests_Front.cpp	/^void test_UnitSquare()$/;"	f	namespace:FrontTests
tfunc_t	extern_libs/exprtk.h	/^         typedef T (*tfunc_t)(Type t0, Type t1, Type t2);$/;"	t	struct:exprtk::details::functor_t
tfunc_t	extern_libs/exprtk.h	/^         typedef typename functor_t::tfunc_t    tfunc_t;$/;"	t	class:exprtk::details::exprtk_final
thin_fracture	examples/08_thin_fracture.cpp	/^bool thin_fracture()$/;"	f
third_derivative	extern_libs/exprtk.h	/^   inline T third_derivative(const expression<T>& e,$/;"	f	namespace:exprtk
throw_error	algorithm/Error.h	/^static inline void throw_error(std::string msg) { throw Error { msg }; }$/;"	f	namespace:TQMesh
tie_array	extern_libs/exprtk.h	/^         struct tie_array$/;"	s	struct:exprtk::symbol_table::type_store
tie_stddeq	extern_libs/exprtk.h	/^         struct tie_stddeq$/;"	s	struct:exprtk::symbol_table::type_store
tie_stdvec	extern_libs/exprtk.h	/^         struct tie_stdvec$/;"	s	struct:exprtk::symbol_table::type_store
tie_vecview	extern_libs/exprtk.h	/^         struct tie_vecview$/;"	s	struct:exprtk::symbol_table::type_store
time	extern_libs/exprtk.h	/^      inline double time() const$/;"	f	class:exprtk::timer
timer	extern_libs/exprtk.h	/^      timer()$/;"	f	class:exprtk::timer
timer	extern_libs/exprtk.h	/^   class timer$/;"	c	namespace:exprtk
times	utils/Timer.h	/^  const Timevector& times() const { return tv_; }$/;"	f	class:CppUtils::Timer
tm_const_itr_t	extern_libs/exprtk.h	/^         typedef typename type_map_t::const_iterator tm_const_itr_t;$/;"	t	struct:exprtk::symbol_table::type_store
tm_itr_t	extern_libs/exprtk.h	/^         typedef typename type_map_t::iterator tm_itr_t;$/;"	t	struct:exprtk::symbol_table::type_store
tmp_vs_t	extern_libs/exprtk.h	/^         typedef std::vector<T>                 tmp_vs_t;$/;"	t	class:exprtk::details::generic_function_node
to_int	extern_libs/exprtk.h	/^         inline bool to_int(IntType& i) const$/;"	f	struct:exprtk::type_store::scalar_view
to_int32	extern_libs/exprtk.h	/^         inline int to_int32(const T v)$/;"	f	namespace:exprtk::details::numeric
to_int32_impl	extern_libs/exprtk.h	/^            inline int to_int32_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
to_int64	extern_libs/exprtk.h	/^         inline _int64_t to_int64(const T v)$/;"	f	namespace:exprtk::details::numeric
to_int64_impl	extern_libs/exprtk.h	/^            inline _int64_t to_int64_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
to_str	extern_libs/exprtk.h	/^         inline std::string to_str(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
to_str	extern_libs/exprtk.h	/^         static inline std::string to_str(token_type t)$/;"	f	struct:exprtk::lexer::token
to_str	extern_libs/exprtk.h	/^      inline std::string to_str(const operator_type opr)$/;"	f	namespace:exprtk::details
to_str	extern_libs/exprtk.h	/^      inline std::string to_str(error_mode mode)$/;"	f	namespace:exprtk::parser_error
to_str	extern_libs/exprtk.h	/^      inline std::string to_str(int i)$/;"	f	namespace:exprtk::details
to_str	extern_libs/exprtk.h	/^      inline std::string to_str(std::size_t i)$/;"	f	namespace:exprtk::details
to_str	extern_libs/exprtk.h	/^   inline std::string to_str(const StringView& view)$/;"	f	namespace:exprtk
to_uint	extern_libs/exprtk.h	/^         inline bool to_uint(UIntType& u) const$/;"	f	struct:exprtk::type_store::scalar_view
token	extern_libs/exprtk.h	/^         lexer::token token;$/;"	m	struct:exprtk::parser_error::type
token	extern_libs/exprtk.h	/^         token()$/;"	f	struct:exprtk::lexer::token
token	extern_libs/exprtk.h	/^      struct token$/;"	s	namespace:exprtk::lexer
token_advance_mode	extern_libs/exprtk.h	/^         enum token_advance_mode$/;"	g	class:exprtk::lexer::parser_helper
token_inserter	extern_libs/exprtk.h	/^         explicit token_inserter(const std::size_t& stride)$/;"	f	class:exprtk::lexer::token_inserter
token_inserter	extern_libs/exprtk.h	/^      class token_inserter : public helper_interface$/;"	c	namespace:exprtk::lexer
token_inserter_empty_body	extern_libs/exprtk.h	3154;"	d
token_inserter_empty_body	extern_libs/exprtk.h	3174;"	d
token_inserter_list	extern_libs/exprtk.h	/^            std::vector<lexer::token_inserter*> token_inserter_list;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
token_is	extern_libs/exprtk.h	/^         inline bool token_is(const token_t::token_type& ttype, const token_advance_mode mode = e_advance)$/;"	f	class:exprtk::lexer::parser_helper
token_is	extern_libs/exprtk.h	/^         inline bool token_is(const token_t::token_type& ttype,$/;"	f	class:exprtk::lexer::parser_helper
token_itr_	extern_libs/exprtk.h	/^         token_list_itr_t   token_itr_;$/;"	m	class:exprtk::lexer::generator
token_joiner	extern_libs/exprtk.h	/^         explicit token_joiner(const std::size_t& stride)$/;"	f	class:exprtk::lexer::token_joiner
token_joiner	extern_libs/exprtk.h	/^      class token_joiner : public helper_interface$/;"	c	namespace:exprtk::lexer
token_joiner_list	extern_libs/exprtk.h	/^            std::vector<lexer::token_joiner*>   token_joiner_list;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
token_list_	extern_libs/exprtk.h	/^         token_list_t       token_list_;$/;"	m	class:exprtk::lexer::generator
token_list_itr_t	extern_libs/exprtk.h	/^         typedef token_list_t::iterator token_list_itr_t;$/;"	t	class:exprtk::lexer::generator
token_list_t	extern_libs/exprtk.h	/^         typedef std::vector<token_t> token_list_t;$/;"	t	class:exprtk::lexer::generator
token_modifier	extern_libs/exprtk.h	/^      class token_modifier : public helper_interface$/;"	c	namespace:exprtk::lexer
token_modifier_list	extern_libs/exprtk.h	/^            std::vector<lexer::token_modifier*> token_modifier_list;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
token_pair_t	extern_libs/exprtk.h	/^            typedef std::pair<lexer::token::token_type,lexer::token::token_type> token_pair_t;$/;"	t	class:exprtk::lexer::helper::sequence_validator
token_scanner	extern_libs/exprtk.h	/^         explicit token_scanner(const std::size_t& stride)$/;"	f	class:exprtk::lexer::token_scanner
token_scanner	extern_libs/exprtk.h	/^      class token_scanner : public helper_interface$/;"	c	namespace:exprtk::lexer
token_scanner_list	extern_libs/exprtk.h	/^            std::vector<lexer::token_scanner*>  token_scanner_list;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
token_t	extern_libs/exprtk.h	/^            typedef lexer::token::token_type token_t;$/;"	t	class:exprtk::lexer::helper::sequence_validator_3tokens
token_t	extern_libs/exprtk.h	/^         typedef token     token_t;$/;"	t	class:exprtk::lexer::parser_helper
token_t	extern_libs/exprtk.h	/^         typedef token token_t;$/;"	t	class:exprtk::lexer::generator
token_t	extern_libs/exprtk.h	/^      typedef lexer::token                                token_t;$/;"	t	class:exprtk::parser
token_triplet_t	extern_libs/exprtk.h	/^            typedef std::pair<token_t,std::pair<token_t,token_t> > token_triplet_t;$/;"	t	class:exprtk::lexer::helper::sequence_validator_3tokens
token_type	extern_libs/exprtk.h	/^         enum token_type$/;"	g	struct:exprtk::lexer::token
torsion_smoothing	algorithm/MeshGenerator.h	/^  TorsionSmoothing& torsion_smoothing(Mesh& mesh)$/;"	f	class:TQMesh::MeshGenerator
tqmesh_banner	examples/09_tqmesh_banner.cpp	/^bool tqmesh_banner()$/;"	f
tri2quad_modification	algorithm/MeshGenerator.h	/^  Tri2QuadModification& tri2quad_modification(Mesh& mesh)$/;"	f	class:TQMesh::MeshGenerator
tri_quad_intersection	utils/Geometry.h	/^static inline bool tri_quad_intersection(const Vec2<T>& p1,$/;"	f	namespace:CppUtils
tri_tri_intersection	utils/Geometry.h	/^static inline bool tri_tri_intersection(const Vec2<T>& p1,$/;"	f	namespace:CppUtils
triangle_is_valid	algorithm/FrontUpdate.h	/^  bool triangle_is_valid(const Triangle& tri)$/;"	f	class:TQMesh::FrontUpdate
triangles	algorithm/Mesh.h	/^  Triangles& triangles() { return tris_; }$/;"	f	class:TQMesh::Mesh
triangles	algorithm/Mesh.h	/^  const Triangles& triangles() const { return tris_; }$/;"	f	class:TQMesh::Mesh
triangulate	tests/tests_Mesh.cpp	/^void triangulate()$/;"	f	namespace:MeshTests
triangulate_standard_tests	tests/tests_Mesh.cpp	/^void triangulate_standard_tests(const std::string& test_name)$/;"	f	namespace:MeshTests
triangulation	algorithm/MeshGenerator.h	/^  Triangulation& triangulation(Mesh& mesh)$/;"	f	class:TQMesh::MeshGenerator
trinary_functor_t	extern_libs/exprtk.h	/^         typedef typename functor_t::tfunc_t    trinary_functor_t;$/;"	t	struct:exprtk::details::opr_base
trinary_functor_t	extern_libs/exprtk.h	/^         typedef typename functor_t::tfunc_t trinary_functor_t;$/;"	t	struct:exprtk::details::sf_base
trinary_functor_t	extern_libs/exprtk.h	/^      typedef typename functor_t::tfunc_t    trinary_functor_t;$/;"	t	class:exprtk::parser
trinary_node	extern_libs/exprtk.h	/^         trinary_node(const operator_type& opr,$/;"	f	class:exprtk::details::trinary_node
trinary_node	extern_libs/exprtk.h	/^      class trinary_node : public expression_node<T>$/;"	c	namespace:exprtk::details
trinary_node_t	extern_libs/exprtk.h	/^      typedef details::trinary_node<T>                    trinary_node_t;$/;"	t	class:exprtk::parser
trinary_op_map_t	extern_libs/exprtk.h	/^      typedef std::map<operator_t, trinary_functor_t> trinary_op_map_t;$/;"	t	class:exprtk::parser
tris_	algorithm/Mesh.h	/^  Triangles  tris_;$/;"	m	class:TQMesh::Mesh
trunc_impl	extern_libs/exprtk.h	/^            template <typename T> inline T trunc_impl(const T v, int_type_tag) { return v;             }$/;"	f	namespace:exprtk::details::numeric::details
trunc_impl	extern_libs/exprtk.h	/^            template <typename T> inline T trunc_impl(const T v, real_type_tag) { return T(static_cast<long long>(v));    }$/;"	f	namespace:exprtk::details::numeric::details
ts_	extern_libs/exprtk.h	/^         type_store_t& ts_;$/;"	m	struct:exprtk::type_store::type_view
ts_list_t	extern_libs/exprtk.h	/^      typedef std::vector<type_store_t> ts_list_t;$/;"	t	class:exprtk::results_context
tv_	utils/Timer.h	/^  Timevector tv_;$/;"	m	class:CppUtils::Timer
twin_edge	algorithm/Edge.h	/^  Edge* twin_edge() const { return twin_edge_; }$/;"	f	class:TQMesh::Edge
twin_edge	algorithm/Edge.h	/^  void twin_edge(Edge* e) { twin_edge_ = e; }$/;"	f	class:TQMesh::Edge
type	extern_libs/exprtk.h	/^               typedef unknown_type_tag type;$/;"	t	struct:exprtk::details::numeric::details::number_type
type	extern_libs/exprtk.h	/^            data_type   type;$/;"	m	struct:exprtk::expression::control_block::data_pack
type	extern_libs/exprtk.h	/^         element_type type;$/;"	m	struct:exprtk::parser::scope_element
type	extern_libs/exprtk.h	/^         inline virtual node_type type() const$/;"	f	class:exprtk::details::expression_node
type	extern_libs/exprtk.h	/^         operator_type type;$/;"	m	struct:exprtk::details::base_operation_t
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_add; }$/;"	f	struct:exprtk::details::add_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_and; }$/;"	f	struct:exprtk::details::and_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_div; }$/;"	f	struct:exprtk::details::div_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_eq; }$/;"	f	struct:exprtk::details::eq_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_eq; }$/;"	f	struct:exprtk::details::equal_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_gt; }$/;"	f	struct:exprtk::details::gt_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_gte; }$/;"	f	struct:exprtk::details::gte_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_ilike; }$/;"	f	struct:exprtk::details::ilike_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_in; }$/;"	f	struct:exprtk::details::in_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_inranges; }$/;"	f	struct:exprtk::details::inrange_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_like; }$/;"	f	struct:exprtk::details::like_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_lt; }$/;"	f	struct:exprtk::details::lt_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_lte; }$/;"	f	struct:exprtk::details::lte_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_mod; }$/;"	f	struct:exprtk::details::mod_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_mul; }$/;"	f	struct:exprtk::details::mul_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_nand; }$/;"	f	struct:exprtk::details::nand_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_ne; }$/;"	f	struct:exprtk::details::ne_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_nor; }$/;"	f	struct:exprtk::details::nor_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_nor; }$/;"	f	struct:exprtk::details::xnor_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_nor; }$/;"	f	struct:exprtk::details::xor_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_or; }$/;"	f	struct:exprtk::details::or_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_pow; }$/;"	f	struct:exprtk::details::pow_op
type	extern_libs/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_sub; }$/;"	f	struct:exprtk::details::sub_op
type	extern_libs/exprtk.h	/^         token_type type;$/;"	m	struct:exprtk::lexer::token
type	extern_libs/exprtk.h	/^         type()$/;"	f	struct:exprtk::parser_error::type
type	extern_libs/exprtk.h	/^         typedef const T&                       type;$/;"	t	struct:exprtk::function_compositor::base_func
type	extern_libs/exprtk.h	/^         typedef vec_data_store<T> type;$/;"	t	class:exprtk::details::vec_data_store
type	extern_libs/exprtk.h	/^      store_type  type;$/;"	m	struct:exprtk::type_store
type	extern_libs/exprtk.h	/^      struct type$/;"	s	namespace:exprtk::parser_error
type	extern_libs/exprtk.h	/^      typedef T type;$/;"	t	class:exprtk::igeneric_function
type	extern_libs/exprtk.h	/^      typedef const T& type;$/;"	t	class:exprtk::function_compositor
type	utils/ParaReader.h	/^  ParaType type() const { return type_; }$/;"	f	class:CppUtils::ParameterBase
type	utils/VtkIO.h	/^  const char* type() const { return VtkIOTypeTraits<T>::name; }$/;"	f	class:CppUtils::VtkIOData
type0	extern_libs/exprtk.h	/^         typedef details::T0oT1<T, T0, T1> type0;$/;"	t	struct:exprtk::details::T0oT1_define
type0	extern_libs/exprtk.h	/^         typedef details::T0oT1oT2<T, T0, T1, T2, typename T0oT1oT2process<T>::mode0> type0;$/;"	t	struct:exprtk::details::T0oT1oT2_define
type0	extern_libs/exprtk.h	/^         typedef details::T0oT1oT2oT3<T, T0, T1, T2, T3, typename T0oT1oT20T3process<T>::mode0> type0;$/;"	t	struct:exprtk::details::T0oT1oT2oT3_define
type1	extern_libs/exprtk.h	/^         typedef details::T0oT1oT2<T, T0, T1, T2, typename T0oT1oT2process<T>::mode1> type1;$/;"	t	struct:exprtk::details::T0oT1oT2_define
type1	extern_libs/exprtk.h	/^         typedef details::T0oT1oT2oT3<T, T0, T1, T2, T3, typename T0oT1oT20T3process<T>::mode1> type1;$/;"	t	struct:exprtk::details::T0oT1oT2oT3_define
type2	extern_libs/exprtk.h	/^         typedef details::T0oT1oT2oT3<T, T0, T1, T2, T3, typename T0oT1oT20T3process<T>::mode2> type2;$/;"	t	struct:exprtk::details::T0oT1oT2oT3_define
type3	extern_libs/exprtk.h	/^         typedef details::T0oT1oT2oT3<T, T0, T1, T2, T3, typename T0oT1oT20T3process<T>::mode3> type3;$/;"	t	struct:exprtk::details::T0oT1oT2oT3_define
type4	extern_libs/exprtk.h	/^         typedef details::T0oT1oT2oT3<T, T0, T1, T2, T3, typename T0oT1oT20T3process<T>::mode4> type4;$/;"	t	struct:exprtk::details::T0oT1oT2oT3_define
type_	utils/ParaReader.h	/^  ParaType type_;$/;"	m	class:CppUtils::ParameterBase
type_check_enabled	extern_libs/exprtk.h	/^         bool type_check_enabled;$/;"	m	struct:exprtk::parser::parser_state
type_defs	extern_libs/exprtk.h	/^   struct type_defs$/;"	s	namespace:exprtk
type_id	extern_libs/exprtk.h	/^         std::string type_id() const$/;"	f	class:exprtk::details::exprtk_final
type_map_t	extern_libs/exprtk.h	/^         typedef std::map<std::string,type_pair_t,details::ilesscompare> type_map_t;$/;"	t	struct:exprtk::symbol_table::type_store
type_pair_t	extern_libs/exprtk.h	/^         typedef std::pair<bool,type_ptr> type_pair_t;$/;"	t	struct:exprtk::symbol_table::type_store
type_ptr	extern_libs/exprtk.h	/^         typedef type_t* type_ptr;$/;"	t	struct:exprtk::symbol_table::type_store
type_ref	extern_libs/exprtk.h	/^         inline RawType& type_ref(const std::string& symbol_name)$/;"	f	struct:exprtk::symbol_table::type_store
type_size	extern_libs/exprtk.h	/^         std::size_t   type_size;$/;"	m	struct:exprtk::details::range_data_type
type_store	extern_libs/exprtk.h	/^         type_store()$/;"	f	struct:exprtk::symbol_table::type_store
type_store	extern_libs/exprtk.h	/^      struct type_store$/;"	s	class:exprtk::symbol_table
type_store	extern_libs/exprtk.h	/^      type_store()$/;"	f	struct:exprtk::type_store
type_store	extern_libs/exprtk.h	/^   struct type_store$/;"	s	namespace:exprtk
type_store_t	extern_libs/exprtk.h	/^         typedef type_store<T>       type_store_t;$/;"	t	class:exprtk::details::generic_function_node
type_store_t	extern_libs/exprtk.h	/^         typedef type_store<T> type_store_t;$/;"	t	struct:exprtk::type_store::scalar_view
type_store_t	extern_libs/exprtk.h	/^         typedef type_store<T> type_store_t;$/;"	t	struct:exprtk::type_store::type_view
type_store_t	extern_libs/exprtk.h	/^      typedef type_store<T> type_store_t;$/;"	t	class:exprtk::results_context
type_t	extern_libs/exprtk.h	/^         typedef Type type_t;$/;"	t	struct:exprtk::symbol_table::type_store
type_view	extern_libs/exprtk.h	/^         explicit type_view(const type_store_t& ts)$/;"	f	struct:exprtk::type_store::type_view
type_view	extern_libs/exprtk.h	/^         explicit type_view(type_store_t& ts)$/;"	f	struct:exprtk::type_store::type_view
type_view	extern_libs/exprtk.h	/^      struct type_view$/;"	s	struct:exprtk::type_store
types_	utils/VtkIO.h	/^  std::vector<size_t> types_;$/;"	m	class:CppUtils::VtuWriter
typestore_list_	extern_libs/exprtk.h	/^         mutable typestore_list_t typestore_list_;$/;"	m	class:exprtk::details::generic_function_node
typestore_list_t	extern_libs/exprtk.h	/^         typedef std::vector<type_store_t>      typestore_list_t;$/;"	t	class:exprtk::details::generic_function_node
u0	extern_libs/exprtk.h	/^         inline ufunc_t u0()$/;"	f	class:exprtk::details::exprtk_final
u0_	extern_libs/exprtk.h	/^         const ufunc_t u0_;$/;"	m	class:exprtk::details::exprtk_final
u1	extern_libs/exprtk.h	/^         inline ufunc_t u1()$/;"	f	class:exprtk::details::exprtk_final
u1_	extern_libs/exprtk.h	/^         const ufunc_t u1_;$/;"	m	class:exprtk::details::exprtk_final
uchar_cptr	extern_libs/exprtk.h	/^      typedef uchar_t const*         uchar_cptr;$/;"	t	namespace:exprtk::details
uchar_ptr	extern_libs/exprtk.h	/^      typedef uchar_t*               uchar_ptr;$/;"	t	namespace:exprtk::details
uchar_t	extern_libs/exprtk.h	/^      typedef unsigned char          uchar_t;$/;"	t	namespace:exprtk::details
ufunc_t	extern_libs/exprtk.h	/^         typedef T (*ufunc_t)(Type t0);$/;"	t	struct:exprtk::details::functor_t
ufunc_t	extern_libs/exprtk.h	/^         typedef typename functor_t::ufunc_t    ufunc_t;$/;"	t	class:exprtk::details::exprtk_final
unary_branch_node	extern_libs/exprtk.h	/^         explicit unary_branch_node(expression_ptr branch)$/;"	f	class:exprtk::details::exprtk_final
unary_functor_t	extern_libs/exprtk.h	/^         typedef typename functor_t::ufunc_t    unary_functor_t;$/;"	t	struct:exprtk::details::opr_base
unary_functor_t	extern_libs/exprtk.h	/^         typedef typename functor_t::ufunc_t unary_functor_t;$/;"	t	struct:exprtk::details::sf_base
unary_functor_t	extern_libs/exprtk.h	/^      typedef typename functor_t::ufunc_t    unary_functor_t;$/;"	t	class:exprtk::parser
unary_node	extern_libs/exprtk.h	/^         unary_node(const operator_type& opr, expression_ptr branch)$/;"	f	class:exprtk::details::unary_node
unary_node	extern_libs/exprtk.h	/^      class unary_node : public expression_node<T>$/;"	c	namespace:exprtk::details
unary_node_t	extern_libs/exprtk.h	/^      typedef details::unary_node<T>                      unary_node_t;$/;"	t	class:exprtk::parser
unary_op_map_	extern_libs/exprtk.h	/^         unary_op_map_t*          unary_op_map_;$/;"	m	class:exprtk::parser::expression_generator
unary_op_map_	extern_libs/exprtk.h	/^      unary_op_map_t unary_op_map_;$/;"	m	class:exprtk::parser
unary_op_map_t	extern_libs/exprtk.h	/^      typedef std::map<operator_t, unary_functor_t  > unary_op_map_t;$/;"	t	class:exprtk::parser
unary_opr_switch_statements	extern_libs/exprtk.h	28793;"	d
unary_opr_switch_statements	extern_libs/exprtk.h	35975;"	d
unary_optimisable	extern_libs/exprtk.h	/^         inline bool unary_optimisable(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
unary_variable_node	extern_libs/exprtk.h	/^         explicit unary_variable_node(const T& var)$/;"	f	class:exprtk::details::exprtk_final
unary_vector_node	extern_libs/exprtk.h	/^         unary_vector_node(const operator_type& opr, expression_ptr branch0)$/;"	f	class:exprtk::details::exprtk_final
unknown_symbol_resolver	extern_libs/exprtk.h	/^         unknown_symbol_resolver(const usr_mode m = e_usrmode_default)$/;"	f	struct:exprtk::parser::unknown_symbol_resolver
unknown_symbol_resolver	extern_libs/exprtk.h	/^      struct unknown_symbol_resolver$/;"	s	class:exprtk::parser
unknown_symbol_resolver_	extern_libs/exprtk.h	/^      unknown_symbol_resolver* unknown_symbol_resolver_;$/;"	m	class:exprtk::parser
unknown_type_tag	extern_libs/exprtk.h	/^            struct unknown_type_tag { unknown_type_tag() {} };$/;"	f	struct:exprtk::details::numeric::details::unknown_type_tag
unknown_type_tag	extern_libs/exprtk.h	/^            struct unknown_type_tag { unknown_type_tag() {} };$/;"	s	namespace:exprtk::details::numeric::details
update	extern_libs/exprtk.h	/^         inline void update(const T& v0)$/;"	f	struct:exprtk::function_compositor::base_func
update	extern_libs/exprtk.h	/^         inline void update(const T& v0, const T& v1)$/;"	f	struct:exprtk::function_compositor::base_func
update	extern_libs/exprtk.h	/^         inline void update(const T& v0, const T& v1, const T& v2)$/;"	f	struct:exprtk::function_compositor::base_func
update	extern_libs/exprtk.h	/^         inline void update(const T& v0, const T& v1, const T& v2, const T& v3)$/;"	f	struct:exprtk::function_compositor::base_func
update	extern_libs/exprtk.h	/^         inline void update(const T& v0, const T& v1, const T& v2, const T& v3, const T& v4)$/;"	f	struct:exprtk::function_compositor::base_func
update	extern_libs/exprtk.h	/^         inline void update(const T& v0, const T& v1, const T& v2, const T& v3, const T& v4, const T& v5)$/;"	f	struct:exprtk::function_compositor::base_func
update	utils/Container.h	/^  bool update(T& item, const Vec2d& xy_new)$/;"	f	class:CppUtils::Container
update	utils/ProgressBar.h	/^  void update(int prog) $/;"	f	class:CppUtils::ProgressBar
update_attributes	utils/QuadTree.h	/^  void update_attributes(double scale, size_t max_item, $/;"	f	class:CppUtils::QuadTree
update_error	extern_libs/exprtk.h	/^      inline bool update_error(type& error, const std::string& expression)$/;"	f	namespace:exprtk::parser_error
update_front	algorithm/FrontUpdate.h	/^  Triangle* update_front(Edge& base_edge,$/;"	f	class:TQMesh::FrontUpdate
update_front_exhaustive	algorithm/FrontUpdate.h	/^  Triangle* update_front_exhaustive(Edge& base_edge, Vertex& v)$/;"	f	class:TQMesh::FrontUpdate
update_front_state	algorithm/FrontUpdate.h	/^  void update_front_state(Vertex& v)$/;"	f	class:TQMesh::FrontUpdate
update_metrics	algorithm/Edge.h	/^  void update_metrics(bool update_centroid=true) $/;"	f	class:TQMesh::Edge
update_progress_bar	algorithm/MeshingStrategy.h	/^  void update_progress_bar()$/;"	f	class:TQMesh::MeshingStrategy
upper_bound	extern_libs/exprtk.h	/^            int upper_bound;$/;"	m	struct:exprtk::details::loop_unroll::details
upright	utils/QuadTree.h	/^  const Vec2<V>& upright() const { return upright_; }$/;"	f	class:CppUtils::QuadTree
use_color	utils/Log.h	/^  bool use_color() const { return use_color_; }$/;"	f	class:CppUtils::LogProperties
use_color	utils/Log.h	/^  void use_color(bool c) { use_color_ = c; }$/;"	f	class:CppUtils::LogProperties
use_color_	utils/Log.h	/^  bool        use_color_     = true;$/;"	m	class:CppUtils::LogProperties
use_newline	utils/Log.h	/^  bool use_newline() const { return use_newline_; }$/;"	f	class:CppUtils::LogProperties
use_newline	utils/Log.h	/^  void use_newline(bool nl) { use_newline_ = nl; }$/;"	f	class:CppUtils::LogProperties
use_newline_	utils/Log.h	/^  bool        use_newline_   = true;$/;"	m	class:CppUtils::LogProperties
user_size_function	algorithm/Domain.h	/^  UserSizeFunction& user_size_function() $/;"	f	class:TQMesh::Domain
user_size_function	algorithm/Domain.h	/^  UserSizeFunction& user_size_function() { return f_; }$/;"	f	class:TQMesh::SizeFunction
user_size_function	algorithm/Domain.h	/^  const UserSizeFunction& user_size_function() const $/;"	f	class:TQMesh::Domain
user_size_function	algorithm/Domain.h	/^  const UserSizeFunction& user_size_function() const { return f_; }$/;"	f	class:TQMesh::SizeFunction
usr_mode	extern_libs/exprtk.h	/^         enum usr_mode$/;"	g	struct:exprtk::parser::unknown_symbol_resolver
usr_symbol_type	extern_libs/exprtk.h	/^         enum usr_symbol_type$/;"	g	struct:exprtk::parser::unknown_symbol_resolver
usr_t	extern_libs/exprtk.h	/^         typedef typename parser_t::unknown_symbol_resolver usr_t;$/;"	t	struct:exprtk::details::collector_helper
uv_base_node	extern_libs/exprtk.h	/^      class uv_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
uvouv_node	extern_libs/exprtk.h	/^         explicit uvouv_node(const T& var0,const T& var1,$/;"	f	class:exprtk::details::exprtk_final
uvouv_optimisable	extern_libs/exprtk.h	/^         inline bool uvouv_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
v	extern_libs/exprtk.h	/^         varref_t v;$/;"	m	struct:exprtk::function_compositor::base_func
v0	extern_libs/exprtk.h	/^         inline const T& v0()$/;"	f	class:exprtk::details::exprtk_final
v0_	extern_libs/exprtk.h	/^         const T& v0_;$/;"	m	class:exprtk::details::exprtk_final
v1	algorithm/Edge.h	/^  Vertex& v1() { return *v1_; };$/;"	f	class:TQMesh::Edge
v1	algorithm/Edge.h	/^  const Vertex& v1() const { return *v1_; };$/;"	f	class:TQMesh::Edge
v1	algorithm/Quad.h	/^  Vertex&       v1() { return *vertices_[0]; }$/;"	f	class:TQMesh::Quad
v1	algorithm/Quad.h	/^  const Vertex& v1() const { return *vertices_[0]; }$/;"	f	class:TQMesh::Quad
v1	algorithm/Triangle.h	/^  Vertex&       v1()       { return *vertices_[0]; }$/;"	f	class:TQMesh::Triangle
v1	algorithm/Triangle.h	/^  const Vertex& v1() const { return *vertices_[0]; }$/;"	f	class:TQMesh::Triangle
v1	extern_libs/exprtk.h	/^         inline const T& v1()$/;"	f	class:exprtk::details::exprtk_final
v1_	extern_libs/exprtk.h	/^         const T& v1_;$/;"	m	class:exprtk::details::exprtk_final
v1_base	algorithm/QuadLayering.h	/^  VertexVector& v1_base() { return v1_base_; }$/;"	f	class:TQMesh::QuadLayerVertices
v1_base	algorithm/QuadLayering.h	/^  const VertexVector& v1_base() const { return v1_base_; }$/;"	f	class:TQMesh::QuadLayerVertices
v1_proj	algorithm/QuadLayering.h	/^  VertexVector& v1_proj() { return v1_proj_; }$/;"	f	class:TQMesh::QuadLayerVertices
v1_proj	algorithm/QuadLayering.h	/^  const VertexVector& v1_proj() const { return v1_proj_; }$/;"	f	class:TQMesh::QuadLayerVertices
v1_proj_xy	algorithm/QuadLayering.h	/^  Vec2dVector& v1_proj_xy() { return v1_proj_xy_; }$/;"	f	class:TQMesh::QuadLayerVertices
v1_proj_xy	algorithm/QuadLayering.h	/^  const Vec2dVector& v1_proj_xy() const { return v1_proj_xy_; }$/;"	f	class:TQMesh::QuadLayerVertices
v2	algorithm/Edge.h	/^  Vertex& v2() { return *v2_; };$/;"	f	class:TQMesh::Edge
v2	algorithm/Edge.h	/^  const Vertex& v2() const { return *v2_; };$/;"	f	class:TQMesh::Edge
v2	algorithm/Quad.h	/^  Vertex&       v2() { return *vertices_[1]; }$/;"	f	class:TQMesh::Quad
v2	algorithm/Quad.h	/^  const Vertex& v2() const { return *vertices_[1]; }$/;"	f	class:TQMesh::Quad
v2	algorithm/Triangle.h	/^  Vertex&       v2()       { return *vertices_[1]; }$/;"	f	class:TQMesh::Triangle
v2	algorithm/Triangle.h	/^  const Vertex& v2() const { return *vertices_[1]; }$/;"	f	class:TQMesh::Triangle
v2_	extern_libs/exprtk.h	/^         const T& v2_;$/;"	m	class:exprtk::details::exprtk_final
v2_base	algorithm/QuadLayering.h	/^  VertexVector& v2_base() { return v2_base_; }$/;"	f	class:TQMesh::QuadLayerVertices
v2_base	algorithm/QuadLayering.h	/^  const VertexVector& v2_base() const { return v2_base_; }$/;"	f	class:TQMesh::QuadLayerVertices
v2_proj	algorithm/QuadLayering.h	/^  VertexVector& v2_proj() { return v2_proj_; }$/;"	f	class:TQMesh::QuadLayerVertices
v2_proj	algorithm/QuadLayering.h	/^  const VertexVector& v2_proj() const { return v2_proj_; }$/;"	f	class:TQMesh::QuadLayerVertices
v2_proj_xy	algorithm/QuadLayering.h	/^  Vec2dVector& v2_proj_xy() { return v2_proj_xy_; }$/;"	f	class:TQMesh::QuadLayerVertices
v2_proj_xy	algorithm/QuadLayering.h	/^  const Vec2dVector& v2_proj_xy() const { return v2_proj_xy_; }$/;"	f	class:TQMesh::QuadLayerVertices
v3	algorithm/Quad.h	/^  Vertex&       v3() { return *vertices_[2]; }$/;"	f	class:TQMesh::Quad
v3	algorithm/Quad.h	/^  const Vertex& v3() const { return *vertices_[2]; }$/;"	f	class:TQMesh::Quad
v3	algorithm/Triangle.h	/^  Vertex&       v3()       { return *vertices_[2]; }$/;"	f	class:TQMesh::Triangle
v3	algorithm/Triangle.h	/^  const Vertex& v3() const { return *vertices_[2]; }$/;"	f	class:TQMesh::Triangle
v3_	extern_libs/exprtk.h	/^         const T& v3_;$/;"	m	class:exprtk::details::exprtk_final
v4	algorithm/Quad.h	/^  Vertex&       v4() { return *vertices_[3]; }$/;"	f	class:TQMesh::Quad
v4	algorithm/Quad.h	/^  const Vertex& v4() const { return *vertices_[3]; }$/;"	f	class:TQMesh::Quad
v_	extern_libs/exprtk.h	/^         T& v_;$/;"	m	struct:exprtk::type_store::scalar_view
v_	extern_libs/exprtk.h	/^         branch_t                    v_;$/;"	m	class:exprtk::details::exprtk_final
v_	extern_libs/exprtk.h	/^         const T& v_;$/;"	m	class:exprtk::details::exprtk_final
v_	extern_libs/exprtk.h	/^         std::deque<std::string> v_;$/;"	m	struct:exprtk::function_compositor::function
v_	extern_libs/exprtk.h	/^         std::size_t& v_;$/;"	m	struct:exprtk::parser::scoped_inc_dec
valid	extern_libs/exprtk.h	/^         inline bool valid() const$/;"	f	struct:exprtk::parser::symtab_store
valid	extern_libs/exprtk.h	/^      bool valid() const$/;"	f	class:exprtk::stringvar_base
valid	extern_libs/exprtk.h	/^      inline bool valid() const$/;"	f	class:exprtk::symbol_table
valid	extern_libs/exprtk.h	/^      inline bool valid(const std::string& name,$/;"	f	class:exprtk::function_compositor
valid_base_operation	extern_libs/exprtk.h	/^      inline bool valid_base_operation(const std::string& symbol) const$/;"	f	class:exprtk::parser
valid_exponent	extern_libs/exprtk.h	/^      inline bool valid_exponent(const int exponent, numeric::details::real_type_tag)$/;"	f	namespace:exprtk::details
valid_function	extern_libs/exprtk.h	/^      inline bool valid_function(const std::string& symbol) const$/;"	f	class:exprtk::symbol_table
valid_function_name	extern_libs/exprtk.h	/^         inline bool valid_function_name(const std::string& symbol) const$/;"	f	struct:exprtk::parser::symtab_store
valid_operator	extern_libs/exprtk.h	/^         inline bool valid_operator(const details::operator_type& operation, binary_functor_t& bop)$/;"	f	class:exprtk::parser::expression_generator
valid_operator	extern_libs/exprtk.h	/^         inline bool valid_operator(const details::operator_type& operation, unary_functor_t& uop)$/;"	f	class:exprtk::parser::expression_generator
valid_string_operation	extern_libs/exprtk.h	/^         inline bool valid_string_operation(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
valid_string_operation	extern_libs/exprtk.h	/^         inline bool valid_string_operation(const details::operator_type&) const$/;"	f	class:exprtk::parser::expression_generator
valid_symbol	extern_libs/exprtk.h	/^         inline bool valid_symbol(const std::string& symbol) const$/;"	f	struct:exprtk::parser::symtab_store
valid_symbol	extern_libs/exprtk.h	/^      inline bool valid_symbol(const std::string& symbol, const bool check_reserved_symb = true) const$/;"	f	class:exprtk::symbol_table
valid_vararg_operation	extern_libs/exprtk.h	/^      inline bool valid_vararg_operation(const std::string& symbol) const$/;"	f	class:exprtk::parser
value	extern_libs/exprtk.h	/^         T value;$/;"	m	class:exprtk::details::break_exception
value	extern_libs/exprtk.h	/^         inline virtual T value() const$/;"	f	class:exprtk::details::expression_node
value	extern_libs/exprtk.h	/^         inline virtual T value(expression_t& e)$/;"	f	struct:exprtk::function_compositor::base_func
value	extern_libs/exprtk.h	/^         std::string value;$/;"	m	struct:exprtk::lexer::token
value	extern_libs/exprtk.h	/^      inline T value() const$/;"	f	class:exprtk::expression
value	extern_libs/exprtk.h	/^      inline T value(const T& t)$/;"	f	namespace:exprtk::details
value	extern_libs/exprtk.h	/^      inline T value(const T* t)$/;"	f	namespace:exprtk::details
value	extern_libs/exprtk.h	/^      inline T value(details::expression_node<T>* n)$/;"	f	namespace:exprtk::details
value	extern_libs/exprtk.h	/^      inline T value(std::pair<details::expression_node<T>*,bool> n)$/;"	f	namespace:exprtk::details
value_	extern_libs/exprtk.h	/^         T* value_;$/;"	m	class:exprtk::details::exprtk_final
value_	extern_libs/exprtk.h	/^         const T value_;$/;"	m	class:exprtk::details::exprtk_final
value_	extern_libs/exprtk.h	/^         const std::string value_;$/;"	m	class:exprtk::details::exprtk_final
value_	extern_libs/exprtk.h	/^         mutable std::string value_;$/;"	m	class:exprtk::details::exprtk_final
value_	extern_libs/exprtk.h	/^         std::string* value_;$/;"	m	class:exprtk::details::exprtk_final
value_at	extern_libs/exprtk.h	/^            value_ptr value_at(const std::size_t& index) const$/;"	f	class:exprtk::details::vector_holder::array_vector_impl
value_at	extern_libs/exprtk.h	/^            value_ptr value_at(const std::size_t& index) const$/;"	f	class:exprtk::details::vector_holder::sequence_vector_impl
value_at	extern_libs/exprtk.h	/^            value_ptr value_at(const std::size_t& index) const$/;"	f	class:exprtk::details::vector_holder::vector_view_impl
value_list_	extern_libs/exprtk.h	/^         mutable std::vector<T> value_list_;$/;"	m	class:exprtk::details::exprtk_final
value_ptr	extern_libs/exprtk.h	/^         typedef value_type* value_ptr;$/;"	t	class:exprtk::details::vector_holder
value_t	extern_libs/exprtk.h	/^         typedef T value_t;$/;"	t	struct:exprtk::type_store::scalar_view
value_t	extern_libs/exprtk.h	/^         typedef ViewType      value_t;$/;"	t	struct:exprtk::type_store::type_view
value_type	extern_libs/exprtk.h	/^         typedef T value_type;$/;"	t	class:exprtk::details::expression_node
value_type	extern_libs/exprtk.h	/^         typedef T value_type;$/;"	t	class:exprtk::details::exprtk_final
value_type	extern_libs/exprtk.h	/^         typedef Type value_type;$/;"	t	class:exprtk::details::vector_holder
values_	utils/ParaReader.h	/^    , values_(n,T{})$/;"	f	class:CppUtils::Parameter
values_	utils/ParaReader.h	/^  std::vector<T> values_;$/;"	m	class:CppUtils::Parameter
var	extern_libs/exprtk.h	/^         inline function& var(const std::string& v)$/;"	f	struct:exprtk::function_compositor::function
var0_	extern_libs/exprtk.h	/^         ivariable_ptr var0_;$/;"	m	class:exprtk::details::exprtk_final
var0_	extern_libs/exprtk.h	/^         variable_node_ptr var0_;$/;"	m	class:exprtk::details::exprtk_final
var1_	extern_libs/exprtk.h	/^         ivariable_ptr var1_;$/;"	m	class:exprtk::details::exprtk_final
var1_	extern_libs/exprtk.h	/^         variable_node_ptr var1_;$/;"	m	class:exprtk::details::exprtk_final
var_node	extern_libs/exprtk.h	/^         expression_node_ptr var_node;$/;"	m	struct:exprtk::parser::scope_element
var_node_ptr_	extern_libs/exprtk.h	/^         variable_node<T>* var_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
var_range	extern_libs/exprtk.h	/^         bool var_range() const$/;"	f	struct:exprtk::details::range_pack
var_t	extern_libs/exprtk.h	/^         typedef std::vector<T>                var_t;$/;"	t	struct:exprtk::function_compositor::base_func
vararg_add_op	extern_libs/exprtk.h	/^      struct vararg_add_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_avg_op	extern_libs/exprtk.h	/^      struct vararg_avg_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_function	extern_libs/exprtk.h	/^         inline expression_node_ptr vararg_function(const details::operator_type& operation, Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
vararg_function_call	extern_libs/exprtk.h	/^         inline expression_node_ptr vararg_function_call(ivararg_function_t* vaf,$/;"	f	class:exprtk::parser::expression_generator
vararg_function_node	extern_libs/exprtk.h	/^         vararg_function_node(VarArgFunction*  func,$/;"	f	class:exprtk::details::exprtk_final
vararg_function_ptr	extern_libs/exprtk.h	/^         typedef typename symbol_table_t::vararg_function_ptr  vararg_function_ptr;$/;"	t	struct:exprtk::parser::symtab_store
vararg_function_ptr	extern_libs/exprtk.h	/^      typedef vararg_function_t*                  vararg_function_ptr;$/;"	t	class:exprtk::symbol_table
vararg_function_store	extern_libs/exprtk.h	/^            type_store<vararg_function_t , vararg_function_t > vararg_function_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
vararg_function_t	extern_libs/exprtk.h	/^      typedef ivararg_function <T>                vararg_function_t;$/;"	t	class:exprtk::symbol_table
vararg_mand_op	extern_libs/exprtk.h	/^      struct vararg_mand_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_max_op	extern_libs/exprtk.h	/^      struct vararg_max_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_min_op	extern_libs/exprtk.h	/^      struct vararg_min_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_mor_op	extern_libs/exprtk.h	/^      struct vararg_mor_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_mul_op	extern_libs/exprtk.h	/^      struct vararg_mul_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_multi_op	extern_libs/exprtk.h	/^      struct vararg_multi_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_node	extern_libs/exprtk.h	/^         explicit vararg_node(const Sequence<expression_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::details::exprtk_final
vararg_varnode	extern_libs/exprtk.h	/^         explicit vararg_varnode(const Sequence<expression_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::details::exprtk_final
vardef_disabled	extern_libs/exprtk.h	/^         bool vardef_disabled            () const { return disable_vardef_;            }$/;"	f	class:exprtk::parser::settings_store
variable_count	extern_libs/exprtk.h	/^      inline std::size_t variable_count() const$/;"	f	class:exprtk::symbol_table
variable_node	extern_libs/exprtk.h	/^         explicit variable_node()$/;"	f	class:exprtk::details::exprtk_final
variable_node	extern_libs/exprtk.h	/^         explicit variable_node(T& v)$/;"	f	class:exprtk::details::exprtk_final
variable_node_ptr	extern_libs/exprtk.h	/^         typedef variable_node<T>*   variable_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
variable_node_ptr	extern_libs/exprtk.h	/^         typedef variable_node_t*          variable_node_ptr;$/;"	t	struct:exprtk::parser::scope_element
variable_node_ptr	extern_libs/exprtk.h	/^         typedef variable_node_t*   variable_node_ptr;$/;"	t	class:exprtk::parser::scope_element_manager
variable_node_ptr_t	extern_libs/exprtk.h	/^         typedef variable_node_t*    variable_node_ptr_t;$/;"	t	class:exprtk::details::generic_function_node
variable_node_t	extern_libs/exprtk.h	/^         typedef typename details::variable_node<T>  variable_node_t;$/;"	t	struct:exprtk::symbol_table::type_store
variable_node_t	extern_libs/exprtk.h	/^         typedef variable_node<T>    variable_node_t;$/;"	t	class:exprtk::details::generic_function_node
variable_node_t	extern_libs/exprtk.h	/^      typedef details::variable_node<T>                   variable_node_t;$/;"	t	class:exprtk::parser
variable_ptr	extern_libs/exprtk.h	/^         typedef typename symbol_table_t::variable_ptr variable_ptr;$/;"	t	struct:exprtk::parser::symtab_store
variable_ptr	extern_libs/exprtk.h	/^      typedef variable_t*                         variable_ptr;$/;"	t	class:exprtk::symbol_table
variable_ref	extern_libs/exprtk.h	/^      inline T& variable_ref(const std::string& symbol_name)$/;"	f	class:exprtk::symbol_table
variable_store	extern_libs/exprtk.h	/^            type_store<variable_t        , T                 > variable_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
variable_t	extern_libs/exprtk.h	/^      typedef typename details::variable_node<T>  variable_t;$/;"	t	class:exprtk::symbol_table
varnode_optimise_sf3	extern_libs/exprtk.h	/^         inline expression_node_ptr varnode_optimise_sf3(const details::operator_type& operation, expression_node_ptr (&branch)[3])$/;"	f	class:exprtk::parser::expression_generator
varnode_optimise_sf4	extern_libs/exprtk.h	/^         inline expression_node_ptr varnode_optimise_sf4(const details::operator_type& operation, expression_node_ptr (&branch)[4])$/;"	f	class:exprtk::parser::expression_generator
varnode_optimise_varargfunc	extern_libs/exprtk.h	/^         inline expression_node_ptr varnode_optimise_varargfunc(const details::operator_type& operation, Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
varref_t	extern_libs/exprtk.h	/^         typedef std::vector<T*>            varref_t;$/;"	t	struct:exprtk::function_compositor::base_func
vds_	extern_libs/exprtk.h	/^         vds_t                      vds_;$/;"	m	class:exprtk::details::exprtk_final
vds_	extern_libs/exprtk.h	/^         vds_t             vds_;$/;"	m	class:exprtk::details::exprtk_final
vds_	extern_libs/exprtk.h	/^         vds_t           vds_;$/;"	m	class:exprtk::details::exprtk_final
vds_	extern_libs/exprtk.h	/^         vds_t vds_;$/;"	m	class:exprtk::details::exprtk_final
vds_t	extern_libs/exprtk.h	/^         typedef typename details::vec_data_store<Type> vds_t;$/;"	t	class:exprtk::details::vector_holder
vds_t	extern_libs/exprtk.h	/^         typedef vec_data_store  <T>  vds_t;$/;"	t	class:exprtk::details::exprtk_final
vds_t	extern_libs/exprtk.h	/^         typedef vec_data_store <T>  vds_t;$/;"	t	class:exprtk::details::exprtk_final
vds_t	extern_libs/exprtk.h	/^         typedef vec_data_store<T>              vds_t;$/;"	t	class:exprtk::details::exprtk_final
vds_t	extern_libs/exprtk.h	/^         typedef vec_data_store<T>   vds_t;$/;"	t	class:exprtk::details::exprtk_final
vds_t	extern_libs/exprtk.h	/^         typedef vec_data_store<T> vds_t;$/;"	t	class:exprtk::details::vector_interface
vec0_node_ptr_	extern_libs/exprtk.h	/^         vector_node<T>* vec0_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
vec0_node_ptr_	extern_libs/exprtk.h	/^         vector_node_ptr   vec0_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
vec1_node_ptr_	extern_libs/exprtk.h	/^         vector_node<T>* vec1_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
vec1_node_ptr_	extern_libs/exprtk.h	/^         vector_node_ptr   vec1_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
vec_	extern_libs/exprtk.h	/^            const Type* vec_;$/;"	m	class:exprtk::details::vector_holder::array_vector_impl
vec_	extern_libs/exprtk.h	/^         std::vector<ptr_t>& vec_;$/;"	m	struct:exprtk::parser::scoped_vec_delete
vec_add_op	extern_libs/exprtk.h	/^      struct vec_add_op$/;"	s	namespace:exprtk::details
vec_avg_op	extern_libs/exprtk.h	/^      struct vec_avg_op$/;"	s	namespace:exprtk::details
vec_binop_valvec_node	extern_libs/exprtk.h	/^         vec_binop_valvec_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
vec_binop_vecval_node	extern_libs/exprtk.h	/^         vec_binop_vecval_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
vec_binop_vecvec_node	extern_libs/exprtk.h	/^         vec_binop_vecvec_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
vec_data	extern_libs/exprtk.h	/^         T*    vec_data;$/;"	m	union:exprtk::type_store::__anon6
vec_data_store	extern_libs/exprtk.h	/^         explicit vec_data_store(const std::size_t& size)$/;"	f	class:exprtk::details::vec_data_store
vec_data_store	extern_libs/exprtk.h	/^         vec_data_store()$/;"	f	class:exprtk::details::vec_data_store
vec_data_store	extern_libs/exprtk.h	/^         vec_data_store(const std::size_t& size, data_t data, bool dstrct = false)$/;"	f	class:exprtk::details::vec_data_store
vec_data_store	extern_libs/exprtk.h	/^         vec_data_store(const type& vds)$/;"	f	class:exprtk::details::vec_data_store
vec_data_store	extern_libs/exprtk.h	/^      class vec_data_store$/;"	c	namespace:exprtk::details
vec_holder	extern_libs/exprtk.h	/^         inline vector_holder_t& vec_holder()$/;"	f	class:exprtk::details::exprtk_final
vec_holder_	extern_libs/exprtk.h	/^         vector_holder_ptr vec_holder_;$/;"	m	class:exprtk::details::exprtk_final
vec_interface_ptr	extern_libs/exprtk.h	/^         typedef vector_interface<T>* vec_interface_ptr;$/;"	t	class:exprtk::details::exprtk_final
vec_max_op	extern_libs/exprtk.h	/^      struct vec_max_op$/;"	s	namespace:exprtk::details
vec_min_op	extern_libs/exprtk.h	/^      struct vec_min_op$/;"	s	namespace:exprtk::details
vec_mul_op	extern_libs/exprtk.h	/^      struct vec_mul_op$/;"	s	namespace:exprtk::details
vec_node	extern_libs/exprtk.h	/^         vector_holder_ptr   vec_node;$/;"	m	struct:exprtk::parser::scope_element
vec_node_ptr_	extern_libs/exprtk.h	/^         vector_elem_node<T>* vec_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
vec_node_ptr_	extern_libs/exprtk.h	/^         vector_node<T>* vec_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
vec_size_	extern_libs/exprtk.h	/^         std::size_t     vec_size_;$/;"	m	class:exprtk::details::exprtk_final
vec_size_	extern_libs/exprtk.h	/^         std::size_t vec_size_;$/;"	m	class:exprtk::details::exprtk_final
vec_view_	extern_libs/exprtk.h	/^            vector_view_t& vec_view_;$/;"	m	class:exprtk::details::vector_holder::vector_view_impl
vecops	extern_libs/exprtk.h	/^   namespace rtl { namespace vecops {$/;"	n	namespace:exprtk::rtl
vector	utils/ParaReader.h	/^{ scalar, vector, matrix, block };$/;"	m	class:CppUtils::ParaType
vector_assignment_node	extern_libs/exprtk.h	/^         vector_assignment_node(T* vector_base,$/;"	f	class:exprtk::details::exprtk_final
vector_base_	extern_libs/exprtk.h	/^         T* vector_base_;$/;"	m	class:exprtk::details::exprtk_final
vector_base_	extern_libs/exprtk.h	/^         mutable T* vector_base_;$/;"	m	class:exprtk::details::exprtk_final
vector_count	extern_libs/exprtk.h	/^      inline std::size_t vector_count() const$/;"	f	class:exprtk::symbol_table
vector_elem_node	extern_libs/exprtk.h	/^         vector_elem_node(expression_ptr index, vector_holder_ptr vec_holder)$/;"	f	class:exprtk::details::exprtk_final
vector_elem_node_t	extern_libs/exprtk.h	/^      typedef details::vector_elem_node<T>                vector_elem_node_t;$/;"	t	class:exprtk::parser
vector_element	extern_libs/exprtk.h	/^         inline expression_node_ptr vector_element(const std::string& symbol,$/;"	f	class:exprtk::parser::expression_generator
vector_holder	extern_libs/exprtk.h	/^         vector_holder(Type* vec, const std::size_t& vec_size)$/;"	f	class:exprtk::details::vector_holder
vector_holder	extern_libs/exprtk.h	/^         vector_holder(const vds_t& vds)$/;"	f	class:exprtk::details::vector_holder
vector_holder	extern_libs/exprtk.h	/^         vector_holder(exprtk::vector_view<Type>& vec)$/;"	f	class:exprtk::details::vector_holder
vector_holder	extern_libs/exprtk.h	/^         vector_holder(std::vector<Type,Allocator>& vec)$/;"	f	class:exprtk::details::vector_holder
vector_holder	extern_libs/exprtk.h	/^      class vector_holder$/;"	c	namespace:exprtk::details
vector_holder_	extern_libs/exprtk.h	/^         vector_holder_ptr vector_holder_;$/;"	m	class:exprtk::details::exprtk_final
vector_holder_	extern_libs/exprtk.h	/^         vector_holder_t* vector_holder_;$/;"	m	class:exprtk::details::exprtk_final
vector_holder_base	extern_libs/exprtk.h	/^         class vector_holder_base$/;"	c	class:exprtk::details::vector_holder
vector_holder_base_	extern_libs/exprtk.h	/^         mutable vector_holder_base* vector_holder_base_;$/;"	m	class:exprtk::details::vector_holder
vector_holder_ptr	extern_libs/exprtk.h	/^         typedef typename symbol_table_t::vector_holder_ptr    vector_holder_ptr;$/;"	t	struct:exprtk::parser::symtab_store
vector_holder_ptr	extern_libs/exprtk.h	/^         typedef vector_holder   <T>* vector_holder_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_holder_ptr	extern_libs/exprtk.h	/^         typedef vector_holder<T>*   vector_holder_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_holder_ptr	extern_libs/exprtk.h	/^         typedef vector_holder_t*               vector_holder_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_holder_ptr	extern_libs/exprtk.h	/^         typedef vector_holder_t*          vector_holder_ptr;$/;"	t	struct:exprtk::parser::scope_element
vector_holder_ptr	extern_libs/exprtk.h	/^         typedef vector_holder_t*    vector_holder_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_holder_ptr	extern_libs/exprtk.h	/^      typedef details::vector_holder<T>*                  vector_holder_ptr;$/;"	t	class:exprtk::parser
vector_holder_ptr	extern_libs/exprtk.h	/^      typedef details::vector_holder<T>*    vector_holder_ptr;$/;"	t	class:exprtk::expression
vector_holder_ptr	extern_libs/exprtk.h	/^      typedef vector_holder_t* vector_holder_ptr;$/;"	t	class:exprtk::symbol_table
vector_holder_t	extern_libs/exprtk.h	/^         typedef details::vector_holder<T> vector_holder_t;$/;"	t	struct:exprtk::parser::scope_element
vector_holder_t	extern_libs/exprtk.h	/^         typedef vector_holder<T>               vector_holder_t;$/;"	t	class:exprtk::details::exprtk_final
vector_holder_t	extern_libs/exprtk.h	/^         typedef vector_holder<T>    vector_holder_t;$/;"	t	class:exprtk::details::exprtk_final
vector_holder_t	extern_libs/exprtk.h	/^      typedef typename details::vector_holder<T>  vector_holder_t;$/;"	t	class:exprtk::symbol_table
vector_interface	extern_libs/exprtk.h	/^      class vector_interface$/;"	c	namespace:exprtk::details
vector_node	extern_libs/exprtk.h	/^         explicit vector_node(vector_holder_t* vh)$/;"	f	class:exprtk::details::exprtk_final
vector_node	extern_libs/exprtk.h	/^         vector_node(const vds_t& vds, vector_holder_t* vh)$/;"	f	class:exprtk::details::exprtk_final
vector_node_ptr	extern_libs/exprtk.h	/^         typedef vector_node     <T>* vector_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_node_ptr	extern_libs/exprtk.h	/^         typedef vector_node    <T>* vector_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_node_ptr	extern_libs/exprtk.h	/^         typedef vector_node<T>*     vector_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_node_ptr	extern_libs/exprtk.h	/^         typedef vector_node<T>*   vector_node_ptr;$/;"	t	class:exprtk::details::vector_interface
vector_node_ptr_t	extern_libs/exprtk.h	/^         typedef vector_node_t*      vector_node_ptr_t;$/;"	t	class:exprtk::details::generic_function_node
vector_node_t	extern_libs/exprtk.h	/^         typedef vector_node<T>      vector_node_t;$/;"	t	class:exprtk::details::generic_function_node
vector_node_t	extern_libs/exprtk.h	/^      typedef details::vector_node<T>                     vector_node_t;$/;"	t	class:exprtk::parser
vector_ops	extern_libs/exprtk.h	29892;"	d
vector_ops	extern_libs/exprtk.h	29946;"	d
vector_size	extern_libs/exprtk.h	/^            std::size_t vector_size() const$/;"	f	class:exprtk::details::vector_holder::array_vector_impl
vector_size	extern_libs/exprtk.h	/^            std::size_t vector_size() const$/;"	f	class:exprtk::details::vector_holder::sequence_vector_impl
vector_size	extern_libs/exprtk.h	/^            std::size_t vector_size() const$/;"	f	class:exprtk::details::vector_holder::vector_view_impl
vector_store	extern_libs/exprtk.h	/^            type_store<vector_holder_t   , vector_holder_t   > vector_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
vector_t	extern_libs/exprtk.h	/^         typedef details::vector_holder<T>           vector_t;$/;"	t	struct:exprtk::symbol_table::type_store
vector_t	extern_libs/exprtk.h	/^         typedef typename generic_type::vector_view    vector_t;$/;"	t	struct:exprtk::rtl::vecops::helper::load_vector_range
vector_t	extern_libs/exprtk.h	/^         typedef typename generic_type::vector_view vector_t;$/;"	t	struct:exprtk::rtl::io::details::print_impl
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::io::file::read
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::io::file::write
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::all_false
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::all_true
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::any_false
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::any_true
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::axpby
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::axpbyz
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::axpbz
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::axpy
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::axpyz
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::copy
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::count
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::dot
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::dotk
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::iota
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::nthelement
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::rol
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::ror
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::shift_left
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::shift_right
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::sort
vector_t	extern_libs/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::sumk
vector_view	extern_libs/exprtk.h	/^      typedef type_view<T>    vector_view;$/;"	t	struct:exprtk::type_store
vector_view	extern_libs/exprtk.h	/^      vector_view(const vector_view<T>& vv)$/;"	f	class:exprtk::vector_view
vector_view	extern_libs/exprtk.h	/^      vector_view(data_ptr_t data, const std::size_t& size)$/;"	f	class:exprtk::vector_view
vector_view	extern_libs/exprtk.h	/^   class vector_view$/;"	c	namespace:exprtk
vector_view_impl	extern_libs/exprtk.h	/^            vector_view_impl(vector_view_t& vec_view)$/;"	f	class:exprtk::details::vector_holder::vector_view_impl
vector_view_impl	extern_libs/exprtk.h	/^         class vector_view_impl : public vector_holder_base$/;"	c	class:exprtk::details::vector_holder
vector_view_t	extern_libs/exprtk.h	/^            typedef exprtk::vector_view<Type> vector_view_t;$/;"	t	class:exprtk::details::vector_holder::vector_view_impl
vectorize_func	extern_libs/exprtk.h	/^         inline expression_node_ptr vectorize_func(const details::operator_type& operation, Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
vectorize_node	extern_libs/exprtk.h	/^         explicit vectorize_node(const expression_ptr v)$/;"	f	class:exprtk::details::exprtk_final
version	extern_libs/exprtk.h	/^      static const char* version = "2.718281828459045235360287471352"$/;"	m	namespace:exprtk::information
vertex_coords	algorithm/Boundary.h	/^  const std::vector<Vec2d>& vertex_coords() const { return vertex_coords_; }$/;"	f	class:TQMesh::CSVBoundaryReader
vertex_coords	algorithm/Boundary.h	/^  std::vector<Vec2d>& vertex_coords() { return vertex_coords_; }$/;"	f	class:TQMesh::CSVBoundaryReader
vertex_coords_	algorithm/Boundary.h	/^  std::vector<Vec2d> vertex_coords_;$/;"	m	class:TQMesh::CSVBoundaryReader
vertex_is_valid	algorithm/FrontUpdate.h	/^  bool vertex_is_valid(const Vertex& v)$/;"	f	class:TQMesh::FrontUpdate
vertex_pos_	app/TQMeshApp.h	/^  std::vector<Vec2d>      vertex_pos_;$/;"	m	class:TQMesh::MeshConstruction
vertex_props	algorithm/Boundary.h	/^  const std::vector<Vec2d>& vertex_props() const { return vertex_props_; }$/;"	f	class:TQMesh::CSVBoundaryReader
vertex_props	algorithm/Boundary.h	/^  std::vector<Vec2d>& vertex_props() { return vertex_props_; }$/;"	f	class:TQMesh::CSVBoundaryReader
vertex_props_	algorithm/Boundary.h	/^  std::vector<Vec2d> vertex_props_;$/;"	m	class:TQMesh::CSVBoundaryReader
vertex_props_	app/TQMeshApp.h	/^  std::vector<Vec2d>      vertex_props_;$/;"	m	class:TQMesh::MeshConstruction
vertices	algorithm/Domain.h	/^  Vertices& vertices() { return verts_; }$/;"	f	class:TQMesh::Domain
vertices	algorithm/Domain.h	/^  const Vertices& vertices() const { return verts_; }$/;"	f	class:TQMesh::Domain
vertices	algorithm/Mesh.h	/^  Vertices& vertices() { return verts_; }$/;"	f	class:TQMesh::Mesh
vertices	algorithm/Mesh.h	/^  const Vertices& vertices() const { return verts_; }$/;"	f	class:TQMesh::Mesh
vertices_	algorithm/Quad.h	/^  VertexArray          vertices_;$/;"	m	class:TQMesh::Quad
vertices_	algorithm/Triangle.h	/^  VertexArray          vertices_;$/;"	m	class:TQMesh::Triangle
verts_	algorithm/Domain.h	/^  Vertices         verts_;$/;"	m	class:TQMesh::Domain
verts_	algorithm/Mesh.h	/^  Vertices   verts_;$/;"	m	class:TQMesh::Mesh
violation	extern_libs/exprtk.h	/^         violation_type violation;$/;"	m	struct:exprtk::loop_runtime_check::violation_context
violation_context	extern_libs/exprtk.h	/^      struct violation_context$/;"	s	struct:exprtk::loop_runtime_check
violation_type	extern_libs/exprtk.h	/^      enum violation_type$/;"	g	struct:exprtk::loop_runtime_check
vob_base_node	extern_libs/exprtk.h	/^      class vob_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
vob_node	extern_libs/exprtk.h	/^         explicit vob_node(const T& var, const expression_ptr branch)$/;"	f	class:exprtk::details::exprtk_final
vob_optimisable	extern_libs/exprtk.h	/^         inline bool vob_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
voc_base_node	extern_libs/exprtk.h	/^      class voc_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
voc_node	extern_libs/exprtk.h	/^         explicit voc_node(const T& var, const T& const_var)$/;"	f	class:exprtk::details::exprtk_final
voc_optimisable	extern_libs/exprtk.h	/^         inline bool voc_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
voc_t	extern_libs/exprtk.h	/^      typedef details::T0oT1_define<T, cref_t , const_t> voc_t;$/;"	t	class:exprtk::parser
vococ_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2_define<T, cref_t , const_t, const_t> vococ_t;$/;"	t	class:exprtk::parser
vococov_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, cref_t , const_t, const_t, cref_t > vococov_t;$/;"	t	class:exprtk::parser
vocov_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2_define<T, cref_t , const_t, cref_t > vocov_t;$/;"	t	class:exprtk::parser
vocovoc_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, cref_t , const_t, cref_t , const_t> vocovoc_t;$/;"	t	class:exprtk::parser
vocovov_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, cref_t , const_t, cref_t , cref_t > vocovov_t;$/;"	t	class:exprtk::parser
void_t	extern_libs/exprtk.h	/^         typedef std::pair<void*,std::size_t>   void_t;$/;"	t	class:exprtk::details::generic_function_node
vov_base_node	extern_libs/exprtk.h	/^      class vov_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
vov_node	extern_libs/exprtk.h	/^         explicit vov_node(const T& var0, const T& var1)$/;"	f	class:exprtk::details::exprtk_final
vov_optimisable	extern_libs/exprtk.h	/^         inline bool vov_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
vov_t	extern_libs/exprtk.h	/^      typedef details::T0oT1_define<T, cref_t , cref_t > vov_t;$/;"	t	class:exprtk::parser
vovoc_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2_define<T, cref_t , cref_t , const_t> vovoc_t;$/;"	t	class:exprtk::parser
vovocov_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, cref_t , cref_t , const_t, cref_t > vovocov_t;$/;"	t	class:exprtk::parser
vovov_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2_define<T, cref_t , cref_t , cref_t > vovov_t;$/;"	t	class:exprtk::parser
vovovoc_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, cref_t , cref_t , cref_t , const_t> vovovoc_t;$/;"	t	class:exprtk::parser
vovovov_t	extern_libs/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, cref_t , cref_t , cref_t , cref_t > vovovov_t;$/;"	t	class:exprtk::parser
vtype	extern_libs/exprtk.h	/^         typedef const Type& vtype;$/;"	t	class:exprtk::parser::expression_generator
w	extern_libs/exprtk.h	/^      write  <T> w;$/;"	m	struct:exprtk::rtl::io::file::package
warn_header_	utils/Log.h	/^  std::string warn_header_   = "[WARNING] ";$/;"	m	class:CppUtils::LogProperties
waste	utils/Container.h	/^  List& waste() { return waste_; }$/;"	f	class:CppUtils::Container
waste	utils/Container.h	/^  const List& waste() const { return waste_; }$/;"	f	class:CppUtils::Container
waste_	utils/Container.h	/^  List               waste_;$/;"	m	class:CppUtils::Container
wc_imatch	extern_libs/exprtk.h	/^      inline bool wc_imatch(const std::string& wild_card,$/;"	f	namespace:exprtk::details
wc_match	extern_libs/exprtk.h	/^      inline bool wc_match(const std::string& wild_card,$/;"	f	namespace:exprtk::details
while_loop	extern_libs/exprtk.h	/^         inline expression_node_ptr while_loop(expression_node_ptr& condition,$/;"	f	class:exprtk::parser::expression_generator
while_loop_bc_node	extern_libs/exprtk.h	/^         while_loop_bc_node(expression_ptr condition,$/;"	f	class:exprtk::details::while_loop_bc_node
while_loop_bc_node	extern_libs/exprtk.h	/^      class while_loop_bc_node : public while_loop_node<T>$/;"	c	namespace:exprtk::details
while_loop_bc_node_t	extern_libs/exprtk.h	/^      typedef details::while_loop_bc_node<T>              while_loop_bc_node_t;$/;"	t	class:exprtk::parser
while_loop_bc_rtc_node	extern_libs/exprtk.h	/^         while_loop_bc_rtc_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
while_loop_bc_rtc_node_t	extern_libs/exprtk.h	/^      typedef details::while_loop_bc_rtc_node<T>          while_loop_bc_rtc_node_t;$/;"	t	class:exprtk::parser
while_loop_node	extern_libs/exprtk.h	/^         while_loop_node(expression_ptr condition,$/;"	f	class:exprtk::details::while_loop_node
while_loop_node	extern_libs/exprtk.h	/^      class while_loop_node : public expression_node<T>$/;"	c	namespace:exprtk::details
while_loop_node_t	extern_libs/exprtk.h	/^      typedef details::while_loop_node<T>                 while_loop_node_t;$/;"	t	class:exprtk::parser
while_loop_rtc_node	extern_libs/exprtk.h	/^         while_loop_rtc_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
while_loop_rtc_node_t	extern_libs/exprtk.h	/^      typedef details::while_loop_rtc_node<T>             while_loop_rtc_node_t;$/;"	t	class:exprtk::parser
wide_search_factor	algorithm/Triangulation.h	/^  Triangulation& wide_search_factor(double v) $/;"	f	class:TQMesh::Triangulation
wide_search_factor	algorithm/Triangulation.h	/^  double wide_search_factor() const { return wide_search_factor_; }$/;"	f	class:TQMesh::Triangulation
wide_search_factor_	algorithm/Triangulation.h	/^  double wide_search_factor_ = 10.0;$/;"	m	class:TQMesh::Triangulation
width_	utils/ProgressBar.h	/^  int   width_;$/;"	m	class:CppUtils::ProgressBar
write	algorithm/MeshWriter.h	/^  bool write(const std::string& filename, MeshExportType export_type)$/;"	f	class:TQMesh::MeshWriter
write	extern_libs/exprtk.h	/^         bool write(const View& view, const std::size_t amount, const std::size_t offset = 0)$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
write	extern_libs/exprtk.h	/^      write()$/;"	f	class:exprtk::rtl::io::file::write
write	extern_libs/exprtk.h	/^   class write : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::io::file
write	utils/VtkIO.h	/^  void write(const std::string& file_name)$/;"	f	class:CppUtils::VtuWriter
write_cell_data	utils/VtkIO.h	/^  void write_cell_data(std::ofstream& outfile)$/;"	f	class:CppUtils::VtuWriter
write_cells	utils/VtkIO.h	/^  void write_cells(std::ofstream& outfile)$/;"	f	class:CppUtils::VtuWriter
write_connectivity	utils/VtkIO.h	/^  void write_connectivity(std::ofstream& outfile)$/;"	f	class:CppUtils::VtuWriter
write_data	utils/VtkIO.h	/^  void write_data(std::ofstream& outfile, size_t n_max_row) const$/;"	f	class:CppUtils::VtkIOData
write_mesh	algorithm/MeshGenerator.h	/^  bool write_mesh(Mesh& mesh, const std::string& filename,$/;"	f	class:TQMesh::MeshGenerator
write_offsets	utils/VtkIO.h	/^  void write_offsets(std::ofstream& outfile)$/;"	f	class:CppUtils::VtuWriter
write_point_data	utils/VtkIO.h	/^  void write_point_data(std::ofstream& outfile)$/;"	f	class:CppUtils::VtuWriter
write_points	utils/VtkIO.h	/^  void write_points(std::ofstream& outfile)$/;"	f	class:CppUtils::VtuWriter
write_to_txt	algorithm/MeshWriter.h	/^  bool write_to_txt(const std::string& filepath)$/;"	f	class:TQMesh::MeshWriter
write_to_vtu	algorithm/MeshWriter.h	/^  bool write_to_vtu(const std::string& filepath)$/;"	f	class:TQMesh::MeshWriter
write_types	utils/VtkIO.h	/^  void write_types(std::ofstream& outfile)$/;"	f	class:CppUtils::VtuWriter
write_whitespaces	utils/VtkIO.h	/^static inline void write_whitespaces(std::ofstream& of, size_t ns)$/;"	f	namespace:CppUtils
x	utils/Container.h	/^  const double x() const { return xy_.x; }$/;"	f	class:CppUtils::ContainerEntry
x	utils/StringOps.h	/^  const std::string& x;$/;"	m	struct:CppUtils::converter
x	utils/VecND.h	/^  T& x = get_x(); $/;"	m	class:CppUtils::VecND
x_size_function	app/size_function.cpp	/^static double x_size_function, y_size_function;$/;"	v	file:
xnor_impl	extern_libs/exprtk.h	/^            inline T xnor_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
xnor_impl	extern_libs/exprtk.h	/^            inline T xnor_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
xnor_op	extern_libs/exprtk.h	/^      struct xnor_op : public opr_base<T>$/;"	s	namespace:exprtk::details
xnor_opr	extern_libs/exprtk.h	/^         inline T xnor_opr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
xor_impl	extern_libs/exprtk.h	/^            inline T xor_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
xor_impl	extern_libs/exprtk.h	/^            inline T xor_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
xor_op	extern_libs/exprtk.h	/^      struct xor_op : public opr_base<T>$/;"	s	namespace:exprtk::details
xor_opr	extern_libs/exprtk.h	/^         inline T xor_opr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
xy	utils/Container.h	/^  const Vec2d& xy() const { return xy_; }$/;"	f	class:CppUtils::ContainerEntry
y	utils/Container.h	/^  const double y() const { return xy_.y; }$/;"	f	class:CppUtils::ContainerEntry
y	utils/VecND.h	/^  T& y = get_y(); $/;"	m	class:CppUtils::VecND
y_size_function	app/size_function.cpp	/^static double x_size_function, y_size_function;$/;"	v	file:
z	utils/VecND.h	/^  T& z = get_z(); $/;"	m	class:CppUtils::VecND
zero_return_disabled	extern_libs/exprtk.h	/^         bool zero_return_disabled       () const { return disable_zero_return_;       }$/;"	f	class:exprtk::parser::settings_store
~EdgeList	algorithm/EdgeList.h	/^  ~EdgeList() {}$/;"	f	class:TQMesh::EdgeList
~EntityChecks	algorithm/EntityChecks.h	/^  ~EntityChecks() {};$/;"	f	class:TQMesh::EntityChecks
~Facet	algorithm/Facet.h	/^  virtual ~Facet() {};$/;"	f	class:TQMesh::Facet
~Front	algorithm/Front.h	/^  ~Front() { clear_edges(); }$/;"	f	class:TQMesh::Front
~FrontInitData	algorithm/Front.h	/^  ~FrontInitData() {};$/;"	f	class:TQMesh::FrontInitData
~FrontUpdate	algorithm/FrontUpdate.h	/^  ~FrontUpdate() {}$/;"	f	class:TQMesh::FrontUpdate
~LOG	utils/Log.h	/^  ~LOG() $/;"	f	class:CppUtils::LOG
~LaplaceSmoothing	algorithm/SmoothingStrategy.h	/^  ~LaplaceSmoothing() {}$/;"	f	class:TQMesh::LaplaceSmoothing
~Matrix	utils/Matrix.h	/^  virtual ~Matrix() {}$/;"	f	class:CppUtils::Matrix
~MeshBuilder	algorithm/MeshBuilder.h	/^  virtual ~MeshBuilder() {}$/;"	f	class:TQMesh::MeshBuilder
~MeshChecker	algorithm/MeshChecker.h	/^  virtual ~MeshChecker() {}$/;"	f	class:TQMesh::MeshChecker
~MeshCleanup	algorithm/MeshCleanup.h	/^  ~MeshCleanup() {};$/;"	f	class:TQMesh::MeshCleanup
~MeshMerger	algorithm/MeshMerger.h	/^  virtual ~MeshMerger() {}$/;"	f	class:TQMesh::MeshMerger
~MeshWriter	algorithm/MeshWriter.h	/^  ~MeshWriter() {}$/;"	f	class:TQMesh::MeshWriter
~MeshingStrategy	algorithm/MeshingStrategy.h	/^  virtual ~MeshingStrategy() {}$/;"	f	class:TQMesh::MeshingStrategy
~MixedSmoothing	algorithm/SmoothingStrategy.h	/^  ~MixedSmoothing() {}$/;"	f	class:TQMesh::MixedSmoothing
~ModificationStrategy	algorithm/ModificationStrategy.h	/^  virtual ~ModificationStrategy() {}$/;"	f	class:TQMesh::ModificationStrategy
~NullFacet	algorithm/Facet.h	/^  ~NullFacet() {}$/;"	f	class:TQMesh::NullFacet
~QuadGeometry	algorithm/FacetGeometry.h	/^  ~QuadGeometry() {};$/;"	f	class:TQMesh::QuadGeometry
~QuadLayering	algorithm/QuadLayering.h	/^  ~QuadLayering() {}$/;"	f	class:TQMesh::QuadLayering
~QuadRefinement	algorithm/RefinementStrategy.h	/^  ~QuadRefinement() {}$/;"	f	class:TQMesh::QuadRefinement
~QuadTree	utils/QuadTree.h	/^  ~QuadTree() $/;"	f	class:CppUtils::QuadTree
~RefinementStrategy	algorithm/RefinementStrategy.h	/^  virtual ~RefinementStrategy() {}$/;"	f	class:TQMesh::RefinementStrategy
~SmoothingStrategy	algorithm/SmoothingStrategy.h	/^  virtual ~SmoothingStrategy() {}$/;"	f	class:TQMesh::SmoothingStrategy
~T0oT1oT2_base_node	extern_libs/exprtk.h	/^         virtual ~T0oT1oT2_base_node() {}$/;"	f	class:exprtk::details::T0oT1oT2_base_node
~T0oT1oT2oT3_base_node	extern_libs/exprtk.h	/^         virtual ~T0oT1oT2oT3_base_node() {}$/;"	f	class:exprtk::details::T0oT1oT2oT3_base_node
~TorsionSmoothing	algorithm/SmoothingStrategy.h	/^  ~TorsionSmoothing() {}$/;"	f	class:TQMesh::TorsionSmoothing
~Tri2QuadModification	algorithm/ModificationStrategy.h	/^  ~Tri2QuadModification() {}$/;"	f	class:TQMesh::Tri2QuadModification
~TriangleGeometry	algorithm/FacetGeometry.h	/^  ~TriangleGeometry() {};$/;"	f	class:TQMesh::TriangleGeometry
~Triangulation	algorithm/Triangulation.h	/^  ~Triangulation() {}$/;"	f	class:TQMesh::Triangulation
~base_func	extern_libs/exprtk.h	/^         virtual ~base_func() {}$/;"	f	struct:exprtk::function_compositor::base_func
~boc_base_node	extern_libs/exprtk.h	/^         virtual ~boc_base_node() {}$/;"	f	class:exprtk::details::boc_base_node
~bov_base_node	extern_libs/exprtk.h	/^         virtual ~bov_base_node() {}$/;"	f	class:exprtk::details::bov_base_node
~cob_base_node	extern_libs/exprtk.h	/^         virtual ~cob_base_node() {}$/;"	f	class:exprtk::details::cob_base_node
~conditional_vector_node	extern_libs/exprtk.h	/^        ~conditional_vector_node()$/;"	f	class:exprtk::details::exprtk_final
~const_string_range_node	extern_libs/exprtk.h	/^        ~const_string_range_node()$/;"	f	class:exprtk::details::exprtk_final
~control_block	extern_libs/exprtk.h	/^           ~control_block()$/;"	f	struct:exprtk::details::vec_data_store::control_block
~control_block	extern_libs/exprtk.h	/^        ~control_block()$/;"	f	struct:exprtk::expression::control_block
~control_block	extern_libs/exprtk.h	/^        ~control_block()$/;"	f	struct:exprtk::symbol_table::control_block
~cov_base_node	extern_libs/exprtk.h	/^         virtual ~cov_base_node() {}$/;"	f	class:exprtk::details::cov_base_node
~expression	extern_libs/exprtk.h	/^     ~expression()$/;"	f	class:exprtk::expression
~expression_node	extern_libs/exprtk.h	/^         virtual ~expression_node() {}$/;"	f	class:exprtk::details::expression_node
~function_compositor	extern_libs/exprtk.h	/^     ~function_compositor()$/;"	f	class:exprtk::function_compositor
~generic_function_node	extern_libs/exprtk.h	/^         virtual ~generic_function_node() {}$/;"	f	class:exprtk::details::generic_function_node
~generic_string_range_node	extern_libs/exprtk.h	/^        ~generic_string_range_node()$/;"	f	class:exprtk::details::exprtk_final
~helper_interface	extern_libs/exprtk.h	/^         virtual ~helper_interface()             {              }$/;"	f	class:exprtk::lexer::helper_interface
~ifunction	extern_libs/exprtk.h	/^      virtual ~ifunction() {}$/;"	f	class:exprtk::ifunction
~igeneric_function	extern_libs/exprtk.h	/^      virtual ~igeneric_function() {}$/;"	f	class:exprtk::igeneric_function
~ivararg_function	extern_libs/exprtk.h	/^      virtual ~ivararg_function() {}$/;"	f	class:exprtk::ivararg_function
~ivariable	extern_libs/exprtk.h	/^         virtual ~ivariable() {}$/;"	f	class:exprtk::details::ivariable
~loop_runtime_check	extern_libs/exprtk.h	/^      virtual ~loop_runtime_check() {}$/;"	f	struct:exprtk::loop_runtime_check
~node_collector_interface	extern_libs/exprtk.h	/^         virtual ~node_collector_interface() {}$/;"	f	struct:exprtk::details::node_collector_interface
~node_depth_base	extern_libs/exprtk.h	/^         virtual ~node_depth_base() {}$/;"	f	struct:exprtk::details::node_depth_base
~null_igenfunc	extern_libs/exprtk.h	/^         virtual ~null_igenfunc() {}$/;"	f	class:exprtk::details::null_igenfunc
~parser	extern_libs/exprtk.h	/^     ~parser()$/;"	f	class:exprtk::parser
~polynomial	extern_libs/exprtk.h	/^      virtual ~polynomial() {}$/;"	f	class:exprtk::polynomial
~range_interface	extern_libs/exprtk.h	/^         virtual ~range_interface() {}$/;"	f	class:exprtk::details::range_interface
~scope_handler	extern_libs/exprtk.h	/^        ~scope_handler()$/;"	f	class:exprtk::parser::scope_handler
~scoped_bft	extern_libs/exprtk.h	/^        ~scoped_bft()$/;"	f	struct:exprtk::function_compositor::scoped_bft
~scoped_bool_negator	extern_libs/exprtk.h	/^        ~scoped_bool_negator()$/;"	f	struct:exprtk::parser::scoped_bool_negator
~scoped_bool_or_restorer	extern_libs/exprtk.h	/^        ~scoped_bool_or_restorer()$/;"	f	struct:exprtk::parser::scoped_bool_or_restorer
~scoped_delete	extern_libs/exprtk.h	/^        ~scoped_delete()$/;"	f	struct:exprtk::parser::scoped_delete
~scoped_deq_delete	extern_libs/exprtk.h	/^        ~scoped_deq_delete()$/;"	f	struct:exprtk::parser::scoped_deq_delete
~scoped_expression_delete	extern_libs/exprtk.h	/^        ~scoped_expression_delete()$/;"	f	struct:exprtk::parser::scoped_expression_delete
~scoped_inc_dec	extern_libs/exprtk.h	/^        ~scoped_inc_dec()$/;"	f	struct:exprtk::parser::scoped_inc_dec
~scoped_vec_delete	extern_libs/exprtk.h	/^        ~scoped_vec_delete()$/;"	f	struct:exprtk::parser::scoped_vec_delete
~sf3ext_type_node	extern_libs/exprtk.h	/^         virtual ~sf3ext_type_node() {}$/;"	f	class:exprtk::details::sf3ext_type_node
~sos_base_node	extern_libs/exprtk.h	/^         virtual ~sos_base_node() {}$/;"	f	class:exprtk::details::sos_base_node
~sosos_base_node	extern_libs/exprtk.h	/^         virtual ~sosos_base_node() {}$/;"	f	class:exprtk::details::sosos_base_node
~st_data	extern_libs/exprtk.h	/^           ~st_data()$/;"	f	struct:exprtk::symbol_table::control_block::st_data
~stack_limit_handler	extern_libs/exprtk.h	/^        ~stack_limit_handler()$/;"	f	class:exprtk::parser::stack_limit_handler
~str_xoxr_node	extern_libs/exprtk.h	/^        ~str_xoxr_node()$/;"	f	class:exprtk::details::exprtk_final
~str_xrox_node	extern_libs/exprtk.h	/^        ~str_xrox_node()$/;"	f	class:exprtk::details::exprtk_final
~str_xroxr_node	extern_libs/exprtk.h	/^        ~str_xroxr_node()$/;"	f	class:exprtk::details::exprtk_final
~string_base_node	extern_libs/exprtk.h	/^         virtual ~string_base_node() {}$/;"	f	class:exprtk::details::string_base_node
~string_range_node	extern_libs/exprtk.h	/^         virtual ~string_range_node()$/;"	f	class:exprtk::details::exprtk_final
~symbol_table	extern_libs/exprtk.h	/^     ~symbol_table()$/;"	f	class:exprtk::symbol_table
~token_scanner	extern_libs/exprtk.h	/^         virtual ~token_scanner() {}$/;"	f	class:exprtk::lexer::token_scanner
~unary_vector_node	extern_libs/exprtk.h	/^        ~unary_vector_node()$/;"	f	class:exprtk::details::exprtk_final
~unknown_symbol_resolver	extern_libs/exprtk.h	/^         virtual ~unknown_symbol_resolver() {}$/;"	f	struct:exprtk::parser::unknown_symbol_resolver
~uv_base_node	extern_libs/exprtk.h	/^         virtual ~uv_base_node() {}$/;"	f	class:exprtk::details::uv_base_node
~vec_binop_valvec_node	extern_libs/exprtk.h	/^        ~vec_binop_valvec_node()$/;"	f	class:exprtk::details::exprtk_final
~vec_binop_vecval_node	extern_libs/exprtk.h	/^        ~vec_binop_vecval_node()$/;"	f	class:exprtk::details::exprtk_final
~vec_binop_vecvec_node	extern_libs/exprtk.h	/^        ~vec_binop_vecvec_node()$/;"	f	class:exprtk::details::exprtk_final
~vec_data_store	extern_libs/exprtk.h	/^        ~vec_data_store()$/;"	f	class:exprtk::details::vec_data_store
~vector_holder_base	extern_libs/exprtk.h	/^            virtual ~vector_holder_base() {}$/;"	f	class:exprtk::details::vector_holder::vector_holder_base
~vector_interface	extern_libs/exprtk.h	/^         virtual ~vector_interface() {}$/;"	f	class:exprtk::details::vector_interface
~vob_base_node	extern_libs/exprtk.h	/^         virtual ~vob_base_node() {}$/;"	f	class:exprtk::details::vob_base_node
~voc_base_node	extern_libs/exprtk.h	/^         virtual ~voc_base_node() {}$/;"	f	class:exprtk::details::voc_base_node
~vov_base_node	extern_libs/exprtk.h	/^         virtual ~vov_base_node() {}$/;"	f	class:exprtk::details::vov_base_node
